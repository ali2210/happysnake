{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar sliced = require('sliced');\nvar FunctionCall = require('./node/functionCall');\n\n// create a function that creates a function call of the specific name, using the specified sql instance\nvar getFunctionCallCreator = function (name) {\n  return function () {\n    // turn array-like arguments object into a true array\n    return new FunctionCall(name, sliced(arguments));\n  };\n};\n\n// creates a hash of functions for a sql instance\nvar getFunctions = function (functionNames) {\n  if (typeof functionNames === 'string') return getFunctionCallCreator(functionNames);\n  var functions = _.reduce(functionNames, function (reducer, name) {\n    reducer[name] = getFunctionCallCreator(name);\n    return reducer;\n  }, {});\n  return functions;\n};\n\n// aggregate functions available to all databases\nvar aggregateFunctions = ['AVG', 'COUNT', 'DISTINCT', 'MAX', 'MIN', 'SUM'];\n\n// common scalar functions available to most databases\nvar scalarFunctions = ['ABS', 'COALESCE', 'LEFT', 'LENGTH', 'LOWER', 'LTRIM', 'RANDOM', 'RIGHT', 'ROUND', 'RTRIM', 'SUBSTR', 'TRIM', 'UPPER'];\nvar dateFunctions = ['YEAR', 'MONTH', 'DAY', 'HOUR', 'CURRENT_TIMESTAMP'];\n\n// hstore function available to Postgres\nvar hstoreFunction = 'HSTORE';\n\n//text search functions available to Postgres\nvar textsearchFunctions = ['TS_RANK', 'TS_RANK_CD', 'PLAINTO_TSQUERY', 'TO_TSQUERY', 'TO_TSVECTOR', 'SETWEIGHT'];\nvar standardFunctionNames = aggregateFunctions.concat(scalarFunctions).concat(hstoreFunction).concat(textsearchFunctions).concat(dateFunctions);\n\n// creates a hash of standard functions for a sql instance\nvar getStandardFunctions = function () {\n  return getFunctions(standardFunctionNames);\n};\nmodule.exports.getFunctions = getFunctions;\nmodule.exports.getStandardFunctions = getStandardFunctions;","map":{"version":3,"names":["_","require","sliced","FunctionCall","getFunctionCallCreator","name","arguments","getFunctions","functionNames","functions","reduce","reducer","aggregateFunctions","scalarFunctions","dateFunctions","hstoreFunction","textsearchFunctions","standardFunctionNames","concat","getStandardFunctions","module","exports"],"sources":["/home/ali/Documents/run_prj/happysnake/node_modules/sql/lib/functions.js"],"sourcesContent":["'use strict';\nvar _ = require('lodash');\nvar sliced = require('sliced');\nvar FunctionCall = require('./node/functionCall');\n\n// create a function that creates a function call of the specific name, using the specified sql instance\nvar getFunctionCallCreator = function(name) {\n  return function() {\n    // turn array-like arguments object into a true array\n    return new FunctionCall(name, sliced(arguments));\n  };\n};\n\n// creates a hash of functions for a sql instance\nvar getFunctions = function(functionNames) {\n  if (typeof functionNames === 'string')\n    return getFunctionCallCreator(functionNames);\n\n  var functions = _.reduce(functionNames, function(reducer, name) {\n    reducer[name] = getFunctionCallCreator(name);\n    return reducer;\n  }, {});\n  return functions;\n};\n\n// aggregate functions available to all databases\nvar aggregateFunctions = [\n  'AVG',\n  'COUNT',\n  'DISTINCT',\n  'MAX',\n  'MIN',\n  'SUM'\n];\n\n// common scalar functions available to most databases\nvar scalarFunctions = [\n  'ABS',\n  'COALESCE',\n  'LEFT',\n  'LENGTH',\n  'LOWER',\n  'LTRIM',\n  'RANDOM',\n  'RIGHT',\n  'ROUND',\n  'RTRIM',\n  'SUBSTR',\n  'TRIM',\n  'UPPER'\n];\n\nvar dateFunctions = [\n  'YEAR',\n  'MONTH',\n  'DAY',\n  'HOUR',\n  'CURRENT_TIMESTAMP'\n];\n\n// hstore function available to Postgres\nvar hstoreFunction = 'HSTORE';\n\n//text search functions available to Postgres\nvar textsearchFunctions = ['TS_RANK','TS_RANK_CD', 'PLAINTO_TSQUERY', 'TO_TSQUERY', 'TO_TSVECTOR', 'SETWEIGHT'];\n\nvar standardFunctionNames = aggregateFunctions.concat(scalarFunctions).concat(hstoreFunction).concat(textsearchFunctions).concat(dateFunctions);\n\n// creates a hash of standard functions for a sql instance\nvar getStandardFunctions = function() {\n  return getFunctions(standardFunctionNames);\n};\n\nmodule.exports.getFunctions = getFunctions;\nmodule.exports.getStandardFunctions = getStandardFunctions;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACzB,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAC9B,IAAIE,YAAY,GAAGF,OAAO,CAAC,qBAAqB,CAAC;;AAEjD;AACA,IAAIG,sBAAsB,GAAG,SAAAA,CAASC,IAAI,EAAE;EAC1C,OAAO,YAAW;IAChB;IACA,OAAO,IAAIF,YAAY,CAACE,IAAI,EAAEH,MAAM,CAACI,SAAS,CAAC,CAAC;EAClD,CAAC;AACH,CAAC;;AAED;AACA,IAAIC,YAAY,GAAG,SAAAA,CAASC,aAAa,EAAE;EACzC,IAAI,OAAOA,aAAa,KAAK,QAAQ,EACnC,OAAOJ,sBAAsB,CAACI,aAAa,CAAC;EAE9C,IAAIC,SAAS,GAAGT,CAAC,CAACU,MAAM,CAACF,aAAa,EAAE,UAASG,OAAO,EAAEN,IAAI,EAAE;IAC9DM,OAAO,CAACN,IAAI,CAAC,GAAGD,sBAAsB,CAACC,IAAI,CAAC;IAC5C,OAAOM,OAAO;EAChB,CAAC,EAAE,CAAC,CAAC,CAAC;EACN,OAAOF,SAAS;AAClB,CAAC;;AAED;AACA,IAAIG,kBAAkB,GAAG,CACvB,KAAK,EACL,OAAO,EACP,UAAU,EACV,KAAK,EACL,KAAK,EACL,KAAK,CACN;;AAED;AACA,IAAIC,eAAe,GAAG,CACpB,KAAK,EACL,UAAU,EACV,MAAM,EACN,QAAQ,EACR,OAAO,EACP,OAAO,EACP,QAAQ,EACR,OAAO,EACP,OAAO,EACP,OAAO,EACP,QAAQ,EACR,MAAM,EACN,OAAO,CACR;AAED,IAAIC,aAAa,GAAG,CAClB,MAAM,EACN,OAAO,EACP,KAAK,EACL,MAAM,EACN,mBAAmB,CACpB;;AAED;AACA,IAAIC,cAAc,GAAG,QAAQ;;AAE7B;AACA,IAAIC,mBAAmB,GAAG,CAAC,SAAS,EAAC,YAAY,EAAE,iBAAiB,EAAE,YAAY,EAAE,aAAa,EAAE,WAAW,CAAC;AAE/G,IAAIC,qBAAqB,GAAGL,kBAAkB,CAACM,MAAM,CAACL,eAAe,CAAC,CAACK,MAAM,CAACH,cAAc,CAAC,CAACG,MAAM,CAACF,mBAAmB,CAAC,CAACE,MAAM,CAACJ,aAAa,CAAC;;AAE/I;AACA,IAAIK,oBAAoB,GAAG,SAAAA,CAAA,EAAW;EACpC,OAAOZ,YAAY,CAACU,qBAAqB,CAAC;AAC5C,CAAC;AAEDG,MAAM,CAACC,OAAO,CAACd,YAAY,GAAGA,YAAY;AAC1Ca,MAAM,CAACC,OAAO,CAACF,oBAAoB,GAAGA,oBAAoB"},"metadata":{},"sourceType":"script","externalDependencies":[]}