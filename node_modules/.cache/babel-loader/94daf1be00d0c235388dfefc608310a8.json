{"ast":null,"code":"import _slicedToArray from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/**\n *  Add details about signing here.\n *\n *  @_subsection: api/crypto:Signing  [about-signing]\n */\nimport * as secp256k1 from \"@noble/secp256k1\";\nimport { concat, dataLength, getBytes, getBytesCopy, hexlify, toBeHex, assertArgument } from \"../utils/index.js\";\nimport { computeHmac } from \"./hmac.js\";\nimport { Signature } from \"./signature.js\";\n//const N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// Make noble-secp256k1 sync\nsecp256k1.utils.hmacSha256Sync = function (key) {\n  for (var _len = arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    messages[_key - 1] = arguments[_key];\n  }\n  return getBytes(computeHmac(\"sha256\", key, concat(messages)));\n};\n/**\n *  A **SigningKey** provides high-level access to the elliptic curve\n *  cryptography (ECC) operations and key management.\n */\nexport var SigningKey = /*#__PURE__*/function () {\n  /**\n   *  Creates a new **SigningKey** for %%privateKey%%.\n   */\n  function SigningKey(privateKey) {\n    _classCallCheck(this, SigningKey);\n    assertArgument(dataLength(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n    this.#privateKey = hexlify(privateKey);\n  }\n  /**\n   *  The private key.\n   */\n  _createClass(SigningKey, [{\n    key: \"sign\",\n    /**\n     *  Return the signature of the signed %%digest%%.\n     */\n    value: function sign(digest) {\n      assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n      var _secp256k1$signSync = secp256k1.signSync(getBytesCopy(digest), getBytesCopy(this.#privateKey), {\n          recovered: true,\n          canonical: true\n        }),\n        _secp256k1$signSync2 = _slicedToArray(_secp256k1$signSync, 2),\n        sigDer = _secp256k1$signSync2[0],\n        recid = _secp256k1$signSync2[1];\n      var sig = secp256k1.Signature.fromHex(sigDer);\n      return Signature.from({\n        r: toBeHex(\"0x\" + sig.r.toString(16), 32),\n        s: toBeHex(\"0x\" + sig.s.toString(16), 32),\n        v: recid ? 0x1c : 0x1b\n      });\n    }\n    /**\n     *  Returns the [[link-wiki-ecdh]] shared secret between this\n     *  private key and the %%other%% key.\n     *\n     *  The %%other%% key may be any type of key, a raw public key,\n     *  a compressed/uncompressed pubic key or aprivate key.\n     *\n     *  Best practice is usually to use a cryptographic hash on the\n     *  returned value before using it as a symetric secret.\n     *\n     *  @example:\n     *    sign1 = new SigningKey(id(\"some-secret-1\"))\n     *    sign2 = new SigningKey(id(\"some-secret-2\"))\n     *\n     *    // Notice that privA.computeSharedSecret(pubB)...\n     *    sign1.computeSharedSecret(sign2.publicKey)\n     *    //_result:\n     *\n     *    // ...is equal to privB.computeSharedSecret(pubA).\n     *    sign2.computeSharedSecret(sign1.publicKey)\n     *    //_result:\n     */\n  }, {\n    key: \"computeSharedSecret\",\n    value: function computeSharedSecret(other) {\n      var pubKey = SigningKey.computePublicKey(other);\n      return hexlify(secp256k1.getSharedSecret(getBytesCopy(this.#privateKey), getBytes(pubKey)));\n    }\n    /**\n     *  Compute the public key for %%key%%, optionally %%compressed%%.\n     *\n     *  The %%key%% may be any type of key, a raw public key, a\n     *  compressed/uncompressed public key or private key.\n     *\n     *  @example:\n     *    sign = new SigningKey(id(\"some-secret\"));\n     *\n     *    // Compute the uncompressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey)\n     *    //_result:\n     *\n     *    // Compute the compressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey, true)\n     *    //_result:\n     *\n     *    // Compute the uncompressed public key\n     *    SigningKey.computePublicKey(sign.publicKey, false);\n     *    //_result:\n     *\n     *    // Compute the Compressed a public key\n     *    SigningKey.computePublicKey(sign.publicKey, true);\n     *    //_result:\n     */\n  }, {\n    key: \"privateKey\",\n    get: function get() {\n      return this.#privateKey;\n    }\n    /**\n     *  The uncompressed public key.\n     *\n     * This will always begin with the prefix ``0x04`` and be 132\n     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n     */\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return SigningKey.computePublicKey(this.#privateKey);\n    }\n    /**\n     *  The compressed public key.\n     *\n     *  This will always begin with either the prefix ``0x02`` or ``0x03``\n     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n     *  nibbles)\n     */\n  }, {\n    key: \"compressedPublicKey\",\n    get: function get() {\n      return SigningKey.computePublicKey(this.#privateKey, true);\n    }\n  }], [{\n    key: \"computePublicKey\",\n    value: function computePublicKey(key, compressed) {\n      var bytes = getBytes(key, \"key\");\n      // private key\n      if (bytes.length === 32) {\n        var pubKey = secp256k1.getPublicKey(bytes, !!compressed);\n        return hexlify(pubKey);\n      }\n      // raw public key; use uncompressed key with 0x04 prefix\n      if (bytes.length === 64) {\n        var pub = new Uint8Array(65);\n        pub[0] = 0x04;\n        pub.set(bytes, 1);\n        bytes = pub;\n      }\n      var point = secp256k1.Point.fromHex(bytes);\n      return hexlify(point.toRawBytes(compressed));\n    }\n    /**\n     *  Returns the public key for the private key which produced the\n     *  %%signature%% for the given %%digest%%.\n     *\n     *  @example:\n     *    key = new SigningKey(id(\"some-secret\"))\n     *    digest = id(\"hello world\")\n     *    sig = key.sign(digest)\n     *\n     *    // Notice the signer public key...\n     *    key.publicKey\n     *    //_result:\n     *\n     *    // ...is equal to the recovered public key\n     *    SigningKey.recoverPublicKey(digest, sig)\n     *    //_result:\n     *\n     */\n  }, {\n    key: \"recoverPublicKey\",\n    value: function recoverPublicKey(digest, signature) {\n      assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n      var sig = Signature.from(signature);\n      var der = secp256k1.Signature.fromCompact(getBytesCopy(concat([sig.r, sig.s]))).toDERRawBytes();\n      var pubKey = secp256k1.recoverPublicKey(getBytesCopy(digest), der, sig.yParity);\n      assertArgument(pubKey != null, \"invalid signautre for digest\", \"signature\", signature);\n      return hexlify(pubKey);\n    }\n    /**\n     *  Returns the point resulting from adding the ellipic curve points\n     *  %%p0%% and %%p1%%.\n     *\n     *  This is not a common function most developers should require, but\n     *  can be useful for certain privacy-specific techniques.\n     *\n     *  For example, it is used by [[HDNodeWallet]] to compute child\n     *  addresses from parent public keys and chain codes.\n     */\n  }, {\n    key: \"addPoints\",\n    value: function addPoints(p0, p1, compressed) {\n      var pub0 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p0).substring(2));\n      var pub1 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p1).substring(2));\n      return \"0x\" + pub0.add(pub1).toHex(!!compressed);\n    }\n  }]);\n  return SigningKey;\n}();","map":null,"metadata":{},"sourceType":"module"}