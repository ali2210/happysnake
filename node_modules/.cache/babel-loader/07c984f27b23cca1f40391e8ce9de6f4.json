{"ast":null,"code":"import _asyncToGenerator from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n/**\n *  The JSON Wallet formats allow a simple way to store the private\n *  keys needed in Ethereum along with related information and allows\n *  for extensible forms of encryption.\n *\n *  These utilities facilitate decrypting and encrypting the most common\n *  JSON Wallet formats.\n *\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\nimport { CTR } from \"aes-js\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256, pbkdf2, randomBytes, scrypt, scryptSync } from \"../crypto/index.js\";\nimport { computeAddress } from \"../transaction/index.js\";\nimport { concat, getBytes, hexlify, uuidV4, assert, assertArgument } from \"../utils/index.js\";\nimport { getPassword, spelunk, zpad } from \"./utils.js\";\nimport { version } from \"../_version.js\";\nvar defaultPath = \"m/44'/60'/0'/0/0\";\n/**\n *  Returns true if %%json%% is a valid JSON Keystore Wallet.\n */\nexport function isKeystoreJson(json) {\n  try {\n    var data = JSON.parse(json);\n    var _version = data.version != null ? parseInt(data.version) : 0;\n    if (_version === 3) {\n      return true;\n    }\n  } catch (error) {}\n  return false;\n}\nfunction decrypt(data, key, ciphertext) {\n  var cipher = spelunk(data, \"crypto.cipher:string\");\n  if (cipher === \"aes-128-ctr\") {\n    var iv = spelunk(data, \"crypto.cipherparams.iv:data!\");\n    var aesCtr = new CTR(key, iv);\n    return hexlify(aesCtr.decrypt(ciphertext));\n  }\n  assert(false, \"unsupported cipher\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"decrypt\"\n  });\n}\nfunction getAccount(data, _key) {\n  var key = getBytes(_key);\n  var ciphertext = spelunk(data, \"crypto.ciphertext:data!\");\n  var computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);\n  assertArgument(computedMAC === spelunk(data, \"crypto.mac:string!\").toLowerCase(), \"incorrect password\", \"password\", \"[ REDACTED ]\");\n  var privateKey = decrypt(data, key.slice(0, 16), ciphertext);\n  var address = computeAddress(privateKey);\n  if (data.address) {\n    var check = data.address.toLowerCase();\n    if (!check.startsWith(\"0x\")) {\n      check = \"0x\" + check;\n    }\n    assertArgument(getAddress(check) === address, \"keystore address/privateKey mismatch\", \"address\", data.address);\n  }\n  var account = {\n    address: address,\n    privateKey: privateKey\n  };\n  // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n  var version = spelunk(data, \"x-ethers.version:string\");\n  if (version === \"0.1\") {\n    var mnemonicKey = key.slice(32, 64);\n    var mnemonicCiphertext = spelunk(data, \"x-ethers.mnemonicCiphertext:data!\");\n    var mnemonicIv = spelunk(data, \"x-ethers.mnemonicCounter:data!\");\n    var mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n    account.mnemonic = {\n      path: spelunk(data, \"x-ethers.path:string\") || defaultPath,\n      locale: spelunk(data, \"x-ethers.locale:string\") || \"en\",\n      entropy: hexlify(getBytes(mnemonicAesCtr.decrypt(mnemonicCiphertext)))\n    };\n  }\n  return account;\n}\nfunction getDecryptKdfParams(data) {\n  var kdf = spelunk(data, \"crypto.kdf:string\");\n  if (kdf && typeof kdf === \"string\") {\n    if (kdf.toLowerCase() === \"scrypt\") {\n      var salt = spelunk(data, \"crypto.kdfparams.salt:data!\");\n      var N = spelunk(data, \"crypto.kdfparams.n:int!\");\n      var r = spelunk(data, \"crypto.kdfparams.r:int!\");\n      var p = spelunk(data, \"crypto.kdfparams.p:int!\");\n      // Make sure N is a power of 2\n      assertArgument(N > 0 && (N & N - 1) === 0, \"invalid kdf.N\", \"kdf.N\", N);\n      assertArgument(r > 0 && p > 0, \"invalid kdf\", \"kdf\", kdf);\n      var dkLen = spelunk(data, \"crypto.kdfparams.dklen:int!\");\n      assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dflen\", dkLen);\n      return {\n        name: \"scrypt\",\n        salt: salt,\n        N: N,\n        r: r,\n        p: p,\n        dkLen: 64\n      };\n    } else if (kdf.toLowerCase() === \"pbkdf2\") {\n      var _salt = spelunk(data, \"crypto.kdfparams.salt:data!\");\n      var prf = spelunk(data, \"crypto.kdfparams.prf:string!\");\n      var algorithm = prf.split(\"-\").pop();\n      assertArgument(algorithm === \"sha256\" || algorithm === \"sha512\", \"invalid kdf.pdf\", \"kdf.pdf\", prf);\n      var count = spelunk(data, \"crypto.kdfparams.c:int!\");\n      var _dkLen = spelunk(data, \"crypto.kdfparams.dklen:int!\");\n      assertArgument(_dkLen === 32, \"invalid kdf.dklen\", \"kdf.dklen\", _dkLen);\n      return {\n        name: \"pbkdf2\",\n        salt: _salt,\n        count: count,\n        dkLen: _dkLen,\n        algorithm: algorithm\n      };\n    }\n  }\n  assertArgument(false, \"unsupported key-derivation function\", \"kdf\", kdf);\n}\n/**\n *  Returns the account details for the JSON Keystore Wallet %%json%%\n *  using %%password%%.\n *\n *  It is preferred to use the [async version](decryptKeystoreJson)\n *  instead, which allows a [[ProgressCallback]] to keep the user informed\n *  as to the decryption status.\n *\n *  This method will block the event loop (freezing all UI) until decryption\n *  is complete, which can take quite some time, depending on the wallet\n *  paramters and platform.\n */\nexport function decryptKeystoreJsonSync(json, _password) {\n  var data = JSON.parse(json);\n  var password = getPassword(_password);\n  var params = getDecryptKdfParams(data);\n  if (params.name === \"pbkdf2\") {\n    var _salt2 = params.salt,\n      count = params.count,\n      _dkLen2 = params.dkLen,\n      algorithm = params.algorithm;\n    var _key2 = pbkdf2(password, _salt2, count, _dkLen2, algorithm);\n    return getAccount(data, _key2);\n  }\n  assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", {\n    params: params\n  });\n  var salt = params.salt,\n    N = params.N,\n    r = params.r,\n    p = params.p,\n    dkLen = params.dkLen;\n  var key = scryptSync(password, salt, N, r, p, dkLen);\n  return getAccount(data, key);\n}\nfunction stall(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      resolve();\n    }, duration);\n  });\n}\n/**\n *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the\n *  %%password%%.\n *\n *  If provided, %%progress%% will be called periodically during the\n *  decrpytion to provide feedback, and if the function returns\n *  ``false`` will halt decryption.\n *\n *  The %%progressCallback%% will **always** receive ``0`` before\n *  decryption begins and ``1`` when complete.\n */\nexport function decryptKeystoreJson(_x, _x2, _x3) {\n  return _decryptKeystoreJson.apply(this, arguments);\n}\nfunction _decryptKeystoreJson() {\n  _decryptKeystoreJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(json, _password, progress) {\n    var data, password, params, _salt3, count, _dkLen3, algorithm, _key3, salt, N, r, p, dkLen, key;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          data = JSON.parse(json);\n          password = getPassword(_password);\n          params = getDecryptKdfParams(data);\n          if (!(params.name === \"pbkdf2\")) {\n            _context.next = 15;\n            break;\n          }\n          if (!progress) {\n            _context.next = 8;\n            break;\n          }\n          progress(0);\n          _context.next = 8;\n          return stall(0);\n        case 8:\n          _salt3 = params.salt, count = params.count, _dkLen3 = params.dkLen, algorithm = params.algorithm;\n          _key3 = pbkdf2(password, _salt3, count, _dkLen3, algorithm);\n          if (!progress) {\n            _context.next = 14;\n            break;\n          }\n          progress(1);\n          _context.next = 14;\n          return stall(0);\n        case 14:\n          return _context.abrupt(\"return\", getAccount(data, _key3));\n        case 15:\n          assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", {\n            params: params\n          });\n          salt = params.salt, N = params.N, r = params.r, p = params.p, dkLen = params.dkLen;\n          _context.next = 19;\n          return scrypt(password, salt, N, r, p, dkLen, progress);\n        case 19:\n          key = _context.sent;\n          return _context.abrupt(\"return\", getAccount(data, key));\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _decryptKeystoreJson.apply(this, arguments);\n}\nfunction getEncryptKdfParams(options) {\n  // Check/generate the salt\n  var salt = options.salt != null ? getBytes(options.salt, \"options.salt\") : randomBytes(32);\n  // Override the scrypt password-based key derivation function parameters\n  var N = 1 << 17,\n    r = 8,\n    p = 1;\n  if (options.scrypt) {\n    if (options.scrypt.N) {\n      N = options.scrypt.N;\n    }\n    if (options.scrypt.r) {\n      r = options.scrypt.r;\n    }\n    if (options.scrypt.p) {\n      p = options.scrypt.p;\n    }\n  }\n  assertArgument(typeof N === \"number\" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), \"invalid scrypt N parameter\", \"options.N\", N);\n  assertArgument(typeof r === \"number\" && r > 0 && Number.isSafeInteger(r), \"invalid scrypt r parameter\", \"options.r\", r);\n  assertArgument(typeof p === \"number\" && p > 0 && Number.isSafeInteger(p), \"invalid scrypt p parameter\", \"options.p\", p);\n  return {\n    name: \"scrypt\",\n    dkLen: 32,\n    salt: salt,\n    N: N,\n    r: r,\n    p: p\n  };\n}\nfunction _encryptKeystore(key, kdf, account, options) {\n  var privateKey = getBytes(account.privateKey, \"privateKey\");\n  // Override initialization vector\n  var iv = options.iv != null ? getBytes(options.iv, \"options.iv\") : randomBytes(16);\n  assertArgument(iv.length === 16, \"invalid options.iv length\", \"options.iv\", options.iv);\n  // Override the uuid\n  var uuidRandom = options.uuid != null ? getBytes(options.uuid, \"options.uuid\") : randomBytes(16);\n  assertArgument(uuidRandom.length === 16, \"invalid options.uuid length\", \"options.uuid\", options.iv);\n  // This will be used to encrypt the wallet (as per Web3 secret storage)\n  // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n  // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n  var derivedKey = key.slice(0, 16);\n  var macPrefix = key.slice(16, 32);\n  // Encrypt the private key\n  var aesCtr = new CTR(derivedKey, iv);\n  var ciphertext = getBytes(aesCtr.encrypt(privateKey));\n  // Compute the message authentication code, used to check the password\n  var mac = keccak256(concat([macPrefix, ciphertext]));\n  // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n  var data = {\n    address: account.address.substring(2).toLowerCase(),\n    id: uuidV4(uuidRandom),\n    version: 3,\n    Crypto: {\n      cipher: \"aes-128-ctr\",\n      cipherparams: {\n        iv: hexlify(iv).substring(2)\n      },\n      ciphertext: hexlify(ciphertext).substring(2),\n      kdf: \"scrypt\",\n      kdfparams: {\n        salt: hexlify(kdf.salt).substring(2),\n        n: kdf.N,\n        dklen: 32,\n        p: kdf.p,\n        r: kdf.r\n      },\n      mac: mac.substring(2)\n    }\n  };\n  // If we have a mnemonic, encrypt it into the JSON wallet\n  if (account.mnemonic) {\n    var client = options.client != null ? options.client : \"ethers/\".concat(version);\n    var path = account.mnemonic.path || defaultPath;\n    var locale = account.mnemonic.locale || \"en\";\n    var mnemonicKey = key.slice(32, 64);\n    var entropy = getBytes(account.mnemonic.entropy, \"account.mnemonic.entropy\");\n    var mnemonicIv = randomBytes(16);\n    var mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n    var mnemonicCiphertext = getBytes(mnemonicAesCtr.encrypt(entropy));\n    var now = new Date();\n    var timestamp = now.getUTCFullYear() + \"-\" + zpad(now.getUTCMonth() + 1, 2) + \"-\" + zpad(now.getUTCDate(), 2) + \"T\" + zpad(now.getUTCHours(), 2) + \"-\" + zpad(now.getUTCMinutes(), 2) + \"-\" + zpad(now.getUTCSeconds(), 2) + \".0Z\";\n    var gethFilename = \"UTC--\" + timestamp + \"--\" + data.address;\n    data[\"x-ethers\"] = {\n      client: client,\n      gethFilename: gethFilename,\n      path: path,\n      locale: locale,\n      mnemonicCounter: hexlify(mnemonicIv).substring(2),\n      mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n      version: \"0.1\"\n    };\n  }\n  return JSON.stringify(data);\n}\n/**\n *  Return the JSON Keystore Wallet for %%account%% encrypted with\n *  %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used. Any provided [[ProgressCallback]] is ignord.\n */\nexport function encryptKeystoreJsonSync(account, password, options) {\n  if (options == null) {\n    options = {};\n  }\n  var passwordBytes = getPassword(password);\n  var kdf = getEncryptKdfParams(options);\n  var key = scryptSync(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);\n  return _encryptKeystore(getBytes(key), kdf, account, options);\n}\n/**\n *  Resolved to the JSON Keystore Wallet for %%account%% encrypted\n *  with %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used and provide a [[ProgressCallback]] to receive periodic updates\n *  on the completion status..\n */\nexport function encryptKeystoreJson(_x4, _x5, _x6) {\n  return _encryptKeystoreJson.apply(this, arguments);\n}\nfunction _encryptKeystoreJson() {\n  _encryptKeystoreJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(account, password, options) {\n    var passwordBytes, kdf, key;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (options == null) {\n            options = {};\n          }\n          passwordBytes = getPassword(password);\n          kdf = getEncryptKdfParams(options);\n          _context2.next = 5;\n          return scrypt(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);\n        case 5:\n          key = _context2.sent;\n          return _context2.abrupt(\"return\", _encryptKeystore(getBytes(key), kdf, account, options));\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _encryptKeystoreJson.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}