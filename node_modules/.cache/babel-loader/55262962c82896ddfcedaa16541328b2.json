{"ast":null,"code":"import React__default, { useEffect } from 'react';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction useOnMount(callback) {\n  useEffect(callback, []);\n}\nfunction useSound(src, _ref) {\n  if (_ref === void 0) {\n    _ref = {};\n  }\n  var _ref2 = _ref,\n    _ref2$volume = _ref2.volume,\n    volume = _ref2$volume === void 0 ? 1 : _ref2$volume,\n    _ref2$playbackRate = _ref2.playbackRate,\n    playbackRate = _ref2$playbackRate === void 0 ? 1 : _ref2$playbackRate,\n    _ref2$soundEnabled = _ref2.soundEnabled,\n    soundEnabled = _ref2$soundEnabled === void 0 ? true : _ref2$soundEnabled,\n    _ref2$interrupt = _ref2.interrupt,\n    interrupt = _ref2$interrupt === void 0 ? false : _ref2$interrupt,\n    onload = _ref2.onload,\n    delegated = _objectWithoutPropertiesLoose(_ref2, [\"id\", \"volume\", \"playbackRate\", \"soundEnabled\", \"interrupt\", \"onload\"]);\n  var HowlConstructor = React__default.useRef(null);\n  var isMounted = React__default.useRef(false);\n  var _React$useState = React__default.useState(null),\n    duration = _React$useState[0],\n    setDuration = _React$useState[1];\n  var _React$useState2 = React__default.useState(null),\n    sound = _React$useState2[0],\n    setSound = _React$useState2[1];\n  var handleLoad = function handleLoad() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    } // @ts-ignore\n\n    setSound(this);\n  }; // We want to lazy-load Howler, since sounds can't play on load anyway.\n\n  useOnMount(function () {\n    import('howler').then(function (mod) {\n      if (!isMounted.current) {\n        var _mod$Howl;\n\n        // Depending on the module system used, `mod` might hold\n        // the export directly, or it might be under `default`.\n        HowlConstructor.current = (_mod$Howl = mod.Howl) !== null && _mod$Howl !== void 0 ? _mod$Howl : mod[\"default\"].Howl;\n        isMounted.current = true;\n        new HowlConstructor.current(_extends({\n          src: Array.isArray(src) ? src : [src],\n          volume: volume,\n          rate: playbackRate,\n          onload: handleLoad\n        }, delegated));\n      }\n    });\n    return function () {\n      isMounted.current = false;\n    };\n  }); // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n\n  React__default.useEffect(function () {\n    if (HowlConstructor.current && sound) {\n      setSound(new HowlConstructor.current(_extends({\n        src: Array.isArray(src) ? src : [src],\n        volume: volume,\n        onload: handleLoad\n      }, delegated)));\n    } // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(src)]); // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n\n  React__default.useEffect(function () {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    } // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n  var play = React__default.useCallback(function (options) {\n    if (typeof options === 'undefined') {\n      options = {};\n    }\n    if (!sound || !soundEnabled && !options.forceSoundEnabled) {\n      return;\n    }\n    if (interrupt) {\n      sound.stop();\n    }\n    if (options.playbackRate) {\n      sound.rate(options.playbackRate);\n    }\n    sound.play(options.id);\n  }, [sound, soundEnabled, interrupt]);\n  var stop = React__default.useCallback(function (id) {\n    if (!sound) {\n      return;\n    }\n    sound.stop(id);\n  }, [sound]);\n  var pause = React__default.useCallback(function (id) {\n    if (!sound) {\n      return;\n    }\n    sound.pause(id);\n  }, [sound]);\n  var returnedValue = [play, {\n    sound: sound,\n    stop: stop,\n    pause: pause,\n    duration: duration\n  }];\n  return returnedValue;\n}\nexport default useSound;\nexport { useSound };","map":null,"metadata":{},"sourceType":"module"}