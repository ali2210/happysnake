{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar assert = require('assert');\nvar From = require('../node/from');\nvar Select = require('../node/select');\nvar Table = require('../table');\nvar Postgres = function (config) {\n  this.output = [];\n  this.params = [];\n  this.config = config || {};\n};\nPostgres.prototype._myClass = Postgres;\nPostgres.prototype._arrayAggFunctionName = 'array_agg';\nPostgres.prototype._getParameterText = function (index, value) {\n  if (this._disableParameterPlaceholders) {\n    // do not use placeholder\n    return this._getParameterValue(value);\n  } else {\n    // use placeholder\n    return this._getParameterPlaceholder(index, value);\n  }\n};\nPostgres.prototype._getParameterValue = function (value, quoteChar) {\n  // handle primitives\n  if (null === value) {\n    value = 'NULL';\n  } else if ('boolean' === typeof value) {\n    value = value ? 'TRUE' : 'FALSE';\n  } else if ('number' === typeof value) {\n    // number is just number\n    value = value;\n  } else if ('string' === typeof value) {\n    // string uses single quote by default\n    value = this.quote(value, quoteChar || \"'\");\n  } else if ('object' === typeof value) {\n    if (Array.isArray(value)) {\n      if (this._myClass === Postgres) {\n        // naive check to see if this is an array of objects, which\n        // is handled differently than an array of primitives\n        if (value.length && 'object' === typeof value[0] && !_.isFunction(value[0].toISOString) && !Array.isArray(value[0])) {\n          value = \"'\" + JSON.stringify(value) + \"'\";\n        } else {\n          var self = this;\n          value = value.map(function (item) {\n            // In a Postgres array, strings must be double-quoted\n            return self._getParameterValue(item, '\"');\n          });\n          value = '\\'{' + value.join(',') + '}\\'';\n        }\n      } else {\n        value = _.map(value, this._getParameterValue.bind(this));\n        value = '(' + value.join(', ') + ')';\n      }\n    } else if (value instanceof Date) {\n      // Date object's default toString format does not get parsed well\n      // Handle dates using toISOString\n      value = this._getParameterValue(value.toISOString());\n    } else if (Buffer.isBuffer(value)) {\n      value = this._getParameterValue('\\\\x' + value.toString('hex'));\n    } else {\n      // rich object represent with string\n      var strValue = value.toString();\n      value = strValue === '[object Object]' ? this._getParameterValue(JSON.stringify(value)) : this._getParameterValue(strValue);\n    }\n  } else {\n    throw new Error('Unable to use ' + value + ' in query');\n  }\n\n  // value has been converted at this point\n  return value;\n};\nPostgres.prototype._getParameterPlaceholder = function (index, value) {\n  /* jshint unused: false */\n  return '$' + index;\n};\nPostgres.prototype.getQuery = function (queryNode) {\n  // passed in a table, not a query\n  if (queryNode instanceof Table) {\n    queryNode = queryNode.select(queryNode.star());\n  }\n  this.output = this.visit(queryNode);\n\n  //if is a create view, must replace paramaters with values\n  if (this.output.indexOf('CREATE VIEW') > -1) {\n    var previousFlagStatus = this._disableParameterPlaceholders;\n    this._disableParameterPlaceholders = true;\n    this.output = [];\n    this.output = this.visit(queryNode);\n    this.params = [];\n    this._disableParameterPlaceholders = previousFlagStatus;\n  }\n\n  // create the query object\n  var query = {\n    text: this.output.join(' '),\n    values: this.params\n  };\n\n  // reset the internal state of this builder\n  this.output = [];\n  this.params = [];\n  return query;\n};\nPostgres.prototype.getString = function (queryNode) {\n  // switch off parameter placeholders\n  var previousFlagStatus = this._disableParameterPlaceholders;\n  this._disableParameterPlaceholders = true;\n  var query;\n  try {\n    // use the same code path for query building\n    query = this.getQuery(queryNode);\n  } finally {\n    // always restore the flag afterwards\n    this._disableParameterPlaceholders = previousFlagStatus;\n  }\n  return query.text;\n};\nPostgres.prototype.visit = function (node) {\n  switch (node.type) {\n    case 'QUERY':\n      return this.visitQuery(node);\n    case 'SUBQUERY':\n      return this.visitSubquery(node);\n    case 'SELECT':\n      return this.visitSelect(node);\n    case 'INSERT':\n      return this.visitInsert(node);\n    case 'REPLACE':\n      return this.visitReplace(node);\n    case 'UPDATE':\n      return this.visitUpdate(node);\n    case 'DELETE':\n      return this.visitDelete(node);\n    case 'CREATE':\n      return this.visitCreate(node);\n    case 'DROP':\n      return this.visitDrop(node);\n    case 'TRUNCATE':\n      return this.visitTruncate(node);\n    case 'DISTINCT':\n      return this.visitDistinct(node);\n    case 'DISTINCT ON':\n      return this.visitDistinctOn(node);\n    case 'ALIAS':\n      return this.visitAlias(node);\n    case 'ALTER':\n      return this.visitAlter(node);\n    case 'CAST':\n      return this.visitCast(node);\n    case 'FROM':\n      return this.visitFrom(node);\n    case 'WHERE':\n      return this.visitWhere(node);\n    case 'ORDER BY':\n      return this.visitOrderBy(node);\n    case 'ORDER BY VALUE':\n      return this.visitOrderByValue(node);\n    case 'GROUP BY':\n      return this.visitGroupBy(node);\n    case 'HAVING':\n      return this.visitHaving(node);\n    case 'RETURNING':\n      return this.visitReturning(node);\n    case 'ONDUPLICATE':\n      return this.visitOnDuplicate(node);\n    case 'ONCONFLICT':\n      return this.visitOnConflict(node);\n    case 'FOR UPDATE':\n      return this.visitForUpdate();\n    case 'FOR SHARE':\n      return this.visitForShare();\n    case 'TABLE':\n      return this.visitTable(node);\n    case 'COLUMN':\n      return this.visitColumn(node);\n    case 'FOREIGN KEY':\n      return this.visitForeignKey(node);\n    case 'JOIN':\n      return this.visitJoin(node);\n    case 'LITERAL':\n      return this.visitLiteral(node);\n    case 'TEXT':\n      return node.text;\n    case 'PARAMETER':\n      return this.visitParameter(node);\n    case 'DEFAULT':\n      return this.visitDefault(node);\n    case 'IF EXISTS':\n      return this.visitIfExists();\n    case 'IF NOT EXISTS':\n      return this.visitIfNotExists();\n    case 'OR IGNORE':\n      return this.visitOrIgnore();\n    case 'CASCADE':\n      return this.visitCascade();\n    case 'RESTRICT':\n      return this.visitRestrict();\n    case 'RENAME':\n      return this.visitRename(node);\n    case 'ADD COLUMN':\n      return this.visitAddColumn(node);\n    case 'DROP COLUMN':\n      return this.visitDropColumn(node);\n    case 'RENAME COLUMN':\n      return this.visitRenameColumn(node);\n    case 'INDEXES':\n      return this.visitIndexes(node);\n    case 'CREATE INDEX':\n      return this.visitCreateIndex(node);\n    case 'DROP INDEX':\n      return this.visitDropIndex(node);\n    case 'FUNCTION CALL':\n      return this.visitFunctionCall(node);\n    case 'ARRAY CALL':\n      return this.visitArrayCall(node);\n    case 'CREATE VIEW':\n      return this.visitCreateView(node);\n    case 'INTERVAL':\n      return this.visitInterval(node);\n    case 'POSTFIX UNARY':\n      return this.visitPostfixUnary(node);\n    case 'PREFIX UNARY':\n      return this.visitPrefixUnary(node);\n    case 'BINARY':\n      return this.visitBinary(node);\n    case 'TERNARY':\n      return this.visitTernary(node);\n    case 'IN':\n      return this.visitIn(node);\n    case 'NOT IN':\n      return this.visitNotIn(node);\n    case 'CASE':\n      return this.visitCase(node);\n    case 'AT':\n      return this.visitAt(node);\n    case 'SLICE':\n      return this.visitSlice(node);\n    case 'LIMIT':\n    case 'OFFSET':\n      return this.visitModifier(node);\n    default:\n      throw new Error(\"Unrecognized node type \" + node.type);\n  }\n};\nPostgres.prototype._quoteCharacter = '\"';\nPostgres.prototype._aliasText = ' AS ';\nPostgres.prototype.quote = function (word, quoteCharacter) {\n  var q;\n  if (quoteCharacter) {\n    // use the specified quote character if given\n    q = quoteCharacter;\n  } else {\n    q = this._quoteCharacter;\n  }\n  // handle square brackets specially\n  if (q == '[') {\n    return '[' + word + ']';\n  } else {\n    return q + word.replace(new RegExp(q, 'g'), q + q) + q;\n  }\n};\nPostgres.prototype.visitSelect = function (select) {\n  var result = ['SELECT'];\n  if (select.isDistinct) result.push('DISTINCT');\n  var distinctOnNode = select.nodes.filter(function (node) {\n    return node.type === 'DISTINCT ON';\n  }).shift();\n  var nonDistinctOnNodes = select.nodes.filter(function (node) {\n    return node.type !== 'DISTINCT ON';\n  });\n  if (distinctOnNode) {\n    result.push(this.visit(distinctOnNode));\n  }\n  result.push(nonDistinctOnNodes.map(this.visit.bind(this)).join(', '));\n  this._selectOrDeleteEndIndex = this.output.length + result.length;\n  return result;\n};\nPostgres.prototype.visitInsert = function (insert) {\n  var self = this;\n  // don't use table.column for inserts\n  this._visitedInsert = true;\n  var result = ['INSERT'];\n  result = result.concat(insert.nodes.map(this.visit.bind(this)));\n  result.push('INTO ' + this.visit(this._queryNode.table.toNode()));\n  result.push('(' + insert.columns.map(this.visit.bind(this)).join(', ') + ')');\n  var paramNodes = insert.getParameters();\n  if (paramNodes.length > 0) {\n    var paramText = paramNodes.map(function (paramSet) {\n      return paramSet.map(function (param) {\n        return self.visit(param);\n      }).join(', ');\n    }).map(function (param) {\n      return '(' + param + ')';\n    }).join(', ');\n    result.push('VALUES', paramText);\n    if (result.slice(2, 5).join(' ') === '() VALUES ()') {\n      result.splice(2, 3, 'DEFAULT VALUES');\n    }\n  }\n  this._visitedInsert = false;\n  return result;\n};\nPostgres.prototype.visitReplace = function (replace) {\n  throw new Error('Postgres does not support REPLACE.');\n};\nPostgres.prototype.visitUpdate = function (update) {\n  // don't auto-generate from clause\n  var params = [];\n  /* jshint boss: true */\n  for (var i = 0, node; node = update.nodes[i]; i++) {\n    this._visitingUpdateTargetColumn = true;\n    var target_col = this.visit(node);\n    this._visitingUpdateTargetColumn = false;\n    params = params.concat(target_col + ' = ' + this.visit(node.value));\n  }\n  var result = ['UPDATE', this.visit(this._queryNode.table.toNode()), 'SET', params.join(', ')];\n  return result;\n};\nPostgres.prototype.visitDelete = function (del) {\n  var result = ['DELETE'];\n  if (del.nodes.length) {\n    result.push(del.nodes.map(this.visit.bind(this)).join(', '));\n  }\n  this._selectOrDeleteEndIndex = result.length;\n  return result;\n};\nPostgres.prototype.visitCreate = function (create) {\n  this._visitingCreate = true;\n  // don't auto-generate from clause\n  var table = this._queryNode.table;\n  var col_nodes = table.columns.map(function (col) {\n    return col.toNode();\n  });\n  var foreign_key_nodes = table.foreignKeys;\n  var result = ['CREATE TABLE'];\n  if (create.options.isTemporary) result = ['CREATE TEMPORARY TABLE'];\n  result = result.concat(create.nodes.map(this.visit.bind(this)));\n  result.push(this.visit(table.toNode()));\n  var primary_col_nodes = col_nodes.filter(function (n) {\n    return n.primaryKey;\n  });\n  this._visitCreateCompoundPrimaryKey = primary_col_nodes.length > 1;\n  var colspec = '(' + col_nodes.map(this.visit.bind(this)).join(', ');\n  if (this._visitCreateCompoundPrimaryKey) {\n    colspec += ', PRIMARY KEY (';\n    colspec += primary_col_nodes.map(function (node) {\n      return this.quote(node.name);\n    }.bind(this)).join(', ');\n    colspec += ')';\n  }\n  if (foreign_key_nodes.length > 0) {\n    colspec += ', ' + foreign_key_nodes.map(this.visit.bind(this)).join(', ');\n  }\n  colspec += ')';\n  result.push(colspec);\n  this._visitCreateCompoundPrimaryKey = false;\n  this._visitingCreate = false;\n  return result;\n};\nPostgres.prototype.visitDrop = function (drop) {\n  // don't auto-generate from clause\n  var result = ['DROP TABLE'];\n  result = result.concat(drop.nodes.map(this.visit.bind(this)));\n  return result;\n};\nPostgres.prototype.visitTruncate = function (truncate) {\n  var result = ['TRUNCATE TABLE'];\n  result = result.concat(truncate.nodes.map(this.visit.bind(this)));\n  return result;\n};\nPostgres.prototype.visitDistinct = function (truncate) {\n  // Nothing to do here since it's handled in the SELECT clause\n  return [];\n};\nPostgres.prototype.visitDistinctOn = function (distinctOn) {\n  return ['DISTINCT ON(' + distinctOn.nodes.map(this.visit.bind(this)).join(', ') + ')'];\n};\nPostgres.prototype.visitAlias = function (alias) {\n  var result = [this.visit(alias.value) + this._aliasText + this.quote(alias.alias)];\n  return result;\n};\nPostgres.prototype.visitAlter = function (alter) {\n  this._visitingAlter = true;\n  // don't auto-generate from clause\n  var table = this._queryNode.table;\n  var result = ['ALTER TABLE', this.visit(table.toNode()), alter.nodes.map(this.visit.bind(this)).join(', ')];\n  this._visitingAlter = false;\n  return result;\n};\nPostgres.prototype.visitCast = function (cast) {\n  this._visitingCast = true;\n  var result = ['CAST(' + this.visit(cast.value) + ' AS ' + cast.dataType + ')'];\n  this._visitingCast = false;\n  return result;\n};\nPostgres.prototype.visitFrom = function (from) {\n  var result = [];\n  if (from.skipFromStatement) {\n    result.push(',');\n  } else {\n    result.push('FROM');\n  }\n  for (var i = 0; i < from.nodes.length; i++) {\n    result = result.concat(this.visit(from.nodes[i]));\n  }\n  return result;\n};\nPostgres.prototype.visitWhere = function (where) {\n  this._visitingWhere = true;\n  var result = ['WHERE', where.nodes.map(this.visit.bind(this)).join(', ')];\n  this._visitingWhere = false;\n  return result;\n};\nPostgres.prototype.visitOrderBy = function (orderBy) {\n  var result = ['ORDER BY', orderBy.nodes.map(this.visit.bind(this)).join(', ')];\n  if (this._myClass === Postgres && this.config.nullOrder) {\n    result.push('NULLS ' + this.config.nullOrder.toUpperCase());\n  }\n  return result;\n};\nPostgres.prototype.visitOrderByValue = function (orderByValue) {\n  var text = this.visit(orderByValue.value);\n  if (orderByValue.direction) {\n    text += ' ' + this.visit(orderByValue.direction);\n  }\n  return [text];\n};\nPostgres.prototype.visitGroupBy = function (groupBy) {\n  var result = ['GROUP BY', groupBy.nodes.map(this.visit.bind(this)).join(', ')];\n  return result;\n};\nPostgres.prototype.visitHaving = function (having) {\n  var result = ['HAVING', having.nodes.map(this.visit.bind(this)).join(' AND ')];\n  return result;\n};\nPostgres.prototype.visitPrefixUnary = function (unary) {\n  var text = '(' + unary.operator + ' ' + this.visit(unary.left) + ')';\n  return [text];\n};\nPostgres.prototype.visitPostfixUnary = function (unary) {\n  var text = '(' + this.visit(unary.left) + ' ' + unary.operator + ')';\n  return [text];\n};\nPostgres.prototype.visitBinary = function (binary) {\n  var self = this;\n  binary.left.property = binary.left.name;\n  binary.right.property = binary.right.name;\n  var text = '(' + this.visit(binary.left) + ' ' + binary.operator + ' ';\n  if (Array.isArray(binary.right)) {\n    text += '(' + binary.right.map(function (node) {\n      return self.visit(node);\n    }).join(', ') + ')';\n  } else {\n    text += this.visit(binary.right);\n  }\n  text += ')';\n  return [text];\n};\nPostgres.prototype.visitTernary = function (ternary) {\n  var self = this;\n  var text = '(' + this.visit(ternary.left) + ' ' + ternary.operator + ' ';\n  var visitPart = function (value) {\n    var text = '';\n    if (Array.isArray(value)) {\n      text += '(' + value.map(function (node) {\n        return self.visit(node);\n      }).join(', ') + ')';\n    } else {\n      text += self.visit(value);\n    }\n    return text;\n  };\n  text += visitPart(ternary.middle);\n  text += ' ' + ternary.separator + ' ';\n  text += visitPart(ternary.right);\n  text += ')';\n  return [text];\n};\nPostgres.prototype.visitIn = function (binary) {\n  var self = this;\n  var text = '(';\n  if (Array.isArray(binary.right)) {\n    if (binary.right.length) {\n      var params = [];\n      var hasNull = false;\n      binary.right.forEach(function (node) {\n        if (node.type === 'PARAMETER' && node._val === null) {\n          hasNull = true;\n        } else {\n          params.push(self.visit(node));\n        }\n      });\n      if (params.length) {\n        text += this.visit(binary.left) + ' IN (' + params.join(', ') + ')';\n        if (hasNull) {\n          text += ' OR ' + this.visit(binary.left) + ' IS NULL';\n        }\n      } else {\n        // implicitely has null\n        text += this.visit(binary.left) + ' IS NULL';\n      }\n    } else {\n      text += '1=0';\n    }\n  } else {\n    text += this.visit(binary.left) + ' IN ' + this.visit(binary.right);\n  }\n  text += ')';\n  return [text];\n};\nPostgres.prototype.visitNotIn = function (binary) {\n  var self = this;\n  var text = '(';\n  if (Array.isArray(binary.right)) {\n    if (binary.right.length) {\n      var params = [];\n      var hasNull = false;\n      binary.right.forEach(function (node) {\n        if (node.type === 'PARAMETER' && node._val === null) {\n          hasNull = true;\n        } else {\n          params.push(self.visit(node));\n        }\n      });\n      if (params.length && hasNull) {\n        text += 'NOT (';\n        text += this.visit(binary.left) + ' IN (' + params.join(', ') + ')';\n        text += ' OR ' + this.visit(binary.left) + ' IS NULL';\n        text += ')';\n      } else if (params.length) {\n        text += this.visit(binary.left) + ' NOT IN (' + params.join(', ') + ')';\n      } else {\n        // implicitely has null\n        text += this.visit(binary.left) + ' IS NOT NULL';\n      }\n    } else {\n      text += '1=1';\n    }\n  } else {\n    text += this.visit(binary.left) + ' NOT IN ' + this.visit(binary.right);\n  }\n  text += ')';\n  return [text];\n};\nPostgres.prototype.visitCase = function (caseExp) {\n  assert(caseExp.whenList.length == caseExp.thenList.length);\n  var self = this;\n  var text = '(CASE';\n  this.visitingCase = true;\n  for (var i = 0; i < caseExp.whenList.length; i++) {\n    var whenExp = ' WHEN ' + this.visit(caseExp.whenList[i]);\n    var thenExp = ' THEN ' + this.visit(caseExp.thenList[i]);\n    text += whenExp + thenExp;\n  }\n  if (null !== caseExp.else && undefined !== caseExp.else) {\n    text += ' ELSE ' + this.visit(caseExp.else);\n  }\n  this.visitingCase = false;\n  text += ' END)';\n  return [text];\n};\nPostgres.prototype.visitAt = function (at) {\n  var text = '(' + this.visit(at.value) + ')[' + this.visit(at.index) + ']';\n  return [text];\n};\nPostgres.prototype.visitSlice = function (slice) {\n  var text = '(' + this.visit(slice.value) + ')';\n  text += '[' + this.visit(slice.start) + ':' + this.visit(slice.end) + ']';\n  return [text];\n};\nPostgres.prototype.visitContains = function (contains) {\n  var text = this.visit(contains.value);\n  text += ' @> ' + this.visit(contains.set);\n  return [text];\n};\nPostgres.prototype.visitContainedBy = function (containedBy) {\n  var text = this.visit(containedBy.value);\n  text += ' <@ ' + this.visit(containedBy.set);\n  return [text];\n};\nPostgres.prototype.visitOverlap = function (overlap) {\n  var text = this.visit(overlap.value);\n  text += ' && ' + this.visit(overlap.set);\n  return [text];\n};\nPostgres.prototype.visitQuery = function (queryNode) {\n  if (this._queryNode) return this.visitSubquery(queryNode, dontParenthesizeSubQuery(this._queryNode));\n  this._queryNode = queryNode;\n  // need to sort the top level query nodes on visitation priority\n  // so select/insert/update/delete comes before from comes before where\n  var missingFrom = true;\n  var hasFrom = false;\n  var createView;\n  var isSelect = false;\n  var actions = [];\n  var targets = [];\n  var filters = [];\n  for (var i = 0; i < queryNode.nodes.length; i++) {\n    var node = queryNode.nodes[i];\n    switch (node.type) {\n      case \"SELECT\":\n        isSelect = true;\n      // jshint ignore:line\n      case \"DELETE\":\n        actions.push(node);\n        break;\n      case \"INDEXES\":\n      case \"INSERT\":\n      case \"REPLACE\":\n      case \"UPDATE\":\n      case \"CREATE\":\n      case \"DROP\":\n      case \"TRUNCATE\":\n      case \"ALTER\":\n        actions.push(node);\n        missingFrom = false;\n        break;\n      case \"FROM\":\n        node.skipFromStatement = hasFrom;\n        hasFrom = true;\n        missingFrom = false;\n        targets.push(node);\n        break;\n      case \"CREATE VIEW\":\n        createView = node;\n        break;\n      default:\n        filters.push(node);\n        break;\n    }\n  }\n  if (!actions.length) {\n    // if no actions are given, guess it's a select\n    actions.push(new Select().add('*'));\n    isSelect = true;\n  }\n  if (missingFrom && queryNode.table instanceof Table) {\n    // the instanceof handles the situation where a sql.select(some expression) is used and there should be no FROM clause\n    targets.push(new From().add(queryNode.table));\n  }\n  if (createView) {\n    if (isSelect) {\n      actions.unshift(createView);\n    } else {\n      throw new Error('Create View requires a Select.');\n    }\n  }\n  return this.visitQueryHelper(actions, targets, filters);\n};\n\n/**\n * We separate out this part of query building so it can be overridden by other implementations.\n *\n * @param {Node[]} actions\n * @param {Node[]} targets\n * @param {Node[]} filters\n * @returns {String[]}\n */\nPostgres.prototype.visitQueryHelper = function (actions, targets, filters) {\n  this.handleDistinct(actions, filters);\n  // lazy-man sorting\n  var sortedNodes = actions.concat(targets).concat(filters);\n  for (var i = 0; i < sortedNodes.length; i++) {\n    var res = this.visit(sortedNodes[i]);\n    this.output = this.output.concat(res);\n  }\n  // implicit 'from'\n  return this.output;\n};\nPostgres.prototype.visitSubquery = function (queryNode, dontParenthesize) {\n  // create another query builder of the current class to build the subquery\n  var subQuery = new this._myClass(this.config);\n\n  // let the subquery modify this instance's params array\n  subQuery.params = this.params;\n\n  // pass on the disable parameter placeholder flag\n  var previousFlagStatus = subQuery._disableParameterPlaceholders;\n  subQuery._disableParameterPlaceholders = this._disableParameterPlaceholders;\n  try {\n    subQuery.visitQuery(queryNode);\n  } finally {\n    // restore the flag\n    subQuery._disableParameterPlaceholders = previousFlagStatus;\n  }\n  var alias = queryNode.alias;\n  if (dontParenthesize) {\n    return [subQuery.output.join(' ') + (alias ? ' ' + this.quote(alias) : '')];\n  }\n  return ['(' + subQuery.output.join(' ') + ')' + (alias ? ' ' + this.quote(alias) : '')];\n};\nPostgres.prototype.visitTable = function (tableNode) {\n  var table = tableNode.table;\n  var txt = \"\";\n  if (table.getSchema()) {\n    txt = this.quote(table.getSchema());\n    txt += '.';\n  }\n  txt += this.quote(table.getName());\n  if (typeof table.alias === 'string') {\n    txt += this._aliasText + this.quote(table.alias);\n  }\n  return [txt];\n};\nPostgres.prototype.visitColumn = function (columnNode) {\n  var table = columnNode.table;\n  var inInsertUpdateClause = this._visitedInsert || this._visitedReplace || this._visitingUpdateTargetColumn;\n  var inDdlClause = this._visitingAddColumn || this._visitingAlter || this._visitingCreate;\n  var inSelectClause = this.visitingReturning || !this._selectOrDeleteEndIndex && !this._visitingWhere // jshint ignore:line\n  && !inInsertUpdateClause // jshint ignore:line\n  && !inDdlClause // jshint ignore:line\n  && !this.visitingCase // jshint ignore:line\n  && !this._visitingJoin // jshint ignore:line\n  ;\n\n  var inFunctionCall = this._visitingFunctionCall;\n  var inCast = this._visitingCast;\n  var txt = [];\n  var closeParen = 0;\n  if (inSelectClause && (table && !table.alias || !!columnNode.alias)) {\n    if (columnNode.asArray) {\n      closeParen++;\n      txt.push(this._arrayAggFunctionName + '(');\n    }\n    if (!!columnNode.aggregator) {\n      closeParen++;\n      txt.push(columnNode.aggregator + '(');\n    }\n    if (columnNode.distinct === true) {\n      closeParen++;\n      txt.push('DISTINCT(');\n    }\n  }\n  if (!inInsertUpdateClause && !this.visitingReturning && !this._visitingCreate && !this._visitingAlter && !columnNode.subfieldContainer) {\n    if (table) {\n      if (typeof table.alias === 'string') {\n        txt.push(this.quote(table.alias));\n      } else {\n        if (table.getSchema()) {\n          txt.push(this.quote(table.getSchema()));\n          txt.push('.');\n        }\n        txt.push(this.quote(table.getName()));\n      }\n      txt.push('.');\n    }\n  }\n  if (columnNode.star) {\n    var allCols = [];\n    var hasAliases = false;\n    if (columnNode.aggregator !== 'COUNT') {\n      var tableName = txt.join('');\n      for (var i = 0; i < table.columns.length; ++i) {\n        var col = table.columns[i];\n        var aliased = col.name !== (col.alias || col.property);\n        hasAliases = hasAliases || aliased;\n        allCols.push(tableName + this.quote(col.name) + (aliased ? this._aliasText + this.quote(col.alias || col.property) : ''));\n      }\n    }\n    if (hasAliases) {\n      txt = [allCols.join(', ')];\n    } else {\n      txt.push('*');\n    }\n  } else if (columnNode.isConstant) {\n    // this injects directly into SELECT statement rather than creating a parameter\n    //   txt.push(this._getParameterValue(columnNode.literalValue))\n    // currently thinking it is better to generate a parameter\n    var value = columnNode.constantValue;\n    this.params.push(value);\n    txt.push(this._getParameterText(this.params.length, value));\n  } else {\n    if (columnNode.subfieldContainer) {\n      txt.push('(' + this.visitColumn(columnNode.subfieldContainer) + ').');\n    }\n    txt.push(this.quote(columnNode.name));\n  }\n  if (closeParen) {\n    for (var j = 0; j < closeParen; j++) {\n      txt.push(')');\n    }\n  }\n  if (inSelectClause && !inFunctionCall && !inCast && (columnNode.alias || columnNode.property !== columnNode.name)) {\n    txt.push(this._aliasText + this.quote(columnNode.alias || columnNode.property));\n  }\n  if (this._visitingCreate || this._visitingAddColumn) {\n    assert(columnNode.dataType, 'dataType missing for column ' + columnNode.name + ' (CREATE TABLE and ADD COLUMN statements require a dataType)');\n    txt.push(' ' + columnNode.dataType);\n    if (this._visitingCreate) {\n      if (columnNode.primaryKey && !this._visitCreateCompoundPrimaryKey) {\n        // creating a column as a primary key\n        txt.push(' PRIMARY KEY');\n      } else if (columnNode.notNull) {\n        txt.push(' NOT NULL');\n      }\n      if (!columnNode.primaryKey && columnNode.unique) {\n        txt.push(' UNIQUE');\n      }\n      if (columnNode.defaultValue !== undefined) {\n        txt.push(' DEFAULT ' + this._getParameterValue(columnNode.defaultValue));\n      }\n    }\n    if (!!columnNode.references) {\n      assert.equal(typeof columnNode.references, 'object', 'references is not a object for column ' + columnNode.name + ' (REFERENCES statements within CREATE TABLE and ADD COLUMN statements' + ' require refrences to be expressed as an object)');\n\n      //Empty refrence objects are ok\n      if (Object.keys(columnNode.references).length > 0) {\n        assert(columnNode.references.table, 'reference.table missing for column ' + columnNode.name + ' (REFERENCES statements within CREATE TABLE and ADD COLUMN statements' + ' require a table and column)');\n        assert(columnNode.references.column, 'reference.column missing for column ' + columnNode.name + ' (REFERENCES statements within CREATE TABLE and ADD COLUMN statements' + ' require a table and column)');\n        txt.push(' REFERENCES ');\n        if (columnNode.references.schema) {\n          txt.push(this.quote(columnNode.references.schema) + '.');\n        }\n        txt.push(this.quote(columnNode.references.table) + '(' + this.quote(columnNode.references.column) + ')');\n        var onDelete = columnNode.references.onDelete;\n        if (onDelete) onDelete = onDelete.toUpperCase();\n        if (onDelete === 'CASCADE' || onDelete === 'RESTRICT' || onDelete === 'SET NULL' || onDelete === 'SET DEFAULT' || onDelete === 'NO ACTION') {\n          txt.push(' ON DELETE ' + onDelete);\n        }\n        var onUpdate = columnNode.references.onUpdate;\n        if (onUpdate) onUpdate = onUpdate.toUpperCase();\n        if (onUpdate === 'CASCADE' || onUpdate === 'RESTRICT' || onUpdate === 'SET NULL' || onUpdate === 'SET DEFAULT' || onUpdate === 'NO ACTION') {\n          txt.push(' ON UPDATE ' + onUpdate);\n        }\n        var constraint = columnNode.references.constraint;\n        if (constraint) {\n          constraint = ' ' + constraint.toUpperCase();\n          txt.push(constraint);\n        }\n      }\n    }\n  }\n  return [txt.join('')];\n};\nPostgres.prototype.visitForeignKey = function (foreignKeyNode) {\n  var txt = [];\n  if (this._visitingCreate) {\n    assert(foreignKeyNode.table, 'Foreign table missing for table reference');\n    assert(foreignKeyNode.columns, 'Columns missing for table reference');\n    if (foreignKeyNode.refColumns !== undefined) {\n      assert.equal(foreignKeyNode.columns.length, foreignKeyNode.refColumns.length, 'Number of local columns and foreign columns differ in table reference');\n    }\n    if (foreignKeyNode.name !== undefined) {\n      txt.push('CONSTRAINT ' + this.quote(foreignKeyNode.name) + ' ');\n    }\n    txt.push('FOREIGN KEY ( ');\n    for (var i = 0; i < foreignKeyNode.columns.length; i++) {\n      if (i > 0) {\n        txt.push(', ');\n      }\n      txt.push(this.quote(foreignKeyNode.columns[i]));\n    }\n    txt.push(' ) REFERENCES ');\n    if (foreignKeyNode.schema !== undefined) {\n      txt.push(this.quote(foreignKeyNode.schema) + '.');\n    }\n    txt.push(this.quote(foreignKeyNode.table));\n    if (foreignKeyNode.refColumns !== undefined) {\n      txt.push(' ( ');\n      for (i = 0; i < foreignKeyNode.refColumns.length; i++) {\n        if (i > 0) {\n          txt.push(', ');\n        }\n        txt.push(this.quote(foreignKeyNode.refColumns[i]));\n      }\n      txt.push(' )');\n    }\n    var onDelete = foreignKeyNode.onDelete;\n    if (onDelete) {\n      onDelete = onDelete.toUpperCase();\n      if (onDelete === 'CASCADE' || onDelete === 'RESTRICT' || onDelete === 'SET NULL' || onDelete === 'SET DEFAULT' || onDelete === 'NO ACTION') {\n        txt.push(' ON DELETE ' + onDelete);\n      }\n    }\n    var onUpdate = foreignKeyNode.onUpdate;\n    if (onUpdate) {\n      onUpdate = onUpdate.toUpperCase();\n      if (onUpdate === 'CASCADE' || onUpdate === 'RESTRICT' || onUpdate === 'SET NULL' || onUpdate === 'SET DEFAULT' || onUpdate === 'NO ACTION') {\n        txt.push(' ON UPDATE ' + onUpdate);\n      }\n    }\n    if (foreignKeyNode.constraint) {\n      txt.push(' ' + foreignKeyNode.constraint.toUpperCase());\n    }\n  }\n  return [txt.join('')];\n};\nPostgres.prototype.visitFunctionCall = function (functionCall) {\n  this._visitingFunctionCall = true;\n  var _this = this;\n  function _extract() {\n    var nodes = functionCall.nodes.map(_this.visit.bind(_this));\n    if (nodes.length != 1) throw new Error('Not enough parameters passed to ' + functionCall.name + ' function');\n    var txt = 'EXTRACT(' + functionCall.name + ' FROM ' + (nodes[0] + '') + ')';\n    return txt;\n  }\n  var txt = \"\";\n  // Override date functions since postgres (and others) uses extract\n  if (['YEAR', 'MONTH', 'DAY', 'HOUR'].indexOf(functionCall.name) >= 0) txt = _extract();\n  // Override CURRENT_TIMESTAMP function to remove parens\n  else if ('CURRENT_TIMESTAMP' == functionCall.name) txt = functionCall.name;else txt = functionCall.name + '(' + functionCall.nodes.map(this.visit.bind(this)).join(', ') + ')';\n  this._visitingFunctionCall = false;\n  return [txt];\n};\nPostgres.prototype.visitArrayCall = function (arrayCall) {\n  var txt = 'ARRAY[' + arrayCall.nodes.map(this.visit.bind(this)).join(', ') + ']';\n  return [txt];\n};\nPostgres.prototype.visitParameter = function (parameter) {\n  // save the value into the parameters array\n  var value = parameter.value();\n  this.params.push(value);\n  return parameter.isExplicit ? [] : [this._getParameterText(this.params.length, value)];\n};\nPostgres.prototype.visitDefault = function (parameter) {\n  /* jshint unused: false */\n  return ['DEFAULT'];\n};\nPostgres.prototype.visitAddColumn = function (addColumn) {\n  this._visitingAddColumn = true;\n  var result = ['ADD COLUMN ' + this.visit(addColumn.nodes[0])];\n  this._visitingAddColumn = false;\n  return result;\n};\nPostgres.prototype.visitDropColumn = function (dropColumn) {\n  return ['DROP COLUMN ' + this.visit(dropColumn.nodes[0])];\n};\nPostgres.prototype.visitRenameColumn = function (renameColumn) {\n  return ['RENAME COLUMN ' + this.visit(renameColumn.nodes[0]) + ' TO ' + this.visit(renameColumn.nodes[1])];\n};\nPostgres.prototype.visitRename = function (rename) {\n  return ['RENAME TO ' + this.visit(rename.nodes[0])];\n};\nPostgres.prototype.visitIfExists = function () {\n  return ['IF EXISTS'];\n};\nPostgres.prototype.visitIfNotExists = function () {\n  return ['IF NOT EXISTS'];\n};\nPostgres.prototype.visitOrIgnore = function () {\n  throw new Error('PostgreSQL does not allow orIgnore clause.');\n};\nPostgres.prototype.visitCascade = function () {\n  return ['CASCADE'];\n};\nPostgres.prototype.visitRestrict = function () {\n  return ['RESTRICT'];\n};\nPostgres.prototype.visitForUpdate = function () {\n  return ['FOR UPDATE'];\n};\nPostgres.prototype.visitForShare = function () {\n  return ['FOR SHARE'];\n};\nPostgres.prototype.visitJoin = function (join) {\n  var result = [];\n  this._visitingJoin = true;\n  result = result.concat(this.visit(join.from));\n  result = result.concat(join.subType + ' JOIN');\n  result = result.concat(this.visit(join.to));\n  result = result.concat('ON');\n  result = result.concat(this.visit(join.on));\n  return result;\n};\nPostgres.prototype.visitLiteral = function (node) {\n  var txt = [node.literal];\n  if (node.alias) {\n    txt.push(this._aliasText + this.quote(node.alias));\n  }\n  return [txt.join('')];\n};\nPostgres.prototype.visitReturning = function (returning) {\n  this.visitingReturning = true;\n  var r = ['RETURNING', returning.nodes.map(this.visit.bind(this)).join(', ')];\n  this.visitingReturning = false;\n  return r;\n};\nPostgres.prototype.visitOnDuplicate = function (onDuplicate) {\n  throw new Error('PostgreSQL does not allow onDuplicate clause.');\n};\nPostgres.prototype.visitOnConflict = function (onConflict) {\n  var result = ['ON CONFLICT'];\n  var columns = [];\n  var updateClause = [],\n    i,\n    col;\n  var table = this._queryNode.table;\n  if (onConflict.constraint) result.push(['ON CONSTRAINT', this.quote(onConflict.constraint)].join(' '));else if (onConflict.columns) {\n    for (i = 0; i < onConflict.columns.length; i++) {\n      columns.push(this.quote(table.getColumn(onConflict.columns[i]).name));\n    }\n    result.push('(' + columns.join(', ') + ')');\n  }\n  if (onConflict.update) {\n    updateClause.push(\"DO UPDATE SET\");\n    var update = onConflict.update;\n    var setClause = [];\n    for (i = 0; i < update.length; i++) {\n      col = this.quote(table.getColumn(update[i]).name);\n      setClause.push(col + ' = EXCLUDED.' + col);\n    }\n    updateClause.push(setClause.join(', '));\n  } else updateClause.push('DO NOTHING');\n  result.push(updateClause.join(' '));\n  return result;\n};\nPostgres.prototype.visitModifier = function (node) {\n  return [node.type, node.count.type ? this.visit(node.count) : node.count];\n};\nPostgres.prototype.visitIndexes = function (node) {\n  /* jshint unused: false */\n  var tableName = this._queryNode.table.getName();\n  var schemaName = this._queryNode.table.getSchema() || \"public\";\n  return [\"SELECT relname\", \"FROM pg_class\", \"WHERE oid IN (\", \"SELECT indexrelid\", \"FROM pg_index, pg_class WHERE pg_class.relname='\" + tableName + \"'\", \"AND pg_class.relnamespace IN (SELECT pg_namespace.oid FROM pg_namespace WHERE nspname = '\" + schemaName + \"')\", \"AND pg_class.oid=pg_index.indrelid)\"].join(' ');\n};\nPostgres.prototype.visitCreateIndex = function (node) {\n  if (!node.options.columns || node.options.columns.length === 0) {\n    throw new Error('No columns defined!');\n  }\n  var tableName = this.visit(node.table.toNode());\n  var result = ['CREATE'];\n  if (node.options.type) {\n    result.push(node.options.type.toUpperCase());\n  }\n  result = result.concat(['INDEX', this.quote(node.indexName())]);\n  if (node.options.algorithm) {\n    result.push(\"USING \" + node.options.algorithm.toUpperCase());\n  }\n  result = result.concat([\"ON\", tableName, \"(\" + node.options.columns.reduce(function (result, col) {\n    var column = col.name ? col.name : col.value.name;\n    var direction = col.direction ? ' ' + col.direction.text : '';\n    var res = result.concat(this.quote(column) + direction);\n    return res;\n  }.bind(this), []) + \")\"]);\n  if (node.options.parser) {\n    result.push(\"WITH PARSER\");\n    result.push(node.options.parser);\n  }\n  return result;\n};\nPostgres.prototype.visitDropIndex = function (node) {\n  var result = ['DROP INDEX'];\n  result.push(this.quote(node.table.getSchema() || \"public\") + \".\" + this.quote(node.options.indexName));\n  return result;\n};\nPostgres.prototype.visitCreateView = function (createView) {\n  var result = ['CREATE VIEW', this.quote(createView.options.viewName), 'AS'];\n  return result;\n};\nPostgres.prototype.visitInterval = function (interval) {\n  var parameter = '';\n  function _add(n, unit) {\n    if (!_.isNumber(n)) return;\n    if (parameter !== '') {\n      parameter += ' ';\n    }\n    parameter += n + ' ' + unit;\n  }\n  _add(interval.years, 'YEAR');\n  _add(interval.months, 'MONTH');\n  _add(interval.days, 'DAY');\n  _add(interval.hours, 'HOUR');\n  _add(interval.minutes, 'MINUTE');\n  _add(interval.seconds, 'SECOND');\n  if (parameter === '') parameter = '0 SECOND';\n  var result = \"INTERVAL '\" + parameter + \"'\";\n  return result;\n};\n\n/**\n * Broken out as a separate function so that dialects that derive from this class can still use this functionality.\n *\n * @param {Node[]} list\n * @param {String} type\n * @returns {Object|undefined} {index:number, node:Node}\n */\nPostgres.prototype.findNode = function (list, type) {\n  for (var i = 0, len = list.length; i < len; i++) {\n    var n = list[i];\n    if (n.type == type) return {\n      index: i,\n      node: n\n    };\n  }\n  return undefined;\n};\n\n/**\n * pulls the DISTINCT node out of the filters and flags the SELECT node that it should be distinct.\n * Broken out as a separate function so that dialects that derive from this class can still use this functionality.\n */\nPostgres.prototype.handleDistinct = function (actions, filters) {\n  var distinctNode = this.findNode(filters, \"DISTINCT\");\n  //if (!distinctNode) distinctNode = _findNode(targets,\"DISTINCT\");\n  //if (!distinctNode) distinctNode = _findNode(actions,\"DISTINCT\");\n  if (!distinctNode) return;\n  var selectInfo = this.findNode(actions, \"SELECT\");\n  if (!selectInfo) return; // there should be one by now, I think\n  // mark the SELECT node that it's distinct\n  selectInfo.node.isDistinct = true;\n};\n\n/**\n * If the parent of the subquery is an INSERT we don't want to parenthesize.\n * This happens when you create the query like so:\n *\n * var query=post.insert(post.id)\n * var select=user.select(user.id)\n * query.add(select)\n *\n * @param parentQuery\n * @returns {boolean}\n */\nfunction dontParenthesizeSubQuery(parentQuery) {\n  if (!parentQuery) return false;\n  if (parentQuery.nodes.length === 0) return false;\n  if (['INSERT', 'REPLACE'].indexOf(parentQuery.nodes[0].type) === -1) return false;\n  return true;\n}\nmodule.exports = Postgres;","map":{"version":3,"names":["_","require","assert","From","Select","Table","Postgres","config","output","params","prototype","_myClass","_arrayAggFunctionName","_getParameterText","index","value","_disableParameterPlaceholders","_getParameterValue","_getParameterPlaceholder","quoteChar","quote","Array","isArray","length","isFunction","toISOString","JSON","stringify","self","map","item","join","bind","Date","Buffer","isBuffer","toString","strValue","Error","getQuery","queryNode","select","star","visit","indexOf","previousFlagStatus","query","text","values","getString","node","type","visitQuery","visitSubquery","visitSelect","visitInsert","visitReplace","visitUpdate","visitDelete","visitCreate","visitDrop","visitTruncate","visitDistinct","visitDistinctOn","visitAlias","visitAlter","visitCast","visitFrom","visitWhere","visitOrderBy","visitOrderByValue","visitGroupBy","visitHaving","visitReturning","visitOnDuplicate","visitOnConflict","visitForUpdate","visitForShare","visitTable","visitColumn","visitForeignKey","visitJoin","visitLiteral","visitParameter","visitDefault","visitIfExists","visitIfNotExists","visitOrIgnore","visitCascade","visitRestrict","visitRename","visitAddColumn","visitDropColumn","visitRenameColumn","visitIndexes","visitCreateIndex","visitDropIndex","visitFunctionCall","visitArrayCall","visitCreateView","visitInterval","visitPostfixUnary","visitPrefixUnary","visitBinary","visitTernary","visitIn","visitNotIn","visitCase","visitAt","visitSlice","visitModifier","_quoteCharacter","_aliasText","word","quoteCharacter","q","replace","RegExp","result","isDistinct","push","distinctOnNode","nodes","filter","shift","nonDistinctOnNodes","_selectOrDeleteEndIndex","insert","_visitedInsert","concat","_queryNode","table","toNode","columns","paramNodes","getParameters","paramText","paramSet","param","slice","splice","update","i","_visitingUpdateTargetColumn","target_col","del","create","_visitingCreate","col_nodes","col","foreign_key_nodes","foreignKeys","options","isTemporary","primary_col_nodes","n","primaryKey","_visitCreateCompoundPrimaryKey","colspec","name","drop","truncate","distinctOn","alias","alter","_visitingAlter","cast","_visitingCast","dataType","from","skipFromStatement","where","_visitingWhere","orderBy","nullOrder","toUpperCase","orderByValue","direction","groupBy","having","unary","operator","left","binary","property","right","ternary","visitPart","middle","separator","hasNull","forEach","_val","caseExp","whenList","thenList","visitingCase","whenExp","thenExp","else","undefined","at","start","end","visitContains","contains","set","visitContainedBy","containedBy","visitOverlap","overlap","dontParenthesizeSubQuery","missingFrom","hasFrom","createView","isSelect","actions","targets","filters","add","unshift","visitQueryHelper","handleDistinct","sortedNodes","res","dontParenthesize","subQuery","tableNode","txt","getSchema","getName","columnNode","inInsertUpdateClause","_visitedReplace","inDdlClause","_visitingAddColumn","inSelectClause","visitingReturning","_visitingJoin","inFunctionCall","_visitingFunctionCall","inCast","closeParen","asArray","aggregator","distinct","subfieldContainer","allCols","hasAliases","tableName","aliased","isConstant","constantValue","j","notNull","unique","defaultValue","references","equal","Object","keys","column","schema","onDelete","onUpdate","constraint","foreignKeyNode","refColumns","functionCall","_this","_extract","arrayCall","parameter","isExplicit","addColumn","dropColumn","renameColumn","rename","subType","to","on","literal","returning","r","onDuplicate","onConflict","updateClause","getColumn","setClause","count","schemaName","indexName","algorithm","reduce","parser","viewName","interval","_add","unit","isNumber","years","months","days","hours","minutes","seconds","findNode","list","len","distinctNode","selectInfo","parentQuery","module","exports"],"sources":["/home/ali/Documents/run_prj/happysnake/node_modules/sql/lib/dialect/postgres.js"],"sourcesContent":["'use strict';\n\nvar _      = require('lodash');\nvar assert = require('assert');\nvar From   = require('../node/from');\nvar Select = require('../node/select');\nvar Table  = require('../table');\n\nvar Postgres = function(config) {\n  this.output = [];\n  this.params = [];\n  this.config = config || {};\n};\n\nPostgres.prototype._myClass = Postgres;\n\nPostgres.prototype._arrayAggFunctionName = 'array_agg';\n\nPostgres.prototype._getParameterText = function(index, value) {\n  if (this._disableParameterPlaceholders) {\n    // do not use placeholder\n    return this._getParameterValue(value);\n  } else {\n    // use placeholder\n    return this._getParameterPlaceholder(index, value);\n  }\n};\n\nPostgres.prototype._getParameterValue = function(value, quoteChar) {\n  // handle primitives\n  if (null === value) {\n    value = 'NULL';\n  } else if ('boolean' === typeof value) {\n    value = value ? 'TRUE' : 'FALSE';\n  } else if ('number' === typeof value) {\n    // number is just number\n    value = value;\n  } else if ('string' === typeof value) {\n    // string uses single quote by default\n    value = this.quote(value, quoteChar || \"'\");\n  } else if ('object' === typeof value) {\n    if (Array.isArray(value)) {\n      if (this._myClass === Postgres) {\n        // naive check to see if this is an array of objects, which\n        // is handled differently than an array of primitives\n        if (value.length && 'object' === typeof value[0] &&\n            !_.isFunction(value[0].toISOString) &&\n            !Array.isArray(value[0])) {\n            value = \"'\" + JSON.stringify(value) + \"'\";\n        } else {\n            var self = this;\n            value = value.map(function (item) {\n                // In a Postgres array, strings must be double-quoted\n                return self._getParameterValue(item, '\"');\n            });\n            value = '\\'{' + value.join(',') + '}\\'';\n        }\n      } else {\n        value = _.map(value, this._getParameterValue.bind(this));\n        value = '(' + value.join(', ') + ')';\n      }\n    } else if (value instanceof Date) {\n      // Date object's default toString format does not get parsed well\n      // Handle dates using toISOString\n      value = this._getParameterValue(value.toISOString());\n    } else if (Buffer.isBuffer(value)) {\n      value = this._getParameterValue('\\\\x' + value.toString('hex'));\n    } else {\n      // rich object represent with string\n      var strValue = value.toString();\n      value = strValue === '[object Object]' ? this._getParameterValue(JSON.stringify(value)) : this._getParameterValue(strValue);\n    }\n  } else {\n    throw new Error('Unable to use ' + value + ' in query');\n  }\n\n  // value has been converted at this point\n  return value;\n};\n\nPostgres.prototype._getParameterPlaceholder = function(index, value) {\n  /* jshint unused: false */\n  return '$' + index;\n};\n\nPostgres.prototype.getQuery = function(queryNode) {\n  // passed in a table, not a query\n  if (queryNode instanceof Table) {\n    queryNode = queryNode.select(queryNode.star());\n  }\n  this.output = this.visit(queryNode);\n\n  //if is a create view, must replace paramaters with values\n  if (this.output.indexOf('CREATE VIEW') > -1) {\n    var previousFlagStatus = this._disableParameterPlaceholders;\n    this._disableParameterPlaceholders = true;\n    this.output = [];\n    this.output = this.visit(queryNode);\n    this.params = [];\n    this._disableParameterPlaceholders = previousFlagStatus;\n  }\n\n  // create the query object\n  var query = { text: this.output.join(' '), values: this.params };\n\n  // reset the internal state of this builder\n  this.output = [];\n  this.params = [];\n\n  return query;\n};\n\nPostgres.prototype.getString = function(queryNode) {\n  // switch off parameter placeholders\n  var previousFlagStatus = this._disableParameterPlaceholders;\n  this._disableParameterPlaceholders = true;\n  var query;\n  try {\n    // use the same code path for query building\n    query = this.getQuery(queryNode);\n  } finally {\n    // always restore the flag afterwards\n    this._disableParameterPlaceholders = previousFlagStatus;\n  }\n  return query.text;\n};\n\nPostgres.prototype.visit = function(node) {\n  switch(node.type) {\n    case 'QUERY'           : return this.visitQuery(node);\n    case 'SUBQUERY'        : return this.visitSubquery(node);\n    case 'SELECT'          : return this.visitSelect(node);\n    case 'INSERT'          : return this.visitInsert(node);\n    case 'REPLACE'         : return this.visitReplace(node);\n    case 'UPDATE'          : return this.visitUpdate(node);\n    case 'DELETE'          : return this.visitDelete(node);\n    case 'CREATE'          : return this.visitCreate(node);\n    case 'DROP'            : return this.visitDrop(node);\n    case 'TRUNCATE'        : return this.visitTruncate(node);\n    case 'DISTINCT'        : return this.visitDistinct(node);\n    case 'DISTINCT ON'     : return this.visitDistinctOn(node);\n    case 'ALIAS'           : return this.visitAlias(node);\n    case 'ALTER'           : return this.visitAlter(node);\n    case 'CAST'            : return this.visitCast(node);\n    case 'FROM'            : return this.visitFrom(node);\n    case 'WHERE'           : return this.visitWhere(node);\n    case 'ORDER BY'        : return this.visitOrderBy(node);\n    case 'ORDER BY VALUE'  : return this.visitOrderByValue(node);\n    case 'GROUP BY'        : return this.visitGroupBy(node);\n    case 'HAVING'          : return this.visitHaving(node);\n    case 'RETURNING'       : return this.visitReturning(node);\n    case 'ONDUPLICATE'     : return this.visitOnDuplicate(node);\n    case 'ONCONFLICT'      : return this.visitOnConflict(node);\n    case 'FOR UPDATE'      : return this.visitForUpdate();\n    case 'FOR SHARE'       : return this.visitForShare();\n    case 'TABLE'           : return this.visitTable(node);\n    case 'COLUMN'          : return this.visitColumn(node);\n    case 'FOREIGN KEY'     : return this.visitForeignKey(node);\n    case 'JOIN'            : return this.visitJoin(node);\n    case 'LITERAL'         : return this.visitLiteral(node);\n    case 'TEXT'            : return node.text;\n    case 'PARAMETER'       : return this.visitParameter(node);\n    case 'DEFAULT'         : return this.visitDefault(node);\n    case 'IF EXISTS'       : return this.visitIfExists();\n    case 'IF NOT EXISTS'   : return this.visitIfNotExists();\n    case 'OR IGNORE'       : return this.visitOrIgnore();\n    case 'CASCADE'         : return this.visitCascade();\n    case 'RESTRICT'        : return this.visitRestrict();\n    case 'RENAME'          : return this.visitRename(node);\n    case 'ADD COLUMN'      : return this.visitAddColumn(node);\n    case 'DROP COLUMN'     : return this.visitDropColumn(node);\n    case 'RENAME COLUMN'   : return this.visitRenameColumn(node);\n    case 'INDEXES'         : return this.visitIndexes(node);\n    case 'CREATE INDEX'    : return this.visitCreateIndex(node);\n    case 'DROP INDEX'      : return this.visitDropIndex(node);\n    case 'FUNCTION CALL'   : return this.visitFunctionCall(node);\n    case 'ARRAY CALL'      : return this.visitArrayCall(node);\n    case 'CREATE VIEW'     : return this.visitCreateView(node);\n    case 'INTERVAL'        : return this.visitInterval(node);\n\n    case 'POSTFIX UNARY' : return this.visitPostfixUnary(node);\n    case 'PREFIX UNARY'  : return this.visitPrefixUnary(node);\n    case 'BINARY'        : return this.visitBinary(node);\n    case 'TERNARY'       : return this.visitTernary(node);\n    case 'IN'            : return this.visitIn(node);\n    case 'NOT IN'        : return this.visitNotIn(node);\n    case 'CASE'          : return this.visitCase(node);\n    case 'AT'            : return this.visitAt(node);\n    case 'SLICE'         : return this.visitSlice(node);\n\n    case 'LIMIT' :\n    case 'OFFSET':\n      return this.visitModifier(node);\n    default:\n      throw new Error(\"Unrecognized node type \" + node.type);\n  }\n};\n\nPostgres.prototype._quoteCharacter = '\"';\nPostgres.prototype._aliasText = ' AS ';\n\nPostgres.prototype.quote = function(word, quoteCharacter) {\n  var q;\n  if (quoteCharacter) {\n    // use the specified quote character if given\n    q = quoteCharacter;\n  } else {\n    q = this._quoteCharacter;\n  }\n  // handle square brackets specially\n  if (q=='['){\n    return '['+word+']';\n  } else {\n    return q + word.replace(new RegExp(q,'g'),q+q) + q;\n  }\n};\n\nPostgres.prototype.visitSelect = function(select) {\n  var result = ['SELECT'];\n\n  if (select.isDistinct) result.push('DISTINCT');\n\n  var distinctOnNode = select.nodes.filter(function (node) {return node.type === 'DISTINCT ON';}).shift();\n  var nonDistinctOnNodes = select.nodes.filter(function (node) {return node.type !== 'DISTINCT ON';});\n\n  if (distinctOnNode) {\n    result.push(this.visit(distinctOnNode));\n  }\n\n  result.push(nonDistinctOnNodes.map(this.visit.bind(this)).join(', '));\n\n  this._selectOrDeleteEndIndex = this.output.length + result.length;\n\n  return result;\n};\n\nPostgres.prototype.visitInsert = function(insert) {\n  var self = this;\n  // don't use table.column for inserts\n  this._visitedInsert = true;\n\n  var result = ['INSERT'];\n  result = result.concat(insert.nodes.map(this.visit.bind(this)));\n  result.push('INTO ' + this.visit(this._queryNode.table.toNode()));\n  result.push('(' + insert.columns.map(this.visit.bind(this)).join(', ') + ')');\n\n  var paramNodes = insert.getParameters();\n\n  if (paramNodes.length > 0) {\n    var paramText = paramNodes.map(function (paramSet) {\n        return paramSet.map(function (param) {\n          return self.visit(param);\n        }).join(', ');\n      }).map(function (param) {\n        return '('+param+')';\n      }).join(', ');\n\n    result.push('VALUES', paramText);\n\n    if (result.slice(2, 5).join(' ') === '() VALUES ()') {\n      result.splice(2, 3, 'DEFAULT VALUES');\n    }\n  }\n\n  this._visitedInsert = false;\n\n  return result;\n};\n\nPostgres.prototype.visitReplace = function(replace) {\n  throw new Error('Postgres does not support REPLACE.');\n};\n\nPostgres.prototype.visitUpdate = function(update) {\n  // don't auto-generate from clause\n  var params = [];\n  /* jshint boss: true */\n  for(var i = 0, node; node = update.nodes[i]; i++) {\n    this._visitingUpdateTargetColumn = true;\n    var target_col = this.visit(node);\n    this._visitingUpdateTargetColumn = false;\n    params = params.concat(target_col + ' = ' + this.visit(node.value));\n  }\n  var result = [\n    'UPDATE',\n    this.visit(this._queryNode.table.toNode()),\n    'SET',\n    params.join(', ')\n  ];\n  return result;\n};\n\nPostgres.prototype.visitDelete = function (del) {\n  var result = ['DELETE'];\n  if (del.nodes.length) {\n    result.push(del.nodes.map(this.visit.bind(this)).join(', '));\n  }\n  this._selectOrDeleteEndIndex = result.length;\n  return result;\n};\n\nPostgres.prototype.visitCreate = function(create) {\n  this._visitingCreate = true;\n  // don't auto-generate from clause\n  var table = this._queryNode.table;\n  var col_nodes = table.columns.map(function(col) { return col.toNode(); });\n  var foreign_key_nodes = table.foreignKeys;\n\n   var result = ['CREATE TABLE'];\n  if (create.options.isTemporary) result=['CREATE TEMPORARY TABLE'];\n  result = result.concat(create.nodes.map(this.visit.bind(this)));\n  result.push(this.visit(table.toNode()));\n  var primary_col_nodes = col_nodes.filter(function(n) {\n    return n.primaryKey;\n  });\n  this._visitCreateCompoundPrimaryKey = primary_col_nodes.length > 1;\n  var colspec = '(' + col_nodes.map(this.visit.bind(this)).join(', ');\n  if (this._visitCreateCompoundPrimaryKey) {\n    colspec += ', PRIMARY KEY (';\n    colspec += primary_col_nodes.map(function(node) {\n      return this.quote(node.name);\n    }.bind(this)).join(', ');\n    colspec += ')';\n  }\n  if(foreign_key_nodes.length > 0) {\n    colspec += ', ' + foreign_key_nodes.map(this.visit.bind(this)).join(', ');\n  }\n  colspec += ')';\n  result.push(colspec);\n  this._visitCreateCompoundPrimaryKey = false;\n  this._visitingCreate = false;\n  return result;\n};\n\nPostgres.prototype.visitDrop = function(drop) {\n  // don't auto-generate from clause\n  var result = ['DROP TABLE'];\n  result = result.concat(drop.nodes.map(this.visit.bind(this)));\n  return result;\n};\n\nPostgres.prototype.visitTruncate = function(truncate) {\n  var result = ['TRUNCATE TABLE'];\n  result = result.concat(truncate.nodes.map(this.visit.bind(this)));\n  return result;\n};\n\nPostgres.prototype.visitDistinct = function(truncate) {\n  // Nothing to do here since it's handled in the SELECT clause\n  return [];\n};\n\nPostgres.prototype.visitDistinctOn = function(distinctOn) {\n  return ['DISTINCT ON('+distinctOn.nodes.map(this.visit.bind(this)).join(', ')+')'];\n};\n\nPostgres.prototype.visitAlias = function(alias) {\n  var result = [this.visit(alias.value) + this._aliasText + this.quote(alias.alias)];\n  return result;\n};\n\nPostgres.prototype.visitAlter = function(alter) {\n  this._visitingAlter = true;\n  // don't auto-generate from clause\n  var table = this._queryNode.table;\n  var result = [\n    'ALTER TABLE',\n    this.visit(table.toNode()),\n    alter.nodes.map(this.visit.bind(this)).join(', ')\n  ];\n  this._visitingAlter = false;\n  return result;\n};\n\nPostgres.prototype.visitCast = function(cast) {\n  this._visitingCast = true;\n  var result = ['CAST(' + this.visit(cast.value) + ' AS ' + cast.dataType + ')'];\n  this._visitingCast = false;\n  return result;\n};\n\nPostgres.prototype.visitFrom = function(from) {\n  var result = [];\n  if (from.skipFromStatement) {\n    result.push(',');\n  } else {\n    result.push('FROM');\n  }\n  for(var i = 0; i < from.nodes.length; i++) {\n    result = result.concat(this.visit(from.nodes[i]));\n  }\n  return result;\n};\n\nPostgres.prototype.visitWhere = function(where) {\n  this._visitingWhere = true;\n  var result = ['WHERE', where.nodes.map(this.visit.bind(this)).join(', ')];\n  this._visitingWhere = false;\n  return result;\n};\n\nPostgres.prototype.visitOrderBy = function(orderBy) {\n  var result = ['ORDER BY', orderBy.nodes.map(this.visit.bind(this)).join(', ')];\n  if (this._myClass === Postgres && this.config.nullOrder) {\n      result.push('NULLS ' + this.config.nullOrder.toUpperCase());\n  }\n  return result;\n};\n\nPostgres.prototype.visitOrderByValue = function(orderByValue) {\n  var text = this.visit(orderByValue.value);\n  if (orderByValue.direction) {\n    text += ' ' + this.visit(orderByValue.direction);\n  }\n  return [text];\n};\n\nPostgres.prototype.visitGroupBy = function(groupBy) {\n  var result = ['GROUP BY', groupBy.nodes.map(this.visit.bind(this)).join(', ')];\n  return result;\n};\n\nPostgres.prototype.visitHaving = function(having) {\n  var result = ['HAVING', having.nodes.map(this.visit.bind(this)).join(' AND ')];\n  return result;\n};\n\nPostgres.prototype.visitPrefixUnary = function(unary) {\n  var text = '(' + unary.operator + ' ' + this.visit(unary.left) + ')';\n  return [text];\n};\n\nPostgres.prototype.visitPostfixUnary = function(unary) {\n  var text = '(' + this.visit(unary.left) + ' ' + unary.operator + ')';\n  return [text];\n};\n\nPostgres.prototype.visitBinary = function(binary) {\n  var self = this;\n\n  binary.left.property = binary.left.name;\n  binary.right.property = binary.right.name;\n\n  var text = '(' + this.visit(binary.left) + ' ' + binary.operator + ' ';\n  if (Array.isArray(binary.right)) {\n    text += '(' + binary.right.map(function (node) {\n      return self.visit(node);\n    }).join(', ') + ')';\n  }\n  else {\n    text += this.visit(binary.right);\n  }\n  text += ')';\n  return [text];\n};\n\nPostgres.prototype.visitTernary = function(ternary) {\n  var self = this;\n  var text = '(' + this.visit(ternary.left) + ' ' + ternary.operator + ' ';\n\n  var visitPart = function(value) {\n    var text = '';\n    if (Array.isArray(value)) {\n      text += '(' + value.map(function (node) {\n        return self.visit(node);\n      }).join(', ') + ')';\n    }\n    else {\n      text += self.visit(value);\n    }\n    return text;\n  };\n\n  text += visitPart(ternary.middle);\n  text += ' ' + ternary.separator + ' ';\n  text += visitPart(ternary.right);\n\n  text += ')';\n  return [text];\n};\n\nPostgres.prototype.visitIn = function(binary) {\n  var self = this;\n  var text = '(';\n\n  if (Array.isArray(binary.right)) {\n    if (binary.right.length) {\n      var params  = [];\n      var hasNull = false;\n\n      binary.right.forEach(function(node) {\n        if (node.type === 'PARAMETER' && node._val === null) {\n          hasNull = true;\n        } else {\n          params.push(self.visit(node));\n        }\n      });\n\n      if (params.length) {\n        text += this.visit(binary.left) + ' IN (' + params.join(', ') + ')';\n\n        if (hasNull) {\n          text += ' OR ' + this.visit(binary.left) + ' IS NULL';\n        }\n      } else { // implicitely has null\n        text += this.visit(binary.left) + ' IS NULL';\n      }\n    } else {\n      text += '1=0';\n    }\n  } else {\n    text += this.visit(binary.left) + ' IN ' + this.visit(binary.right);\n  }\n\n  text += ')';\n  return [text];\n};\n\nPostgres.prototype.visitNotIn = function(binary) {\n  var self = this;\n  var text = '(';\n\n  if (Array.isArray(binary.right)) {\n    if (binary.right.length) {\n      var params  = [];\n      var hasNull = false;\n\n      binary.right.forEach(function(node) {\n        if (node.type === 'PARAMETER' && node._val === null) {\n          hasNull = true;\n        } else {\n          params.push(self.visit(node));\n        }\n      });\n\n      if (params.length && hasNull) {\n        text += 'NOT (';\n        text += this.visit(binary.left) + ' IN (' + params.join(', ') + ')';\n        text += ' OR ' + this.visit(binary.left) + ' IS NULL';\n        text += ')';\n      } else if (params.length) {\n        text += this.visit(binary.left) + ' NOT IN (' + params.join(', ') + ')';\n      } else { // implicitely has null\n        text += this.visit(binary.left) + ' IS NOT NULL';\n      }\n    } else {\n      text += '1=1';\n    }\n  } else {\n    text += this.visit(binary.left) + ' NOT IN ' + this.visit(binary.right);\n  }\n\n  text += ')';\n  return [text];\n};\n\nPostgres.prototype.visitCase = function(caseExp) {\n  assert(caseExp.whenList.length == caseExp.thenList.length);\n\n  var self = this;\n  var text = '(CASE';\n\n  this.visitingCase = true;\n\n  for (var i = 0; i < caseExp.whenList.length; i++) {\n    var whenExp = ' WHEN ' + this.visit(caseExp.whenList[i]);\n    var thenExp = ' THEN ' + this.visit(caseExp.thenList[i]);\n    text += whenExp + thenExp;\n  }\n\n  if (null !== caseExp.else && undefined !== caseExp.else) {\n    text += ' ELSE ' + this.visit(caseExp.else);\n  }\n\n  this.visitingCase = false;\n\n  text += ' END)';\n  return [text];\n};\n\nPostgres.prototype.visitAt = function(at) {\n  var text = '(' + this.visit(at.value) + ')[' + this.visit(at.index) + ']';\n  return [text];\n};\n\nPostgres.prototype.visitSlice = function(slice) {\n  var text = '(' + this.visit(slice.value) + ')';\n  text += '[' + this.visit(slice.start) + ':' + this.visit(slice.end) + ']';\n  return [text];\n};\n\nPostgres.prototype.visitContains = function(contains) {\n  var text = this.visit(contains.value);\n  text += ' @> ' + this.visit(contains.set);\n  return [text];\n};\n\nPostgres.prototype.visitContainedBy = function(containedBy) {\n  var text = this.visit(containedBy.value);\n  text += ' <@ ' + this.visit(containedBy.set);\n  return [text];\n};\n\nPostgres.prototype.visitOverlap = function(overlap) {\n  var text = this.visit(overlap.value);\n  text += ' && ' + this.visit(overlap.set);\n  return [text];\n};\n\nPostgres.prototype.visitQuery = function(queryNode) {\n  if (this._queryNode) return this.visitSubquery(queryNode,dontParenthesizeSubQuery(this._queryNode));\n  this._queryNode = queryNode;\n  // need to sort the top level query nodes on visitation priority\n  // so select/insert/update/delete comes before from comes before where\n  var missingFrom = true;\n  var hasFrom     = false;\n  var createView;\n  var isSelect     = false;\n  var actions = [];\n  var targets = [];\n  var filters = [];\n  for(var i = 0; i < queryNode.nodes.length; i++) {\n    var node = queryNode.nodes[i];\n    switch(node.type) {\n      case \"SELECT\":\n        isSelect = true; // jshint ignore:line\n      case \"DELETE\":\n        actions.push(node);\n        break;\n      case \"INDEXES\":\n      case \"INSERT\":\n      case \"REPLACE\":\n      case \"UPDATE\":\n      case \"CREATE\":\n      case \"DROP\":\n      case \"TRUNCATE\":\n      case \"ALTER\":\n        actions.push(node);\n        missingFrom = false;\n        break;\n      case \"FROM\":\n        node.skipFromStatement = hasFrom;\n        hasFrom = true;\n        missingFrom = false;\n        targets.push(node);\n        break;\n      case \"CREATE VIEW\":\n        createView = node;\n        break;\n      default:\n        filters.push(node);\n        break;\n    }\n  }\n  if(!actions.length) {\n    // if no actions are given, guess it's a select\n    actions.push(new Select().add('*'));\n    isSelect = true;\n  }\n  if(missingFrom && queryNode.table instanceof Table) {\n\t  // the instanceof handles the situation where a sql.select(some expression) is used and there should be no FROM clause\n    targets.push(new From().add(queryNode.table));\n  }\n  if (createView) {\n    if (isSelect) {\n      actions.unshift(createView);\n    } else {\n      throw new Error('Create View requires a Select.');\n    }\n  }\n  return this.visitQueryHelper(actions,targets,filters);\n};\n\n/**\n * We separate out this part of query building so it can be overridden by other implementations.\n *\n * @param {Node[]} actions\n * @param {Node[]} targets\n * @param {Node[]} filters\n * @returns {String[]}\n */\nPostgres.prototype.visitQueryHelper=function(actions,targets,filters){\n  this.handleDistinct(actions, filters);\n  // lazy-man sorting\n  var sortedNodes = actions.concat(targets).concat(filters);\n  for(var i = 0; i < sortedNodes.length; i++) {\n    var res = this.visit(sortedNodes[i]);\n    this.output = this.output.concat(res);\n  }\n  // implicit 'from'\n  return this.output;\n};\n\nPostgres.prototype.visitSubquery = function(queryNode,dontParenthesize) {\n  // create another query builder of the current class to build the subquery\n  var subQuery = new this._myClass(this.config);\n\n  // let the subquery modify this instance's params array\n  subQuery.params = this.params;\n\n  // pass on the disable parameter placeholder flag\n  var previousFlagStatus = subQuery._disableParameterPlaceholders;\n  subQuery._disableParameterPlaceholders = this._disableParameterPlaceholders;\n  try {\n    subQuery.visitQuery(queryNode);\n  } finally {\n    // restore the flag\n    subQuery._disableParameterPlaceholders = previousFlagStatus;\n  }\n\n  var alias = queryNode.alias;\n  if (dontParenthesize) {\n  \treturn [subQuery.output.join(' ') + (alias ? ' ' + this.quote(alias) : '')];\n  }\n  return ['(' + subQuery.output.join(' ') + ')' + (alias ? ' ' + this.quote(alias) : '')];\n};\n\nPostgres.prototype.visitTable = function(tableNode) {\n  var table = tableNode.table;\n  var txt=\"\";\n  if(table.getSchema()) {\n    txt = this.quote(table.getSchema());\n    txt += '.';\n  }\n  txt += this.quote(table.getName());\n  if(typeof table.alias === 'string') {\n    txt += this._aliasText + this.quote(table.alias);\n  }\n  return [txt];\n};\n\nPostgres.prototype.visitColumn = function(columnNode) {\n  var table = columnNode.table;\n  var inInsertUpdateClause = this._visitedInsert || this._visitedReplace || this._visitingUpdateTargetColumn;\n  var inDdlClause = this._visitingAddColumn || this._visitingAlter || this._visitingCreate;\n  var inSelectClause =\n    this.visitingReturning ||\n      (!this._selectOrDeleteEndIndex\n        && !this._visitingWhere   // jshint ignore:line\n        && !inInsertUpdateClause  // jshint ignore:line\n        && !inDdlClause           // jshint ignore:line\n        && !this.visitingCase     // jshint ignore:line\n        && !this._visitingJoin    // jshint ignore:line\n      );\n  var inFunctionCall = this._visitingFunctionCall;\n  var inCast = this._visitingCast;\n  var txt = [];\n  var closeParen = 0;\n  if(inSelectClause && (table && !table.alias || !!columnNode.alias)) {\n    if (columnNode.asArray) {\n      closeParen++;\n      txt.push(this._arrayAggFunctionName+'(');\n    }\n\n    if (!!columnNode.aggregator) {\n      closeParen++;\n      txt.push(columnNode.aggregator + '(');\n    }\n\n    if (columnNode.distinct === true) {\n      closeParen++;\n      txt.push('DISTINCT(');\n    }\n  }\n  if(!inInsertUpdateClause && !this.visitingReturning && !this._visitingCreate && !this._visitingAlter && !columnNode.subfieldContainer) {\n    if (table) {\n      if (typeof table.alias === 'string') {\n        txt.push(this.quote(table.alias));\n      } else {\n        if (table.getSchema()) {\n          txt.push(this.quote(table.getSchema()));\n          txt.push('.');\n        }\n        txt.push(this.quote(table.getName()));\n      }\n      txt.push('.');\n    }\n  }\n  if (columnNode.star) {\n    var allCols = [];\n    var hasAliases = false;\n    if(columnNode.aggregator !== 'COUNT') {\n      var tableName = txt.join('');\n      for (var i = 0; i < table.columns.length; ++i) {\n        var col = table.columns[i];\n        var aliased = col.name !== (col.alias || col.property);\n        hasAliases = hasAliases || aliased;\n        allCols.push(tableName + this.quote(col.name) + (aliased ? this._aliasText + this.quote(col.alias || col.property) : ''));\n      }\n    }\n    if(hasAliases) {\n      txt = [allCols.join(', ')];\n    }\n    else {\n      txt.push('*');\n    }\n  }\n  else if (columnNode.isConstant) {\n    // this injects directly into SELECT statement rather than creating a parameter\n    //   txt.push(this._getParameterValue(columnNode.literalValue))\n    // currently thinking it is better to generate a parameter\n    var value = columnNode.constantValue;\n    this.params.push(value);\n    txt.push(this._getParameterText(this.params.length, value));\n  }\n  else {\n    if (columnNode.subfieldContainer) {\n      txt.push('(' + this.visitColumn(columnNode.subfieldContainer) + ').');\n    }\n    txt.push(this.quote(columnNode.name));\n  }\n  if(closeParen) {\n    for(var j = 0; j < closeParen; j++) {\n      txt.push(')');\n    }\n  }\n  if(inSelectClause && !inFunctionCall && !inCast && (columnNode.alias || columnNode.property !== columnNode.name)) {\n    txt.push(this._aliasText + this.quote(columnNode.alias || columnNode.property));\n  }\n  if(this._visitingCreate || this._visitingAddColumn) {\n    assert(columnNode.dataType, 'dataType missing for column ' + columnNode.name +\n      ' (CREATE TABLE and ADD COLUMN statements require a dataType)');\n    txt.push(' ' + columnNode.dataType);\n\n    if (this._visitingCreate) {\n      if (columnNode.primaryKey && !this._visitCreateCompoundPrimaryKey) {\n        // creating a column as a primary key\n        txt.push(' PRIMARY KEY');\n      } else if (columnNode.notNull) {\n        txt.push(' NOT NULL');\n      }\n      if (!columnNode.primaryKey && columnNode.unique) {\n        txt.push(' UNIQUE');\n      }\n      if (columnNode.defaultValue !== undefined) {\n        txt.push(' DEFAULT ' + this._getParameterValue(columnNode.defaultValue));\n      }\n    }\n\n    if (!!columnNode.references) {\n      assert.equal(typeof (columnNode.references), 'object',\n        'references is not a object for column ' + columnNode.name +\n        ' (REFERENCES statements within CREATE TABLE and ADD COLUMN statements' +\n        ' require refrences to be expressed as an object)');\n\n      //Empty refrence objects are ok\n      if (Object.keys(columnNode.references).length > 0){\n        assert(columnNode.references.table, 'reference.table missing for column ' +\n          columnNode.name +\n          ' (REFERENCES statements within CREATE TABLE and ADD COLUMN statements' +\n          ' require a table and column)');\n        assert(columnNode.references.column, 'reference.column missing for column ' +\n          columnNode.name +\n          ' (REFERENCES statements within CREATE TABLE and ADD COLUMN statements' +\n          ' require a table and column)');\n        txt.push(' REFERENCES ');\n        if(columnNode.references.schema) {\n          txt.push(this.quote(columnNode.references.schema) + '.');\n        }\n        txt.push(this.quote(columnNode.references.table) + '(' +\n          this.quote(columnNode.references.column) + ')');\n\n        var onDelete = columnNode.references.onDelete;\n        if (onDelete) onDelete = onDelete.toUpperCase();\n        if (onDelete === 'CASCADE' || onDelete === 'RESTRICT' || onDelete === 'SET NULL' || onDelete === 'SET DEFAULT' || onDelete === 'NO ACTION') {\n          txt.push(' ON DELETE ' + onDelete);\n        }\n        var onUpdate = columnNode.references.onUpdate;\n        if (onUpdate) onUpdate = onUpdate.toUpperCase();\n        if (onUpdate === 'CASCADE' || onUpdate === 'RESTRICT' || onUpdate === 'SET NULL' || onUpdate === 'SET DEFAULT' || onUpdate === 'NO ACTION') {\n          txt.push(' ON UPDATE ' + onUpdate);\n        }\n        var constraint = columnNode.references.constraint;\n        if (constraint) {\n          constraint = ' ' + constraint.toUpperCase();\n          txt.push(constraint);\n        }\n      }\n    }\n  }\n  return [txt.join('')];\n};\n\nPostgres.prototype.visitForeignKey = function(foreignKeyNode)\n{\n  var txt = [];\n  if(this._visitingCreate) {\n    assert(foreignKeyNode.table, 'Foreign table missing for table reference');\n    assert(foreignKeyNode.columns, 'Columns missing for table reference');\n    if(foreignKeyNode.refColumns !== undefined) {\n      assert.equal(foreignKeyNode.columns.length, foreignKeyNode.refColumns.length, 'Number of local columns and foreign columns differ in table reference');\n    }\n    if(foreignKeyNode.name !== undefined) {\n      txt.push('CONSTRAINT ' + this.quote(foreignKeyNode.name) + ' ');\n    }\n    txt.push('FOREIGN KEY ( ');\n    for(var i = 0; i < foreignKeyNode.columns.length; i++) {\n      if(i>0) {\n        txt.push(', ');\n      }\n      txt.push(this.quote(foreignKeyNode.columns[i]));\n    }\n    txt.push(' ) REFERENCES ');\n    if(foreignKeyNode.schema !== undefined) {\n      txt.push(this.quote(foreignKeyNode.schema) + '.');\n    }\n    txt.push(this.quote(foreignKeyNode.table));\n    if(foreignKeyNode.refColumns !== undefined) {\n      txt.push(' ( ');\n      for(i = 0; i < foreignKeyNode.refColumns.length; i++) {\n        if(i>0) {\n          txt.push(', ');\n        }\n        txt.push(this.quote(foreignKeyNode.refColumns[i]));\n      }\n      txt.push(' )');\n    }\n    var onDelete = foreignKeyNode.onDelete;\n    if(onDelete) {\n      onDelete = onDelete.toUpperCase();\n      if(onDelete === 'CASCADE' || onDelete === 'RESTRICT' || onDelete === 'SET NULL' || onDelete === 'SET DEFAULT' || onDelete === 'NO ACTION') {\n        txt.push(' ON DELETE ' + onDelete);\n      }\n    }\n    var onUpdate = foreignKeyNode.onUpdate;\n    if(onUpdate) {\n      onUpdate = onUpdate.toUpperCase();\n      if(onUpdate === 'CASCADE' || onUpdate === 'RESTRICT' || onUpdate === 'SET NULL' || onUpdate === 'SET DEFAULT' || onUpdate === 'NO ACTION') {\n        txt.push(' ON UPDATE ' + onUpdate);\n      }\n    }\n    if(foreignKeyNode.constraint) {\n      txt.push(' ' + foreignKeyNode.constraint.toUpperCase());\n    }\n  }\n  return [txt.join('')];\n};\n\nPostgres.prototype.visitFunctionCall = function(functionCall) {\n  this._visitingFunctionCall = true;\n  var _this = this;\n\n  function _extract() {\n    var nodes = functionCall.nodes.map(_this.visit.bind(_this));\n    if (nodes.length != 1) throw new Error('Not enough parameters passed to ' + functionCall.name + ' function');\n    var txt = 'EXTRACT(' + functionCall.name + ' FROM ' + (nodes[0]+'') + ')';\n    return txt;\n  }\n\n  var txt = \"\";\n  // Override date functions since postgres (and others) uses extract\n  if (['YEAR', 'MONTH', 'DAY', 'HOUR'].indexOf(functionCall.name) >= 0) txt = _extract();\n  // Override CURRENT_TIMESTAMP function to remove parens\n  else if ('CURRENT_TIMESTAMP' == functionCall.name) txt = functionCall.name;\n  else txt = functionCall.name + '(' + functionCall.nodes.map(this.visit.bind(this)).join(', ') + ')';\n  this._visitingFunctionCall = false;\n  return [txt];\n};\n\nPostgres.prototype.visitArrayCall = function(arrayCall) {\n  var txt = 'ARRAY[' + arrayCall.nodes.map(this.visit.bind(this)).join(', ') + ']';\n  return [txt];\n};\n\nPostgres.prototype.visitParameter = function(parameter) {\n  // save the value into the parameters array\n  var value = parameter.value();\n  this.params.push(value);\n  return parameter.isExplicit ? [] : [this._getParameterText(this.params.length, value)];\n};\n\nPostgres.prototype.visitDefault = function(parameter) {\n  /* jshint unused: false */\n  return ['DEFAULT'];\n};\n\nPostgres.prototype.visitAddColumn = function(addColumn) {\n  this._visitingAddColumn = true;\n  var result = ['ADD COLUMN ' + this.visit(addColumn.nodes[0])];\n  this._visitingAddColumn = false;\n  return result;\n};\n\nPostgres.prototype.visitDropColumn = function(dropColumn) {\n  return ['DROP COLUMN ' + this.visit(dropColumn.nodes[0])];\n};\n\nPostgres.prototype.visitRenameColumn = function(renameColumn) {\n  return ['RENAME COLUMN ' + this.visit(renameColumn.nodes[0]) + ' TO ' + this.visit(renameColumn.nodes[1])];\n};\n\nPostgres.prototype.visitRename = function(rename) {\n  return ['RENAME TO ' + this.visit(rename.nodes[0])];\n};\n\nPostgres.prototype.visitIfExists = function() {\n  return ['IF EXISTS'];\n};\n\nPostgres.prototype.visitIfNotExists = function() {\n  return ['IF NOT EXISTS'];\n};\n\nPostgres.prototype.visitOrIgnore = function() {\n  throw new Error('PostgreSQL does not allow orIgnore clause.');\n};\n\nPostgres.prototype.visitCascade = function() {\n  return ['CASCADE'];\n};\n\nPostgres.prototype.visitRestrict = function() {\n  return ['RESTRICT'];\n};\n\nPostgres.prototype.visitForUpdate = function() {\n  return ['FOR UPDATE'];\n};\n\nPostgres.prototype.visitForShare = function() {\n  return ['FOR SHARE'];\n};\n\nPostgres.prototype.visitJoin = function(join) {\n  var result = [];\n  this._visitingJoin = true;\n  result = result.concat(this.visit(join.from));\n  result = result.concat(join.subType + ' JOIN');\n  result = result.concat(this.visit(join.to));\n  result = result.concat('ON');\n  result = result.concat(this.visit(join.on));\n  return result;\n};\n\nPostgres.prototype.visitLiteral = function(node) {\n  var txt = [node.literal];\n  if(node.alias) {\n    txt.push(this._aliasText + this.quote(node.alias));\n  }\n  return [txt.join('')];\n};\n\nPostgres.prototype.visitReturning = function(returning) {\n  this.visitingReturning = true;\n  var r = ['RETURNING', returning.nodes.map(this.visit.bind(this)).join(', ')];\n  this.visitingReturning = false;\n\n  return r;\n};\n\nPostgres.prototype.visitOnDuplicate = function(onDuplicate) {\n  throw new Error('PostgreSQL does not allow onDuplicate clause.');\n};\n\nPostgres.prototype.visitOnConflict = function(onConflict) {\n  var result = ['ON CONFLICT'];\n  var columns = [];\n  var updateClause = [], i, col;\n  var table = this._queryNode.table;\n  if(onConflict.constraint)\n    result.push(['ON CONSTRAINT', this.quote(onConflict.constraint)].join(' '));\n  else if(onConflict.columns) {\n    for(i=0; i < onConflict.columns.length; i++) {\n      columns.push(this.quote(table.getColumn(onConflict.columns[i]).name));\n    }\n    result.push( '(' + columns.join(', ') + ')' );\n  }\n    \n  if(onConflict.update){\n    updateClause.push(\"DO UPDATE SET\");\n    var update = onConflict.update;\n    var setClause = [];\n    for(i=0; i<update.length; i++) {\n      col = this.quote(table.getColumn(update[i]).name);\n      setClause.push(col + ' = EXCLUDED.' + col);\n    }\n    updateClause.push(setClause.join(', '));\n  }\n  else \n    updateClause.push('DO NOTHING');\n\n  result.push(updateClause.join(' '));\n  return result; \n};\n\nPostgres.prototype.visitModifier = function(node) {\n  return [node.type, node.count.type ? this.visit(node.count) : node.count];\n};\n\nPostgres.prototype.visitIndexes = function(node) {\n  /* jshint unused: false */\n  var tableName = this._queryNode.table.getName();\n  var schemaName = this._queryNode.table.getSchema() || \"public\";\n\n  return [\n    \"SELECT relname\",\n    \"FROM pg_class\",\n    \"WHERE oid IN (\",\n    \"SELECT indexrelid\",\n    \"FROM pg_index, pg_class WHERE pg_class.relname='\" + tableName + \"'\",\n    \"AND pg_class.relnamespace IN (SELECT pg_namespace.oid FROM pg_namespace WHERE nspname = '\" + schemaName + \"')\",\n    \"AND pg_class.oid=pg_index.indrelid)\"\n  ].join(' ');\n};\n\nPostgres.prototype.visitCreateIndex = function(node) {\n  if (!node.options.columns || (node.options.columns.length === 0)) {\n    throw new Error('No columns defined!');\n  }\n\n  var tableName = this.visit(node.table.toNode());\n  var result    = [ 'CREATE' ];\n\n  if (node.options.type) {\n    result.push(node.options.type.toUpperCase());\n  }\n\n  result = result.concat([ 'INDEX', this.quote(node.indexName()) ]);\n\n  if (node.options.algorithm) {\n    result.push(\"USING \" + node.options.algorithm.toUpperCase());\n  }\n\n  result = result.concat([\n    \"ON\",\n    tableName,\n    \"(\" + node.options.columns.reduce(function(result, col) {\n      var column = col.name ? col.name : col.value.name;\n      var direction = col.direction ? ' ' + col.direction.text : '';\n      var res = result.concat(this.quote(column) + direction);\n      return res;\n    }.bind(this), []) + \")\"\n  ]);\n\n  if (node.options.parser) {\n    result.push(\"WITH PARSER\");\n    result.push(node.options.parser);\n  }\n\n  return result;\n};\n\nPostgres.prototype.visitDropIndex = function(node) {\n  var result = [ 'DROP INDEX' ];\n\n  result.push(this.quote(node.table.getSchema() || \"public\") + \".\" + this.quote(node.options.indexName));\n\n  return result;\n};\n\nPostgres.prototype.visitCreateView = function(createView) {\n  var result = ['CREATE VIEW', this.quote(createView.options.viewName), 'AS'];\n  return result;\n};\n\nPostgres.prototype.visitInterval = function(interval) {\n  var parameter = '';\n  function _add(n, unit) {\n    if(!_.isNumber(n)) return;\n    if(parameter !== '') {\n      parameter += ' ';\n    }\n    parameter += n + ' ' + unit;\n  }\n  _add(interval.years, 'YEAR');\n  _add(interval.months, 'MONTH');\n  _add(interval.days, 'DAY');\n  _add(interval.hours, 'HOUR');\n  _add(interval.minutes, 'MINUTE');\n  _add(interval.seconds, 'SECOND');\n  if(parameter === '') parameter = '0 SECOND';\n  var result = \"INTERVAL '\" + parameter + \"'\";\n  return result;\n};\n\n/**\n * Broken out as a separate function so that dialects that derive from this class can still use this functionality.\n *\n * @param {Node[]} list\n * @param {String} type\n * @returns {Object|undefined} {index:number, node:Node}\n */\nPostgres.prototype.findNode=function(list,type) {\n  for (var i= 0, len=list.length; i<len; i++) {\n    var n=list[i];\n    if (n.type==type) return {index:i,node:n};\n  }\n  return undefined;\n};\n\n/**\n * pulls the DISTINCT node out of the filters and flags the SELECT node that it should be distinct.\n * Broken out as a separate function so that dialects that derive from this class can still use this functionality.\n */\nPostgres.prototype.handleDistinct = function(actions,filters) {\n  var distinctNode = this.findNode(filters,\"DISTINCT\");\n  //if (!distinctNode) distinctNode = _findNode(targets,\"DISTINCT\");\n  //if (!distinctNode) distinctNode = _findNode(actions,\"DISTINCT\");\n  if (!distinctNode) return;\n  var selectInfo = this.findNode(actions,\"SELECT\");\n  if (!selectInfo) return; // there should be one by now, I think\n  // mark the SELECT node that it's distinct\n  selectInfo.node.isDistinct = true;\n};\n\n/**\n * If the parent of the subquery is an INSERT we don't want to parenthesize.\n * This happens when you create the query like so:\n *\n * var query=post.insert(post.id)\n * var select=user.select(user.id)\n * query.add(select)\n *\n * @param parentQuery\n * @returns {boolean}\n */\nfunction dontParenthesizeSubQuery(parentQuery){\n\tif (!parentQuery) return false;\n\tif (parentQuery.nodes.length === 0) return false;\n\tif (['INSERT', 'REPLACE'].indexOf(parentQuery.nodes[0].type) === -1)  return false;\n\treturn true;\n}\n\nmodule.exports = Postgres;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}