{"ast":null,"code":"import { createHash } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nvar _sha256 = function _sha256(data) {\n  return createHash(\"sha256\").update(data).digest();\n};\nvar _sha512 = function _sha512(data) {\n  return createHash(\"sha512\").update(data).digest();\n};\nvar __sha256 = _sha256;\nvar __sha512 = _sha512;\nvar locked256 = false,\n  locked512 = false;\n/**\n *  Compute the cryptographic SHA2-256 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha256(\"0x\")\n *    //_result:\n *\n *    sha256(\"0x1337\")\n *    //_result:\n *\n *    sha256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function sha256(_data) {\n  var data = getBytes(_data, \"data\");\n  return hexlify(__sha256(data));\n}\nsha256._ = _sha256;\nsha256.lock = function () {\n  locked256 = true;\n};\nsha256.register = function (func) {\n  if (locked256) {\n    throw new Error(\"sha256 is locked\");\n  }\n  __sha256 = func;\n};\nObject.freeze(sha256);\n/**\n *  Compute the cryptographic SHA2-512 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha512(\"0x\")\n *    //_result:\n *\n *    sha512(\"0x1337\")\n *    //_result:\n *\n *    sha512(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n */\nexport function sha512(_data) {\n  var data = getBytes(_data, \"data\");\n  return hexlify(__sha512(data));\n}\nsha512._ = _sha512;\nsha512.lock = function () {\n  locked512 = true;\n};\nsha512.register = function (func) {\n  if (locked512) {\n    throw new Error(\"sha512 is locked\");\n  }\n  __sha512 = func;\n};\nObject.freeze(sha256);","map":null,"metadata":{},"sourceType":"module"}