{"ast":null,"code":"// TODO: visitCreate needs to support schemas\n// TODO: visitDrop needs to support schemas\n\n'use strict';\n\nvar util = require('util');\nvar assert = require('assert');\n\n/**\n * Config can contain:\n *\n * questionMarkParameterPlaceholder:true which will use a \"?\" for the parameter placeholder instead of the @index.\n *\n * @param config\n * @constructor\n */\nvar Mssql = function (config) {\n  this.output = [];\n  this.params = [];\n  this.config = config || {};\n};\nvar Postgres = require('./postgres');\nutil.inherits(Mssql, Postgres);\nMssql.prototype._myClass = Mssql;\nMssql.prototype._quoteCharacter = '[';\nMssql.prototype._arrayAggFunctionName = '';\nMssql.prototype.visitReplace = function (replace) {\n  throw new Error('Mssql does not support REPLACE.');\n};\nMssql.prototype._getParameterPlaceholder = function (index, value) {\n  if (this.config.questionMarkParameterPlaceholder) return '?';\n  return '@' + index;\n};\nMssql.prototype.visitBinary = function (binary) {\n  if (binary.operator === '@@') {\n    var self = this;\n    var text = '(CONTAINS (' + this.visit(binary.left) + ', ';\n    text += this.visit(binary.right);\n    text += '))';\n    return [text];\n  }\n  if (!isRightSideArray(binary)) {\n    return Mssql.super_.prototype.visitBinary.call(this, binary);\n  }\n  if (binary.operator == 'IN' || binary.operator == 'NOT IN') {\n    return Mssql.super_.prototype.visitBinary.call(this, binary);\n  }\n  throw new Error('SQL Sever does not support arrays in this type of expression.');\n};\nMssql.prototype.visitAlter = function (alter) {\n  var self = this;\n  var errMsg = 'ALTER TABLE cannot be used to perform multiple different operations in the same statement.';\n\n  // Implement our own add column:\n  //   PostgreSQL: ALTER TABLE \"name\" ADD COLUMN \"col1\", ADD COLUMN \"col2\"\n  //   Mssql:  ALTER TABLE [name] ADD [col1], [col2]\n  function _addColumn() {\n    self._visitingAlter = true;\n    var table = self._queryNode.table;\n    self._visitingAddColumn = true;\n    var result = 'ALTER TABLE ' + self.visit(table.toNode()) + ' ADD ' + self.visit(alter.nodes[0].nodes[0]);\n    for (var i = 1, len = alter.nodes.length; i < len; i++) {\n      var node = alter.nodes[i];\n      assert(node.type == 'ADD COLUMN', errMsg);\n      result += ', ' + self.visit(node.nodes[0]);\n    }\n    self._visitingAddColumn = false;\n    self._visitingAlter = false;\n    return [result];\n  }\n\n  // Implement our own drop column:\n  //   PostgreSQL: ALTER TABLE \"name\" DROP COLUMN \"col1\", DROP COLUMN \"col2\"\n  //   Mssql:  ALTER TABLE [name] DROP COLUMN [col1], [col2]\n  function _dropColumn() {\n    self._visitingAlter = true;\n    var table = self._queryNode.table;\n    var result = ['ALTER TABLE', self.visit(table.toNode())];\n    var columns = 'DROP COLUMN ' + self.visit(alter.nodes[0].nodes[0]);\n    for (var i = 1, len = alter.nodes.length; i < len; i++) {\n      var node = alter.nodes[i];\n      assert(node.type == 'DROP COLUMN', errMsg);\n      columns += ', ' + self.visit(node.nodes[0]);\n    }\n    result.push(columns);\n    self._visitingAlter = false;\n    return result;\n  }\n\n  // Implement our own rename table:\n  //   PostgreSQL: ALTER TABLE \"post\" RENAME TO \"posts\"\n  //   Mssql:  EXEC sp_rename [post], [posts]\n  function _rename() {\n    self._visitingAlter = true;\n    var table = self._queryNode.table;\n    var result = ['EXEC sp_rename ' + self.visit(table.toNode()) + ', ' + self.visit(alter.nodes[0].nodes[0])];\n    self._visitingAlter = false;\n    return result;\n  }\n\n  // Implement our own rename column:\n  //   PostgreSQL: ALTER TABLE \"group\" RENAME COLUMN \"userId\" TO \"newUserId\"\n  //   Mssql:  EXEC sp_rename '[group].[userId]', [newUserId]\n  function _renameColumn() {\n    self._visitingAlter = true;\n    var table = self._queryNode.table;\n    var result = [\"EXEC sp_rename '\" + self.visit(table.toNode()) + '.' + self.visit(alter.nodes[0].nodes[0]) + \"', \" + self.visit(alter.nodes[0].nodes[1]) + ', ' + \"'COLUMN'\"];\n    self._visitingAlter = false;\n    return result;\n  }\n  if (isAlterAddColumn(alter)) return _addColumn();\n  if (isAlterDropColumn(alter)) return _dropColumn();\n  if (isAlterRename(alter)) return _rename();\n  if (isAlterRenameColumn(alter)) return _renameColumn();\n  return Mssql.super_.prototype.visitAlter.call(this, alter);\n};\n\n// Need to implement a special version of CASE since SQL doesn't support\n//   CASE WHEN true THEN xxx END\n//   the \"true\" has to be a boolean expression like 1=1\nMssql.prototype.visitCase = function (caseExp) {\n  var _this = this;\n  function _whenValue(node) {\n    if (node.type != 'PARAMETER') return _this.visit(node);\n    // dealing with a true/false value\n    var val = node.value();\n    if (val === true) return '1=1';else return '0=1';\n  }\n  assert(caseExp.whenList.length == caseExp.thenList.length);\n  var self = this;\n  var text = '(CASE';\n  this.visitingCase = true;\n  for (var i = 0; i < caseExp.whenList.length; i++) {\n    var whenExp = ' WHEN ' + _whenValue(caseExp.whenList[i]);\n    var thenExp = ' THEN ' + this.visit(caseExp.thenList[i]);\n    text += whenExp + thenExp;\n  }\n  if (null !== caseExp.else && undefined !== caseExp.else) {\n    text += ' ELSE ' + this.visit(caseExp.else);\n  }\n  this.visitingCase = false;\n  text += ' END)';\n  return [text];\n};\nMssql.prototype.visitColumn = function (columnNode) {\n  var self = this;\n  var table;\n  var inSelectClause;\n  function _arrayAgg() {\n    throw new Error(\"SQL Server does not support array_agg.\");\n  }\n  function _countStar() {\n    // Implement our own since count(table.*) is invalid in Mssql\n    var result = 'COUNT(*)';\n    if (inSelectClause && columnNode.alias) {\n      result += ' AS ' + self.quote(columnNode.alias);\n    }\n    return result;\n  }\n  table = columnNode.table;\n  inSelectClause = !this._selectOrDeleteEndIndex;\n  if (isCountStarExpression(columnNode)) return _countStar();\n  if (inSelectClause && table && !table.alias && columnNode.asArray) return _arrayAgg();\n  return Mssql.super_.prototype.visitColumn.call(this, columnNode);\n};\nMssql.prototype.visitCreate = function (create) {\n  var isNotExists = isCreateIfNotExists(create);\n  var isTemporary = isCreateTemporary(create);\n  if (!isNotExists && !isTemporary) {\n    return Mssql.super_.prototype.visitCreate.call(this, create);\n  }\n  // Implement our own create if not exists:\n  //   PostgreSQL: CREATE TABLE IF NOT EXISTS \"group\" (\"id\" varchar(100))\n  //   Mssql:  IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'group') BEGIN ... END\n  var table = this._queryNode.table;\n  var col_nodes = table.columns.map(function (col) {\n    return col.toNode();\n  });\n  var tableResult = this.visit(table.toNode());\n  this._visitingCreate = true;\n  var createResult = ['CREATE TABLE'];\n  createResult.push(tableResult);\n  createResult.push('(' + col_nodes.map(this.visit.bind(this)).join(', ') + ')');\n  this._visitingCreate = false;\n  var tableStr = tableResult.join(' ');\n  tableStr = tableStr.replace(\"'\", \"''\");\n  tableStr = \"'\" + tableStr.substring(1, tableStr.length - 1) + \"'\";\n  var whereClause = 'WHERE TABLE_NAME = ' + tableStr;\n  // TODO: need to add schema check, sudo code:\n  // if (schema) { whereClause+=' AND TABLE_SCHEMA = schemaResult.join(' ')}\n  // Add some tests for this as well\n\n  if (!isNotExists) return createResult;\n  return ['IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES ' + whereClause + ') BEGIN ' + createResult.join(' ') + ' END'];\n};\nMssql.prototype.visitDrop = function (drop) {\n  if (!isDropIfExists(drop)) {\n    return Mssql.super_.prototype.visitDrop.call(this, drop);\n  }\n  // Implement our own drop if exists:\n  //   PostgreSQL: DROP TABLE IF EXISTS \"group\"\n  //   Mssql:  IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = [group]) BEGIN ... END\n  var table = this._queryNode.table;\n  var tableResult = this.visit(table.toNode());\n  var dropResult = ['DROP TABLE'];\n  dropResult.push(tableResult);\n  var whereClause = 'WHERE TABLE_NAME = ' + tableResult.join(' ');\n  // TODO: need to add schema check, sudo code:\n  // if (schema) { whereClause+=' AND TABLE_SCHEMA = schemaResult.join(' ')}\n  // Add some tests for this as well\n\n  return ['IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES ' + whereClause + ') BEGIN ' + dropResult.join(' ') + ' END'];\n};\nMssql.prototype.visitFunctionCall = function (functionCall) {\n  this._visitingFunctionCall = true;\n  var _this = this;\n  function _extract() {\n    var nodes = functionCall.nodes.map(_this.visit.bind(_this));\n    if (nodes.length != 1) throw new Error('Not enough parameters passed to ' + functionCall.name + ' function');\n    var txt = 'DATEPART(' + functionCall.name.toLowerCase() + ', ' + (nodes[0] + '') + ')';\n    return txt;\n  }\n  var txt;\n  // Override date functions since mssql uses datepart\n  if (['YEAR', 'MONTH', 'DAY', 'HOUR'].indexOf(functionCall.name) >= 0) txt = _extract();\n  // Override CURRENT_TIMESTAMP function to remove parens\n  else if ('CURRENT_TIMESTAMP' == functionCall.name) txt = functionCall.name;else {\n    var name = functionCall.name;\n    // override the LENGTH function since mssql calls it LEN\n    if (name == \"LENGTH\") name = \"LEN\";\n    txt = name + '(' + functionCall.nodes.map(this.visit.bind(this)).join(', ') + ')';\n  }\n  this._visitingFunctionCall = false;\n  return [txt];\n};\nMssql.prototype.visitOrderBy = function (orderBy) {\n  var result = Mssql.super_.prototype.visitOrderBy.call(this, orderBy);\n  var offsetNode = orderBy.msSQLOffsetNode;\n  var limitNode = orderBy.msSQLLimitNode;\n  if (!offsetNode && !limitNode) return result;\n  assert(offsetNode, \"Something bad happened, should have had an msSQLOffsetNode here.\");\n  result.push(\"OFFSET \" + getModifierValue(this, offsetNode) + \" ROWS\");\n  if (!limitNode) return result;\n  result.push(\"FETCH NEXT \" + getModifierValue(this, limitNode) + \" ROWS ONLY\");\n  return result;\n};\n\n/**\n * We override this so that we can deal with the LIMIT and OFFSET clauses specially since they have to become\n * part of the SELECT and ORDER BY clauses.\n *\n * Basically if there's an ORDER BY clause we attach OFFSET and LIMIT to it so that it can be processed by the\n * ORDER BY handler later.\n *\n * If there's a LIMIT clause without OFFSET, we attach it to the SELECT clause so we can process it later.\n *\n * @param {Node[]} actions\n * @param {Node[]} targets\n * @param {Node[]} filters\n * @returns {String[]}\n */\nMssql.prototype.visitQueryHelper = function (actions, targets, filters) {\n  function _handleLimitAndOffset() {\n    var limitInfo = Mssql.super_.prototype.findNode.call(this, filters, \"LIMIT\"); // jshint ignore:line\n    var offsetInfo = Mssql.super_.prototype.findNode.call(this, filters, \"OFFSET\"); // jshint ignore:line\n    var orderByInfo = Mssql.super_.prototype.findNode.call(this, filters, \"ORDER BY\"); // jshint ignore:line\n\n    // no OFFSET or LIMIT then there's nothing special to do\n    if (!offsetInfo && !limitInfo) return;\n    // ORDER BY with OFFSET we have work to do, may consume LIMIT as well\n    if (orderByInfo && offsetInfo) _processOrderByOffsetLimit(orderByInfo, offsetInfo, limitInfo);else if (offsetInfo) throw new Error(\"MS SQL Server does not allow OFFSET without ORDER BY\");else if (limitInfo) _processLimit(limitInfo);\n  }\n\n  /**\n   * We need to turn LIMIT into a TOP clause on the SELECT STATEMENT\n   *\n   * @param limitInfo\n   * @private\n   */\n  function _processLimit(limitInfo) {\n    var selectInfo = Mssql.super_.prototype.findNode.call(this, actions, \"SELECT\"); // jshint ignore:line\n    assert(selectInfo !== undefined, \"MS SQL Server requires a SELECT clause when using LIMIT\");\n    // save the LIMIT node with the SELECT node\n    selectInfo.node.msSQLLimitNode = limitInfo.node;\n    // remove the LIMIT node from the filters so it doesn't get processed later.\n    filters.splice(limitInfo.index, 1);\n  }\n\n  /**\n   * We need to turn LIMIT into a TOP clause on the SELECT STATEMENT\n   *\n   * @param orderByInfo\n   * @param offsetInfo\n   * @param limitInfo\n   * @private\n   */\n  function _processOrderByOffsetLimit(orderByInfo, offsetInfo, limitInfo) {\n    // save the OFFSET AND LIMIT nodes with the ORDER BY node\n    orderByInfo.node.msSQLOffsetNode = offsetInfo.node;\n    if (limitInfo) orderByInfo.node.msSQLLimitNode = limitInfo.node;\n    // remove the OFFSET and LIMIT nodes from the filters so they don't get processed later.\n    filters.splice(offsetInfo.index, 1);\n    if (limitInfo) filters.splice(limitInfo.index, 1);\n  }\n\n  // MAIN\n\n  Mssql.super_.prototype.handleDistinct.call(this, actions, filters);\n  _handleLimitAndOffset();\n\n  // lazy-man sorting\n  var sortedNodes = actions.concat(targets).concat(filters);\n  for (var i = 0; i < sortedNodes.length; i++) {\n    var res = this.visit(sortedNodes[i]);\n    this.output = this.output.concat(res);\n  }\n  return this.output;\n};\n\n//Mysql.prototype.visitRenameColumn = function(renameColumn) {\n//  var dataType = renameColumn.nodes[1].dataType || renameColumn.nodes[0].dataType;\n//  assert(dataType, 'dataType missing for column ' + (renameColumn.nodes[1].name || renameColumn.nodes[0].name || '') +\n//    ' (CHANGE COLUMN statements require a dataType)');\n//  return ['CHANGE COLUMN ' + this.visit(renameColumn.nodes[0]) + ' ' + this.visit(renameColumn.nodes[1]) + ' ' + dataType];\n//};\n//\n//Mysql.prototype.visitInsert = function(insert) {\n//  var result = Postgres.prototype.visitInsert.call(this, insert);\n//  if (result[2] === 'DEFAULT VALUES') {\n//    result[2] = '() VALUES ()';\n//  }\n//  return result;\n//};\n//\n//Mysql.prototype.visitIndexes = function(node) {\n//  var tableName = this.visit(this._queryNode.table.toNode());\n//\n//  return \"SHOW INDEX FROM \" + tableName;\n//};\n\nMssql.prototype.visitOnDuplicate = function (onDuplicate) {\n  throw new Error('MSSQL does not allow onDuplicate clause.');\n};\nMssql.prototype.visitOnConflict = function (onConflict) {\n  throw new Error('MSSQL does not allow onConflict clause.');\n};\nMssql.prototype.visitReturning = function () {\n  // TODO: need to add some code to the INSERT clause to support this since its the equivalent of the OUTPUT clause\n  // in MS SQL which appears before the values, not at the end of the statement.\n  throw new Error('Returning clause is not yet supported for MS SQL.');\n};\n\n// We deal with SELECT specially so we can add the TOP clause if needed\nMssql.prototype.visitSelect = function (select) {\n  if (!select.msSQLLimitNode) return Mssql.super_.prototype.visitSelect.call(this, select);\n  var result = ['SELECT', 'TOP(' + getModifierValue(this, select.msSQLLimitNode) + ')', select.nodes.map(this.visit.bind(this)).join(', ')];\n  this._selectOrDeleteEndIndex = this.output.length + result.length;\n  return result;\n};\n\n// Node is either an OFFSET or LIMIT node\nfunction getModifierValue(dialect, node) {\n  return node.count.type ? dialect.visit(node.count) : node.count;\n}\nfunction isAlterAddColumn(alter) {\n  if (alter.nodes.length === 0) return false;\n  if (alter.nodes[0].type != 'ADD COLUMN') return false;\n  return true;\n}\nfunction isAlterDropColumn(alter) {\n  if (alter.nodes.length === 0) return false;\n  if (alter.nodes[0].type != 'DROP COLUMN') return false;\n  return true;\n}\nfunction isAlterRename(alter) {\n  if (alter.nodes.length === 0) return false;\n  if (alter.nodes[0].type != 'RENAME') return false;\n  return true;\n}\nfunction isAlterRenameColumn(alter) {\n  if (alter.nodes.length === 0) return false;\n  if (alter.nodes[0].type != 'RENAME COLUMN') return false;\n  return true;\n}\nfunction isCountStarExpression(columnNode) {\n  if (!columnNode.aggregator) return false;\n  if (columnNode.aggregator.toLowerCase() != 'count') return false;\n  if (!columnNode.star) return false;\n  return true;\n}\nfunction isCreateIfNotExists(create) {\n  if (create.nodes.length === 0) return false;\n  if (create.nodes[0].type != 'IF NOT EXISTS') return false;\n  return true;\n}\nfunction isCreateTemporary(create) {\n  return create.options.isTemporary;\n}\nfunction isDropIfExists(drop) {\n  if (drop.nodes.length === 0) return false;\n  if (drop.nodes[0].type != 'IF EXISTS') return false;\n  return true;\n}\n\n// SQL Server does not support array expressions except in the IN clause.\nfunction isRightSideArray(binary) {\n  return Array.isArray(binary.right);\n}\nmodule.exports = Mssql;","map":{"version":3,"names":["util","require","assert","Mssql","config","output","params","Postgres","inherits","prototype","_myClass","_quoteCharacter","_arrayAggFunctionName","visitReplace","replace","Error","_getParameterPlaceholder","index","value","questionMarkParameterPlaceholder","visitBinary","binary","operator","self","text","visit","left","right","isRightSideArray","super_","call","visitAlter","alter","errMsg","_addColumn","_visitingAlter","table","_queryNode","_visitingAddColumn","result","toNode","nodes","i","len","length","node","type","_dropColumn","columns","push","_rename","_renameColumn","isAlterAddColumn","isAlterDropColumn","isAlterRename","isAlterRenameColumn","visitCase","caseExp","_this","_whenValue","val","whenList","thenList","visitingCase","whenExp","thenExp","else","undefined","visitColumn","columnNode","inSelectClause","_arrayAgg","_countStar","alias","quote","_selectOrDeleteEndIndex","isCountStarExpression","asArray","visitCreate","create","isNotExists","isCreateIfNotExists","isTemporary","isCreateTemporary","col_nodes","map","col","tableResult","_visitingCreate","createResult","bind","join","tableStr","substring","whereClause","visitDrop","drop","isDropIfExists","dropResult","visitFunctionCall","functionCall","_visitingFunctionCall","_extract","name","txt","toLowerCase","indexOf","visitOrderBy","orderBy","offsetNode","msSQLOffsetNode","limitNode","msSQLLimitNode","getModifierValue","visitQueryHelper","actions","targets","filters","_handleLimitAndOffset","limitInfo","findNode","offsetInfo","orderByInfo","_processOrderByOffsetLimit","_processLimit","selectInfo","splice","handleDistinct","sortedNodes","concat","res","visitOnDuplicate","onDuplicate","visitOnConflict","onConflict","visitReturning","visitSelect","select","dialect","count","aggregator","star","options","Array","isArray","module","exports"],"sources":["/home/ali/Documents/run_prj/happysnake/node_modules/sql/lib/dialect/mssql.js"],"sourcesContent":["// TODO: visitCreate needs to support schemas\n// TODO: visitDrop needs to support schemas\n\n'use strict';\n\nvar util = require('util');\nvar assert = require('assert');\n\n/**\n * Config can contain:\n *\n * questionMarkParameterPlaceholder:true which will use a \"?\" for the parameter placeholder instead of the @index.\n *\n * @param config\n * @constructor\n */\nvar Mssql = function(config) {\n  this.output = [];\n  this.params = [];\n  this.config = config || {};\n};\n\nvar Postgres = require('./postgres');\n\nutil.inherits(Mssql, Postgres);\n\nMssql.prototype._myClass = Mssql;\n\nMssql.prototype._quoteCharacter = '[';\n\nMssql.prototype._arrayAggFunctionName = '';\n\nMssql.prototype.visitReplace = function(replace) {\n  throw new Error('Mssql does not support REPLACE.');\n};\n\nMssql.prototype._getParameterPlaceholder = function(index, value) {\n  if (this.config.questionMarkParameterPlaceholder) return '?';\n  return '@' + index;\n};\n\nMssql.prototype.visitBinary = function(binary) {\n  if(binary.operator === '@@'){\n    var self = this;\n    var text = '(CONTAINS (' + this.visit(binary.left) + ', ';\n    text += this.visit(binary.right);\n    text += '))';\n    return [text];\n  }\n\n  if (!isRightSideArray(binary)){\n    return Mssql.super_.prototype.visitBinary.call(this, binary);\n  }\n  if (binary.operator=='IN' || binary.operator=='NOT IN'){\n    return Mssql.super_.prototype.visitBinary.call(this, binary);\n  }\n  throw new Error('SQL Sever does not support arrays in this type of expression.');\n};\n\nMssql.prototype.visitAlter = function(alter) {\n  var self=this;\n  var errMsg='ALTER TABLE cannot be used to perform multiple different operations in the same statement.';\n\n  // Implement our own add column:\n  //   PostgreSQL: ALTER TABLE \"name\" ADD COLUMN \"col1\", ADD COLUMN \"col2\"\n  //   Mssql:  ALTER TABLE [name] ADD [col1], [col2]\n  function _addColumn(){\n    self._visitingAlter = true;\n    var table = self._queryNode.table;\n    self._visitingAddColumn = true;\n    var result='ALTER TABLE '+self.visit(table.toNode())+' ADD '+self.visit(alter.nodes[0].nodes[0]);\n    for (var i= 1,len=alter.nodes.length; i<len; i++){\n      var node=alter.nodes[i];\n      assert(node.type=='ADD COLUMN',errMsg);\n      result+=', '+self.visit(node.nodes[0]);\n    }\n    self._visitingAddColumn = false;\n    self._visitingAlter = false;\n    return [result];\n  }\n\n  // Implement our own drop column:\n  //   PostgreSQL: ALTER TABLE \"name\" DROP COLUMN \"col1\", DROP COLUMN \"col2\"\n  //   Mssql:  ALTER TABLE [name] DROP COLUMN [col1], [col2]\n  function _dropColumn(){\n    self._visitingAlter = true;\n    var table = self._queryNode.table;\n    var result=[\n      'ALTER TABLE',\n      self.visit(table.toNode())\n    ];\n    var columns='DROP COLUMN '+self.visit(alter.nodes[0].nodes[0]);\n    for (var i= 1,len=alter.nodes.length; i<len; i++){\n      var node=alter.nodes[i];\n      assert(node.type=='DROP COLUMN',errMsg);\n      columns+=', '+self.visit(node.nodes[0]);\n    }\n    result.push(columns);\n    self._visitingAlter = false;\n    return result;\n  }\n\n  // Implement our own rename table:\n  //   PostgreSQL: ALTER TABLE \"post\" RENAME TO \"posts\"\n  //   Mssql:  EXEC sp_rename [post], [posts]\n  function _rename(){\n    self._visitingAlter = true;\n    var table = self._queryNode.table;\n    var result = ['EXEC sp_rename '+self.visit(table.toNode())+', '+self.visit(alter.nodes[0].nodes[0])];\n    self._visitingAlter = false;\n    return result;\n  }\n\n  // Implement our own rename column:\n  //   PostgreSQL: ALTER TABLE \"group\" RENAME COLUMN \"userId\" TO \"newUserId\"\n  //   Mssql:  EXEC sp_rename '[group].[userId]', [newUserId]\n  function _renameColumn(){\n   self._visitingAlter = true;\n   var table = self._queryNode.table;\n   var result = [\"EXEC sp_rename '\"+\n     self.visit(table.toNode())+'.'+self.visit(alter.nodes[0].nodes[0])+\"', \"+\n     self.visit(alter.nodes[0].nodes[1])+', '+\n     \"'COLUMN'\"\n     ];\n   self._visitingAlter = false;\n   return result;\n  }\n\n  if (isAlterAddColumn(alter)) return _addColumn();\n  if (isAlterDropColumn(alter)) return _dropColumn();\n  if (isAlterRename(alter)) return _rename();\n  if (isAlterRenameColumn(alter)) return _renameColumn();\n  return Mssql.super_.prototype.visitAlter.call(this, alter);\n};\n\n// Need to implement a special version of CASE since SQL doesn't support\n//   CASE WHEN true THEN xxx END\n//   the \"true\" has to be a boolean expression like 1=1\nMssql.prototype.visitCase = function(caseExp) {\n  var _this=this;\n\n  function _whenValue(node){\n    if (node.type!='PARAMETER') return _this.visit(node);\n    // dealing with a true/false value\n    var val=node.value();\n    if (val===true) return '1=1'; else return '0=1';\n  }\n\n  assert(caseExp.whenList.length == caseExp.thenList.length);\n\n  var self = this;\n  var text = '(CASE';\n\n  this.visitingCase = true;\n\n  for (var i = 0; i < caseExp.whenList.length; i++) {\n    var whenExp = ' WHEN ' + _whenValue(caseExp.whenList[i]);\n    var thenExp = ' THEN ' + this.visit(caseExp.thenList[i]);\n    text += whenExp + thenExp;\n  }\n\n  if (null !== caseExp.else && undefined !== caseExp.else) {\n    text += ' ELSE ' + this.visit(caseExp.else);\n  }\n\n  this.visitingCase = false;\n\n  text += ' END)';\n  return [text];\n};\n\nMssql.prototype.visitColumn = function(columnNode) {\n  var self=this;\n  var table;\n  var inSelectClause;\n\n  function _arrayAgg(){\n    throw new Error(\"SQL Server does not support array_agg.\");\n  }\n\n  function _countStar(){\n    // Implement our own since count(table.*) is invalid in Mssql\n    var result='COUNT(*)';\n    if(inSelectClause && columnNode.alias) {\n      result += ' AS ' + self.quote(columnNode.alias);\n    }\n    return result;\n  }\n\n  table = columnNode.table;\n  inSelectClause = !this._selectOrDeleteEndIndex;\n  if (isCountStarExpression(columnNode)) return _countStar();\n  if (inSelectClause && table && !table.alias && columnNode.asArray) return _arrayAgg();\n  return Mssql.super_.prototype.visitColumn.call(this, columnNode);\n\n};\n\n\nMssql.prototype.visitCreate = function(create) {\n  var isNotExists=isCreateIfNotExists(create);\n  var isTemporary=isCreateTemporary(create);\n  if (!isNotExists && !isTemporary) {\n    return Mssql.super_.prototype.visitCreate.call(this, create);\n  }\n  // Implement our own create if not exists:\n  //   PostgreSQL: CREATE TABLE IF NOT EXISTS \"group\" (\"id\" varchar(100))\n  //   Mssql:  IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'group') BEGIN ... END\n  var table = this._queryNode.table;\n  var col_nodes = table.columns.map(function(col) { return col.toNode(); });\n  var tableResult=this.visit(table.toNode());\n\n  this._visitingCreate = true;\n  var createResult = ['CREATE TABLE'];\n  createResult.push(tableResult);\n  createResult.push('(' + col_nodes.map(this.visit.bind(this)).join(', ') + ')');\n  this._visitingCreate = false;\n\n  var tableStr=tableResult.join(' ');\n  tableStr=tableStr.replace(\"'\",\"''\");\n  tableStr=\"'\"+tableStr.substring(1,tableStr.length-1)+\"'\";\n  var whereClause='WHERE TABLE_NAME = '+tableStr;\n  // TODO: need to add schema check, sudo code:\n  // if (schema) { whereClause+=' AND TABLE_SCHEMA = schemaResult.join(' ')}\n  // Add some tests for this as well\n\n  if (!isNotExists) return createResult;\n  return ['IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES '+whereClause+') BEGIN '+createResult.join(' ')+' END'];\n};\n\nMssql.prototype.visitDrop = function(drop) {\n  if (!isDropIfExists(drop)) {\n    return Mssql.super_.prototype.visitDrop.call(this, drop);\n  }\n  // Implement our own drop if exists:\n  //   PostgreSQL: DROP TABLE IF EXISTS \"group\"\n  //   Mssql:  IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = [group]) BEGIN ... END\n  var table = this._queryNode.table;\n  var tableResult=this.visit(table.toNode());\n\n  var dropResult = ['DROP TABLE'];\n  dropResult.push(tableResult);\n\n  var whereClause='WHERE TABLE_NAME = '+tableResult.join(' ');\n  // TODO: need to add schema check, sudo code:\n  // if (schema) { whereClause+=' AND TABLE_SCHEMA = schemaResult.join(' ')}\n  // Add some tests for this as well\n\n  return ['IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES '+whereClause+') BEGIN '+dropResult.join(' ')+' END'];\n};\n\nMssql.prototype.visitFunctionCall = function(functionCall) {\n  this._visitingFunctionCall = true;\n  var _this = this;\n\n  function _extract() {\n    var nodes = functionCall.nodes.map(_this.visit.bind(_this));\n    if (nodes.length != 1) throw new Error('Not enough parameters passed to ' + functionCall.name + ' function');\n    var txt = 'DATEPART(' + functionCall.name.toLowerCase() + ', ' + (nodes[0]+'') + ')';\n    return txt;\n  }\n\n  var txt;\n  // Override date functions since mssql uses datepart\n  if (['YEAR', 'MONTH', 'DAY', 'HOUR'].indexOf(functionCall.name) >= 0) txt = _extract();\n  // Override CURRENT_TIMESTAMP function to remove parens\n  else if ('CURRENT_TIMESTAMP' == functionCall.name) txt = functionCall.name;\n  else {\n    var name = functionCall.name;\n    // override the LENGTH function since mssql calls it LEN\n    if (name == \"LENGTH\") name = \"LEN\";\n    txt = name + '(' + functionCall.nodes.map(this.visit.bind(this)).join(', ') + ')';\n  }\n  this._visitingFunctionCall = false;\n  return [txt];\n};\n\nMssql.prototype.visitOrderBy = function(orderBy) {\n  var result=Mssql.super_.prototype.visitOrderBy.call(this, orderBy);\n  var offsetNode=orderBy.msSQLOffsetNode;\n  var limitNode=orderBy.msSQLLimitNode;\n  if (!offsetNode && !limitNode) return result;\n  assert(offsetNode,\"Something bad happened, should have had an msSQLOffsetNode here.\");\n  result.push(\"OFFSET \"+getModifierValue(this,offsetNode)+\" ROWS\");\n  if (!limitNode) return result;\n  result.push(\"FETCH NEXT \"+getModifierValue(this,limitNode)+\" ROWS ONLY\");\n  return result;\n};\n\n/**\n * We override this so that we can deal with the LIMIT and OFFSET clauses specially since they have to become\n * part of the SELECT and ORDER BY clauses.\n *\n * Basically if there's an ORDER BY clause we attach OFFSET and LIMIT to it so that it can be processed by the\n * ORDER BY handler later.\n *\n * If there's a LIMIT clause without OFFSET, we attach it to the SELECT clause so we can process it later.\n *\n * @param {Node[]} actions\n * @param {Node[]} targets\n * @param {Node[]} filters\n * @returns {String[]}\n */\nMssql.prototype.visitQueryHelper=function(actions,targets,filters){\n  function _handleLimitAndOffset(){\n    var limitInfo=Mssql.super_.prototype.findNode.call(this, filters, \"LIMIT\"); // jshint ignore:line\n    var offsetInfo=Mssql.super_.prototype.findNode.call(this, filters, \"OFFSET\"); // jshint ignore:line\n    var orderByInfo=Mssql.super_.prototype.findNode.call(this, filters, \"ORDER BY\"); // jshint ignore:line\n\n    // no OFFSET or LIMIT then there's nothing special to do\n    if (!offsetInfo && !limitInfo) return;\n    // ORDER BY with OFFSET we have work to do, may consume LIMIT as well\n    if (orderByInfo && offsetInfo) _processOrderByOffsetLimit(orderByInfo,offsetInfo,limitInfo);\n    else if (offsetInfo) throw new Error(\"MS SQL Server does not allow OFFSET without ORDER BY\");\n    else if (limitInfo) _processLimit(limitInfo);\n  }\n\n  /**\n   * We need to turn LIMIT into a TOP clause on the SELECT STATEMENT\n   *\n   * @param limitInfo\n   * @private\n   */\n  function _processLimit(limitInfo){\n    var selectInfo=Mssql.super_.prototype.findNode.call(this, actions, \"SELECT\"); // jshint ignore:line\n    assert(selectInfo!==undefined,\"MS SQL Server requires a SELECT clause when using LIMIT\");\n    // save the LIMIT node with the SELECT node\n    selectInfo.node.msSQLLimitNode=limitInfo.node;\n    // remove the LIMIT node from the filters so it doesn't get processed later.\n    filters.splice(limitInfo.index,1);\n  }\n\n  /**\n   * We need to turn LIMIT into a TOP clause on the SELECT STATEMENT\n   *\n   * @param orderByInfo\n   * @param offsetInfo\n   * @param limitInfo\n   * @private\n   */\n  function _processOrderByOffsetLimit(orderByInfo,offsetInfo,limitInfo){\n    // save the OFFSET AND LIMIT nodes with the ORDER BY node\n    orderByInfo.node.msSQLOffsetNode=offsetInfo.node;\n    if (limitInfo) orderByInfo.node.msSQLLimitNode=limitInfo.node;\n    // remove the OFFSET and LIMIT nodes from the filters so they don't get processed later.\n    filters.splice(offsetInfo.index,1);\n    if (limitInfo) filters.splice(limitInfo.index,1);\n  }\n\n  // MAIN\n\n  Mssql.super_.prototype.handleDistinct.call(this, actions, filters);\n  _handleLimitAndOffset();\n\n  // lazy-man sorting\n  var sortedNodes = actions.concat(targets).concat(filters);\n  for(var i = 0; i < sortedNodes.length; i++) {\n    var res = this.visit(sortedNodes[i]);\n    this.output = this.output.concat(res);\n  }\n  return this.output;\n};\n\n//Mysql.prototype.visitRenameColumn = function(renameColumn) {\n//  var dataType = renameColumn.nodes[1].dataType || renameColumn.nodes[0].dataType;\n//  assert(dataType, 'dataType missing for column ' + (renameColumn.nodes[1].name || renameColumn.nodes[0].name || '') +\n//    ' (CHANGE COLUMN statements require a dataType)');\n//  return ['CHANGE COLUMN ' + this.visit(renameColumn.nodes[0]) + ' ' + this.visit(renameColumn.nodes[1]) + ' ' + dataType];\n//};\n//\n//Mysql.prototype.visitInsert = function(insert) {\n//  var result = Postgres.prototype.visitInsert.call(this, insert);\n//  if (result[2] === 'DEFAULT VALUES') {\n//    result[2] = '() VALUES ()';\n//  }\n//  return result;\n//};\n//\n//Mysql.prototype.visitIndexes = function(node) {\n//  var tableName = this.visit(this._queryNode.table.toNode());\n//\n//  return \"SHOW INDEX FROM \" + tableName;\n//};\n\nMssql.prototype.visitOnDuplicate = function(onDuplicate) {\n  throw new Error('MSSQL does not allow onDuplicate clause.');\n};\n\nMssql.prototype.visitOnConflict = function(onConflict) {\n  throw new Error('MSSQL does not allow onConflict clause.');\n};\n\nMssql.prototype.visitReturning = function() {\n  // TODO: need to add some code to the INSERT clause to support this since its the equivalent of the OUTPUT clause\n  // in MS SQL which appears before the values, not at the end of the statement.\n  throw new Error('Returning clause is not yet supported for MS SQL.');\n};\n\n// We deal with SELECT specially so we can add the TOP clause if needed\nMssql.prototype.visitSelect = function(select) {\n  if (!select.msSQLLimitNode) return Mssql.super_.prototype.visitSelect.call(this, select);\n  var result=[\n    'SELECT',\n    'TOP('+getModifierValue(this,select.msSQLLimitNode)+')',\n    select.nodes.map(this.visit.bind(this)).join(', ')\n  ];\n  this._selectOrDeleteEndIndex = this.output.length + result.length;\n  return result;\n};\n\n// Node is either an OFFSET or LIMIT node\nfunction getModifierValue(dialect,node){\n  return node.count.type ? dialect.visit(node.count) : node.count;\n}\n\nfunction isAlterAddColumn(alter){\n  if (alter.nodes.length===0) return false;\n  if (alter.nodes[0].type!='ADD COLUMN') return false;\n  return true;\n}\n\nfunction isAlterDropColumn(alter){\n  if (alter.nodes.length===0) return false;\n  if (alter.nodes[0].type!='DROP COLUMN') return false;\n  return true;\n}\n\nfunction isAlterRename(alter){\n  if (alter.nodes.length===0) return false;\n  if (alter.nodes[0].type!='RENAME') return false;\n  return true;\n}\n\nfunction isAlterRenameColumn(alter){\n  if (alter.nodes.length===0) return false;\n  if (alter.nodes[0].type!='RENAME COLUMN') return false;\n  return true;\n}\n\nfunction isCountStarExpression(columnNode){\n  if (!columnNode.aggregator) return false;\n  if (columnNode.aggregator.toLowerCase()!='count') return false;\n  if (!columnNode.star) return false;\n  return true;\n}\n\nfunction isCreateIfNotExists(create){\n  if (create.nodes.length===0) return false;\n  if (create.nodes[0].type!='IF NOT EXISTS') return false;\n  return true;\n}\n\nfunction isCreateTemporary(create){\n  return create.options.isTemporary;\n}\n\nfunction isDropIfExists(drop){\n  if (drop.nodes.length===0) return false;\n  if (drop.nodes[0].type!='IF EXISTS') return false;\n  return true;\n}\n\n// SQL Server does not support array expressions except in the IN clause.\nfunction isRightSideArray(binary){\n  return Array.isArray(binary.right);\n}\n\nmodule.exports = Mssql;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}