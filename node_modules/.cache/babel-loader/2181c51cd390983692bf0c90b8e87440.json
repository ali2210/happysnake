{"ast":null,"code":"import _classCallCheck from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, assertArgument } from \"../utils/index.js\";\nimport { EnsPlugin, GasCostPlugin } from \"./plugins-network.js\";\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\n/* * * *\nexport class PriceOraclePlugin extends NetworkPlugin {\n    readonly address!: string;\n\n    constructor(address: string) {\n        super(\"org.ethers.plugins.price-oracle\");\n        defineProperties<PriceOraclePlugin>(this, { address });\n    }\n\n    clone(): PriceOraclePlugin {\n        return new PriceOraclePlugin(this.address);\n    }\n}\n*/\n// Networks or clients with a higher need for security (such as clients\n// that may automatically make CCIP requests without user interaction)\n// can use this plugin to anonymize requests or intercept CCIP requests\n// to notify and/or receive authorization from the user\n/* * * *\nexport type FetchDataFunc = (req: Frozen<FetchRequest>) => Promise<FetchRequest>;\nexport class CcipPreflightPlugin extends NetworkPlugin {\n    readonly fetchData!: FetchDataFunc;\n\n    constructor(fetchData: FetchDataFunc) {\n        super(\"org.ethers.plugins.ccip-preflight\");\n        defineProperties<CcipPreflightPlugin>(this, { fetchData });\n    }\n\n    clone(): CcipPreflightPlugin {\n        return new CcipPreflightPlugin(this.fetchData);\n    }\n}\n*/\nvar Networks = new Map();\n// @TODO: Add a _ethersNetworkObj variable to better detect network ovjects\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */\nexport var Network = /*#__PURE__*/function () {\n  /**\n   *  Creates a new **Network** for %%name%% and %%chainId%%.\n   */\n  function Network(name, chainId) {\n    _classCallCheck(this, Network);\n    this.#name = name;\n    this.#chainId = getBigInt(chainId);\n    this.#plugins = new Map();\n  }\n  /**\n   *  Returns a JSON-compatible representation of a Network.\n   */\n  _createClass(Network, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        name: this.name,\n        chainId: String(this.chainId)\n      };\n    }\n    /**\n     *  The network common name.\n     *\n     *  This is the canonical name, as networks migh have multiple\n     *  names.\n     */\n  }, {\n    key: \"matches\",\n    /**\n     *  Returns true if %%other%% matches this network. Any chain ID\n     *  must match, and if no chain ID is present, the name must match.\n     *\n     *  This method does not currently check for additional properties,\n     *  such as ENS address or plug-in compatibility.\n     */\n    value: function matches(other) {\n      if (other == null) {\n        return false;\n      }\n      if (typeof other === \"string\") {\n        try {\n          return this.chainId === getBigInt(other);\n        } catch (error) {}\n        return this.name === other;\n      }\n      if (typeof other === \"number\" || typeof other === \"bigint\") {\n        try {\n          return this.chainId === getBigInt(other);\n        } catch (error) {}\n        return false;\n      }\n      if (typeof other === \"object\") {\n        if (other.chainId != null) {\n          try {\n            return this.chainId === getBigInt(other.chainId);\n          } catch (error) {}\n          return false;\n        }\n        if (other.name != null) {\n          return this.name === other.name;\n        }\n        return false;\n      }\n      return false;\n    }\n    /**\n     *  Returns the list of plugins currently attached to this Network.\n     */\n  }, {\n    key: \"attachPlugin\",\n    /**\n     *  Attach a new %%plugin%% to this Network. The network name\n     *  must be unique, excluding any fragment.\n     */\n    value: function attachPlugin(plugin) {\n      if (this.#plugins.get(plugin.name)) {\n        throw new Error(\"cannot replace existing plugin: \".concat(plugin.name, \" \"));\n      }\n      this.#plugins.set(plugin.name, plugin.clone());\n      return this;\n    }\n    /**\n     *  Return the plugin, if any, matching %%name%% exactly. Plugins\n     *  with fragments will not be returned unless %%name%% includes\n     *  a fragment.\n     */\n  }, {\n    key: \"getPlugin\",\n    value: function getPlugin(name) {\n      return this.#plugins.get(name) || null;\n    }\n    /**\n     *  Gets a list of all plugins that match %%name%%, with otr without\n     *  a fragment.\n     */\n  }, {\n    key: \"getPlugins\",\n    value: function getPlugins(basename) {\n      return this.plugins.filter(function (p) {\n        return p.name.split(\"#\")[0] === basename;\n      });\n    }\n    /**\n     *  Create a copy of this Network.\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = new Network(this.name, this.chainId);\n      this.plugins.forEach(function (plugin) {\n        clone.attachPlugin(plugin.clone());\n      });\n      return clone;\n    }\n    /**\n     *  Compute the intrinsic gas required for a transaction.\n     *\n     *  A GasCostPlugin can be attached to override the default\n     *  values.\n     */\n  }, {\n    key: \"computeIntrinsicGas\",\n    value: function computeIntrinsicGas(tx) {\n      var costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || new GasCostPlugin();\n      var gas = costs.txBase;\n      if (tx.to == null) {\n        gas += costs.txCreate;\n      }\n      if (tx.data) {\n        for (var i = 2; i < tx.data.length; i += 2) {\n          if (tx.data.substring(i, i + 2) === \"00\") {\n            gas += costs.txDataZero;\n          } else {\n            gas += costs.txDataNonzero;\n          }\n        }\n      }\n      if (tx.accessList) {\n        var accessList = accessListify(tx.accessList);\n        for (var addr in accessList) {\n          gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n        }\n      }\n      return gas;\n    }\n    /**\n     *  Returns a new Network for the %%network%% name or chainId.\n     */\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.#name;\n    },\n    set: function set(value) {\n      this.#name = value;\n    }\n    /**\n     *  The network chain ID.\n     */\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.#chainId;\n    },\n    set: function set(value) {\n      this.#chainId = getBigInt(value, \"chainId\");\n    }\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      return Array.from(this.#plugins.values());\n    }\n  }], [{\n    key: \"from\",\n    value: function from(network) {\n      injectCommonNetworks();\n      // Default network\n      if (network == null) {\n        return Network.from(\"mainnet\");\n      }\n      // Canonical name or chain ID\n      if (typeof network === \"number\") {\n        network = BigInt(network);\n      }\n      if (typeof network === \"string\" || typeof network === \"bigint\") {\n        var networkFunc = Networks.get(network);\n        if (networkFunc) {\n          return networkFunc();\n        }\n        if (typeof network === \"bigint\") {\n          return new Network(\"unknown\", network);\n        }\n        assertArgument(false, \"unknown network\", \"network\", network);\n      }\n      // Clonable with network-like abilities\n      if (typeof network.clone === \"function\") {\n        var clone = network.clone();\n        //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n        //}\n        return clone;\n      }\n      // Networkish\n      if (typeof network === \"object\") {\n        assertArgument(typeof network.name === \"string\" && typeof network.chainId === \"number\", \"invalid network object name or chainId\", \"network\", network);\n        var custom = new Network(network.name, network.chainId);\n        if (network.ensAddress || network.ensNetwork != null) {\n          custom.attachPlugin(new EnsPlugin(network.ensAddress, network.ensNetwork));\n        }\n        //if ((<any>network).layerOneConnection) {\n        //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n        //}\n        return custom;\n      }\n      assertArgument(false, \"invalid network\", \"network\", network);\n    }\n    /**\n     *  Register %%nameOrChainId%% with a function which returns\n     *  an instance of a Network representing that chain.\n     */\n  }, {\n    key: \"register\",\n    value: function register(nameOrChainId, networkFunc) {\n      if (typeof nameOrChainId === \"number\") {\n        nameOrChainId = BigInt(nameOrChainId);\n      }\n      var existing = Networks.get(nameOrChainId);\n      if (existing) {\n        assertArgument(false, \"conflicting network for \".concat(JSON.stringify(existing.name)), \"nameOrChainId\", nameOrChainId);\n      }\n      Networks.set(nameOrChainId, networkFunc);\n    }\n  }]);\n  return Network;\n}();\n// See: https://chainlist.org\nvar injected = false;\nfunction injectCommonNetworks() {\n  if (injected) {\n    return;\n  }\n  injected = true;\n  /// Register popular Ethereum networks\n  function registerEth(name, chainId, options) {\n    var func = function func() {\n      var network = new Network(name, chainId);\n      // We use 0 to disable ENS\n      if (options.ensNetwork != null) {\n        network.attachPlugin(new EnsPlugin(null, options.ensNetwork));\n      }\n      if (options.priorityFee) {\n        //                network.attachPlugin(new MaxPriorityFeePlugin(options.priorityFee));\n      }\n      /*\n                  if (options.etherscan) {\n                      const { url, apiKey } = options.etherscan;\n                      network.attachPlugin(new EtherscanPlugin(url, apiKey));\n                  }\n      */\n      network.attachPlugin(new GasCostPlugin());\n      return network;\n    };\n    // Register the network by name and chain ID\n    Network.register(name, func);\n    Network.register(chainId, func);\n    if (options.altNames) {\n      options.altNames.forEach(function (name) {\n        Network.register(name, func);\n      });\n    }\n  }\n  registerEth(\"mainnet\", 1, {\n    ensNetwork: 1,\n    altNames: [\"homestead\"]\n  });\n  registerEth(\"ropsten\", 3, {\n    ensNetwork: 3\n  });\n  registerEth(\"rinkeby\", 4, {\n    ensNetwork: 4\n  });\n  registerEth(\"goerli\", 5, {\n    ensNetwork: 5\n  });\n  registerEth(\"kovan\", 42, {\n    ensNetwork: 42\n  });\n  registerEth(\"sepolia\", 11155111, {});\n  registerEth(\"classic\", 61, {});\n  registerEth(\"classicKotti\", 6, {});\n  registerEth(\"xdai\", 100, {\n    ensNetwork: 1\n  });\n  registerEth(\"optimism\", 10, {\n    ensNetwork: 1,\n    etherscan: {\n      url: \"https:/\\/api-optimistic.etherscan.io/\"\n    }\n  });\n  registerEth(\"optimism-goerli\", 420, {\n    etherscan: {\n      url: \"https:/\\/api-goerli-optimistic.etherscan.io/\"\n    }\n  });\n  registerEth(\"arbitrum\", 42161, {\n    ensNetwork: 1,\n    etherscan: {\n      url: \"https:/\\/api.arbiscan.io/\"\n    }\n  });\n  registerEth(\"arbitrum-goerli\", 421613, {\n    etherscan: {\n      url: \"https:/\\/api-goerli.arbiscan.io/\"\n    }\n  });\n  // Polygon has a 35 gwei maxPriorityFee requirement\n  registerEth(\"matic\", 137, {\n    ensNetwork: 1,\n    //        priorityFee: 35000000000,\n    etherscan: {\n      //            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n      url: \"https:/\\/api.polygonscan.com/\"\n    }\n  });\n  registerEth(\"matic-mumbai\", 80001, {\n    altNames: [\"maticMumbai\", \"maticmum\"],\n    //        priorityFee: 35000000000,\n    etherscan: {\n      //            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n      url: \"https:/\\/api-testnet.polygonscan.com/\"\n    }\n  });\n  registerEth(\"bnb\", 56, {\n    ensNetwork: 1,\n    etherscan: {\n      //            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n      url: \"http:/\\/api.bscscan.com\"\n    }\n  });\n  registerEth(\"bnbt\", 97, {\n    etherscan: {\n      //            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n      url: \"http:/\\/api-testnet.bscscan.com\"\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}