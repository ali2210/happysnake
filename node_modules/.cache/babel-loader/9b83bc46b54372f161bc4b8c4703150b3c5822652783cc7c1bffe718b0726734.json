{"ast":null,"code":"module.exports = function (getRequest, apiKey) {\n  return {\n    /**\n     * Returns the amount of Tokens a specific account owns.\n     * @param {string} address - Contract address\n     * @param {string} tokenname - Name of the token\n     * @param {string} contractaddress - Contract address\n     * @example\n     *     var supply = api.account.tokenbalance(\n     *       '0x4366ddc115d8cf213c564da36e64c8ebaa30cdbd',\n     *       '',\n     *       '0xe0b7927c4af23765cb51314a0e0521a9645f0e2a' // DGD contract address\n     * );\n     * @returns {Promise.<object>}\n     */\n    tokenbalance(address, tokenname, contractaddress) {\n      const module = 'account';\n      const action = 'tokenbalance';\n      const tag = 'latest';\n      var queryObject = {\n        module,\n        action,\n        apiKey,\n        tag\n      };\n      if (contractaddress) {\n        queryObject.contractaddress = contractaddress;\n      }\n      if (tokenname) {\n        queryObject.tokenname = tokenname;\n      }\n      if (address) {\n        queryObject.address = address;\n      }\n      var query = new URLSearchParams(queryObject).toString();\n      return getRequest(query);\n    },\n    /**\n     * Returns the balance of a sepcific account\n     * @param {string} address - Address\n     * @example\n     * var balance = api.account.balance('0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae');\n     * @returns {Promise.<object>}\n     */\n    balance(address) {\n      const module = 'account';\n      let action = 'balance';\n      const tag = 'latest';\n      if (typeof address !== 'string' && address && address.length) {\n        address = address.join(',');\n        action = 'balancemulti';\n      }\n      const queryObject = {\n        module,\n        action,\n        tag,\n        address,\n        apiKey\n      };\n      var query = new URLSearchParams(queryObject).toString();\n      return getRequest(query);\n    },\n    /**\n     * Get a list of internal transactions\n     * @param {string} txhash - Transaction hash. If specified then address will be ignored\n     * @param {string} address - Transaction address\n     * @param {string} startblock - start looking here\n     * @param {string} endblock - end looking there\n     * @param {string} sort - Sort asc/desc\n     * @example\n     * var txlist = api.account.txlistinternal('0x40eb908387324f2b575b4879cd9d7188f69c8fc9d87c901b9e2daaea4b442170');\n     * @returns {Promise.<object>}\n     */\n    txlistinternal(txhash, address, startblock, endblock, sort) {\n      const module = 'account';\n      const action = 'txlistinternal';\n      var queryObject = {\n        module,\n        action,\n        apiKey\n      };\n      if (!sort) {\n        sort = 'asc';\n      }\n      queryObject.sort = sort;\n      if (txhash) {\n        queryObject.txhash = txhash;\n      } else {\n        queryObject.address = address;\n        if (!startblock) {\n          startblock = 0;\n        }\n        queryObject.startblock = startblock;\n        if (!endblock) {\n          endblock = 'latest';\n        }\n        queryObject.endblock = endblock;\n      }\n      var query = new URLSearchParams(queryObject).toString();\n      return getRequest(query);\n    },\n    /**\n     * Get a list of transactions for a specfic address\n     * @param {string} address - Transaction address\n     * @param {string} startblock - start looking here\n     * @param {string} endblock - end looking there\n     * @param {number} page - Page number\n     * @param {number} offset - Max records to return\n     * @param {string} sort - Sort asc/desc\n     * @example\n     * var txlist = api.account.txlist('0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae', 1, 'latest', 1, 100, 'asc');\n     * @returns {Promise.<object>}\n     */\n    txlist(address, startblock, endblock, page, offset, sort) {\n      const module = 'account';\n      const action = 'txlist';\n      if (!startblock) {\n        startblock = 0;\n      }\n      if (!endblock) {\n        endblock = 'latest';\n      }\n      if (!page) {\n        page = 1;\n      }\n      if (!offset) {\n        offset = 100;\n      }\n      if (!sort) {\n        sort = 'asc';\n      }\n      const queryObject = {\n        module,\n        action,\n        startblock,\n        endblock,\n        page,\n        offset,\n        sort,\n        address,\n        apiKey\n      };\n      var query = new URLSearchParams(queryObject).toString();\n      return getRequest(query);\n    },\n    /**\n     * Get a list of blocks that a specific account has mineds\n     * @example\n     * var txlist = api.account.getminedblocks('0x9dd134d14d1e65f84b706d6f205cd5b1cd03a46b');\n     * @param {string} address - Transaction hash\n     */\n    getminedblocks(address) {\n      const module = 'account';\n      const action = 'getminedblocks';\n      const queryObject = {\n        module,\n        action,\n        address,\n        apiKey\n      };\n      var query = new URLSearchParams(queryObject).toString();\n      return getRequest(query);\n    },\n    /**\n    * [BETA] Get a list of \"ERC20 - Token Transfer Events\" by Address\n    * @param {string} address - Account address\n    * @param {string} startblock - start looking here\n    * @param {string} endblock - end looking there\n     * @param {number} page - Page number\n     * @param {number} offset - Max records to return\n     * @param {string} sort - Sort asc/desc\n    * @param {string} contractaddress - Address of ERC20 token contract (if not specified lists transfers for all tokens)\n    * @example\n    * var txlist = api.account.tokentx('0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae', '0x5F988D968cb76c34C87e6924Cc1Ef1dCd4dE75da', 1, 'latest', 'asc');\n    * @returns {Promise.<object>}\n    */\n    tokentx(address, contractaddress, startblock, endblock, page, offset, sort) {\n      const module = 'account';\n      const action = 'tokentx';\n      if (!startblock) {\n        startblock = 0;\n      }\n      if (!endblock) {\n        endblock = 'latest';\n      }\n      if (!page) {\n        page = 1;\n      }\n      if (!offset) {\n        offset = 100;\n      }\n      if (!sort) {\n        sort = 'asc';\n      }\n      var queryObject = {\n        module,\n        action,\n        startblock,\n        endblock,\n        page,\n        offset,\n        sort,\n        address,\n        apiKey\n      };\n      if (contractaddress) {\n        queryObject.contractaddress = contractaddress;\n      }\n      var query = new URLSearchParams(queryObject).toString();\n      return getRequest(query);\n    },\n    /**\n    * [BETA] Get a list of \"ERC721 - Token Transfer Events\" by Address\n    * @param {string} address - Account address\n    * @param {string} startblock - start looking here\n    * @param {string} endblock - end looking there\n     * @param {number} page - Page number\n     * @param {number} offset - Max records to return\n     * @param {string} sort - Sort asc/desc\n    * @param {string} contractaddress - Address of ERC721 token contract (if not specified lists transfers for all tokens)\n    * @example\n    * var txlist = api.account.tokenftntx('0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae', '0x5F988D968cb76c34C87e6924Cc1Ef1dCd4dE75da', 1, 'latest', 'asc');\n    * @returns {Promise.<object>}\n    */\n    tokennfttx(address, contractaddress, startblock, endblock, page, offset, sort) {\n      const module = 'account';\n      const action = 'tokennfttx';\n      if (!startblock) {\n        startblock = 0;\n      }\n      if (!endblock) {\n        endblock = 'latest';\n      }\n      if (!page) {\n        page = 1;\n      }\n      if (!offset) {\n        offset = 100;\n      }\n      if (!sort) {\n        sort = 'asc';\n      }\n      var queryObject = {\n        module,\n        action,\n        startblock,\n        endblock,\n        page,\n        offset,\n        sort,\n        address,\n        apiKey\n      };\n      if (contractaddress) {\n        queryObject.contractaddress = contractaddress;\n      }\n      var query = new URLSearchParams(queryObject).toString();\n      return getRequest(query);\n    }\n  };\n};","map":{"version":3,"names":["module","exports","getRequest","apiKey","tokenbalance","address","tokenname","contractaddress","action","tag","queryObject","query","URLSearchParams","toString","balance","length","join","txlistinternal","txhash","startblock","endblock","sort","txlist","page","offset","getminedblocks","tokentx","tokennfttx"],"sources":["/home/ali/Documents/run_prj/happysnake/node_modules/etherscan-api/lib/account.js"],"sourcesContent":["module.exports = function(getRequest, apiKey) {\n  return {\n    /**\n     * Returns the amount of Tokens a specific account owns.\n     * @param {string} address - Contract address\n     * @param {string} tokenname - Name of the token\n     * @param {string} contractaddress - Contract address\n     * @example\n     *     var supply = api.account.tokenbalance(\n     *       '0x4366ddc115d8cf213c564da36e64c8ebaa30cdbd',\n     *       '',\n     *       '0xe0b7927c4af23765cb51314a0e0521a9645f0e2a' // DGD contract address\n     * );\n     * @returns {Promise.<object>}\n     */\n    tokenbalance(address, tokenname, contractaddress) {\n\n      const module = 'account';\n      const action = 'tokenbalance';\n      const tag = 'latest';\n\n      var queryObject = {\n        module, action, apiKey, tag\n      };\n\n      if (contractaddress) {\n        queryObject.contractaddress = contractaddress;\n      }\n\n      if (tokenname) {\n        queryObject.tokenname = tokenname;\n      }\n\n      if (address) {\n        queryObject.address = address;\n      }\n\n      var query = new URLSearchParams(queryObject).toString();\n      return getRequest(query);\n    },\n    /**\n     * Returns the balance of a sepcific account\n     * @param {string} address - Address\n     * @example\n     * var balance = api.account.balance('0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae');\n     * @returns {Promise.<object>}\n     */\n    balance(address) {\n      const module = 'account';\n      let action = 'balance';\n      const tag = 'latest';\n\n      if (typeof address !== 'string' && address && address.length) {\n        address = address.join(',');\n        action = 'balancemulti';\n      }\n      const queryObject = {\n        module, action, tag, address, apiKey\n      };\n      var query = new URLSearchParams(queryObject).toString();\n      return getRequest(query);\n    },\n    /**\n     * Get a list of internal transactions\n     * @param {string} txhash - Transaction hash. If specified then address will be ignored\n     * @param {string} address - Transaction address\n     * @param {string} startblock - start looking here\n     * @param {string} endblock - end looking there\n     * @param {string} sort - Sort asc/desc\n     * @example\n     * var txlist = api.account.txlistinternal('0x40eb908387324f2b575b4879cd9d7188f69c8fc9d87c901b9e2daaea4b442170');\n     * @returns {Promise.<object>}\n     */\n    txlistinternal(txhash, address, startblock, endblock, sort) {\n      const module = 'account';\n      const action = 'txlistinternal';\n\n      var queryObject = {\n        module,\n        action,\n        apiKey\n      };\n\n      if (!sort) {\n        sort = 'asc';\n      }\n      queryObject.sort = sort;\n\n      if (txhash) {\n        queryObject.txhash = txhash;\n      } else {\n        queryObject.address = address;\n\n        if (!startblock) {\n          startblock = 0;\n        }\n        queryObject.startblock = startblock;\n\n        if (!endblock) {\n          endblock = 'latest';\n        }\n        queryObject.endblock = endblock;\n      }\n\n      var query = new URLSearchParams(queryObject).toString();\n\n      return getRequest(query);\n    },\n    /**\n     * Get a list of transactions for a specfic address\n     * @param {string} address - Transaction address\n     * @param {string} startblock - start looking here\n     * @param {string} endblock - end looking there\n     * @param {number} page - Page number\n     * @param {number} offset - Max records to return\n     * @param {string} sort - Sort asc/desc\n     * @example\n     * var txlist = api.account.txlist('0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae', 1, 'latest', 1, 100, 'asc');\n     * @returns {Promise.<object>}\n     */\n    txlist(address, startblock, endblock, page, offset, sort) {\n      const module = 'account';\n      const action = 'txlist';\n\n      if (!startblock) {\n        startblock = 0;\n      }\n\n      if (!endblock) {\n        endblock = 'latest';\n      }\n\n      if (!page) {\n        page = 1;\n      }\n\n      if (!offset) {\n        offset = 100;\n      }\n\n      if (!sort) {\n        sort = 'asc';\n      }\n      const queryObject = {\n        module, action, startblock, endblock, page, offset, sort, address, apiKey\n      };\n      var query = new URLSearchParams(queryObject).toString();\n      return getRequest(query);\n    },\n    /**\n     * Get a list of blocks that a specific account has mineds\n     * @example\n     * var txlist = api.account.getminedblocks('0x9dd134d14d1e65f84b706d6f205cd5b1cd03a46b');\n     * @param {string} address - Transaction hash\n     */\n    getminedblocks(address) {\n      const module = 'account';\n      const action = 'getminedblocks';\n\n      const queryObject = {\n        module, action, address, apiKey\n      };\n      \n      var query = new URLSearchParams(queryObject).toString();\n      return getRequest(query);\n    },\n     /**\n     * [BETA] Get a list of \"ERC20 - Token Transfer Events\" by Address\n     * @param {string} address - Account address\n     * @param {string} startblock - start looking here\n     * @param {string} endblock - end looking there\n      * @param {number} page - Page number\n      * @param {number} offset - Max records to return\n      * @param {string} sort - Sort asc/desc\n     * @param {string} contractaddress - Address of ERC20 token contract (if not specified lists transfers for all tokens)\n     * @example\n     * var txlist = api.account.tokentx('0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae', '0x5F988D968cb76c34C87e6924Cc1Ef1dCd4dE75da', 1, 'latest', 'asc');\n     * @returns {Promise.<object>}\n     */\n    tokentx(address, contractaddress, startblock, endblock, page, offset, sort) {\n      const module = 'account';\n      const action = 'tokentx';\n\n      if (!startblock) {\n        startblock = 0;\n      }\n\n      if (!endblock) {\n        endblock = 'latest';\n      }\n\n       if (!page) {\n         page = 1;\n       }\n\n       if (!offset) {\n         offset = 100;\n       }\n\n      if (!sort) {\n        sort = 'asc';\n      }\n\n      var queryObject = {\n        module, action, startblock, endblock, page, offset, sort, address, apiKey\n      };\n\n      if (contractaddress) {\n        queryObject.contractaddress = contractaddress;\n      }\n      var query = new URLSearchParams(queryObject).toString();\n      return getRequest(query);\n    },\n\n    /**\n    * [BETA] Get a list of \"ERC721 - Token Transfer Events\" by Address\n    * @param {string} address - Account address\n    * @param {string} startblock - start looking here\n    * @param {string} endblock - end looking there\n     * @param {number} page - Page number\n     * @param {number} offset - Max records to return\n     * @param {string} sort - Sort asc/desc\n    * @param {string} contractaddress - Address of ERC721 token contract (if not specified lists transfers for all tokens)\n    * @example\n    * var txlist = api.account.tokenftntx('0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae', '0x5F988D968cb76c34C87e6924Cc1Ef1dCd4dE75da', 1, 'latest', 'asc');\n    * @returns {Promise.<object>}\n    */\n   tokennfttx(address, contractaddress, startblock, endblock, page, offset, sort) {\n     const module = 'account';\n     const action = 'tokennfttx';\n\n     if (!startblock) {\n       startblock = 0;\n     }\n\n     if (!endblock) {\n       endblock = 'latest';\n     }\n\n      if (!page) {\n        page = 1;\n      }\n\n      if (!offset) {\n        offset = 100;\n      }\n\n     if (!sort) {\n       sort = 'asc';\n     }\n\n     var queryObject = {\n       module, action, startblock, endblock, page, offset, sort, address, apiKey\n     };\n\n     if (contractaddress) {\n       queryObject.contractaddress = contractaddress;\n     }\n     var query = new URLSearchParams(queryObject).toString();\n     return getRequest(query);\n   }\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}