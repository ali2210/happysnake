{"ast":null,"code":"import { assert } from \"../utils/index.js\";\nimport { AnkrProvider } from \"./provider-ankr.js\";\nimport { AlchemyProvider } from \"./provider-alchemy.js\";\nimport { CloudflareProvider } from \"./provider-cloudflare.js\";\nimport { EtherscanProvider } from \"./provider-etherscan.js\";\nimport { InfuraProvider } from \"./provider-infura.js\";\n//import { PocketProvider } from \"./provider-pocket.js\";\nimport { QuickNodeProvider } from \"./provider-quicknode.js\";\nimport { FallbackProvider } from \"./provider-fallback.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nimport { WebSocketProvider } from \"./provider-websocket.js\";\nfunction isWebSocketLike(value) {\n  return value && typeof value.send === \"function\" && typeof value.close === \"function\";\n}\nexport function getDefaultProvider(network, options) {\n  if (options == null) {\n    options = {};\n  }\n  if (typeof network === \"string\" && network.match(/^https?:/)) {\n    return new JsonRpcProvider(network);\n  }\n  if (typeof network === \"string\" && network.match(/^wss?:/) || isWebSocketLike(network)) {\n    return new WebSocketProvider(network);\n  }\n  var providers = [];\n  if (options.alchemy !== \"-\") {\n    try {\n      providers.push(new AlchemyProvider(network, options.alchemy));\n    } catch (error) {}\n  }\n  if (options.ankr !== \"-\" && options.ankr != null) {\n    try {\n      providers.push(new AnkrProvider(network, options.ankr));\n    } catch (error) {}\n  }\n  if (options.cloudflare !== \"-\") {\n    try {\n      providers.push(new CloudflareProvider(network));\n    } catch (error) {}\n  }\n  if (options.etherscan !== \"-\") {\n    try {\n      providers.push(new EtherscanProvider(network, options.etherscan));\n    } catch (error) {}\n  }\n  if (options.infura !== \"-\") {\n    try {\n      var projectId = options.infura;\n      var projectSecret = undefined;\n      if (typeof projectId === \"object\") {\n        projectSecret = projectId.projectSecret;\n        projectId = projectId.projectId;\n      }\n      providers.push(new InfuraProvider(network, projectId, projectSecret));\n    } catch (error) {}\n  }\n  /*\n      if (options.pocket !== \"-\") {\n          try {\n              let appId = options.pocket;\n              let secretKey: undefined | string = undefined;\n              let loadBalancer: undefined | boolean = undefined;\n              if (typeof(appId) === \"object\") {\n                  loadBalancer = !!appId.loadBalancer;\n                  secretKey = appId.secretKey;\n                  appId = appId.appId;\n              }\n              providers.push(new PocketProvider(network, appId, secretKey, loadBalancer));\n          } catch (error) { console.log(error); }\n      }\n  */\n  if (options.quicknode !== \"-\") {\n    try {\n      var token = options.quicknode;\n      providers.push(new QuickNodeProvider(network, token));\n    } catch (error) {}\n  }\n  assert(providers.length, \"unsupported default network\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"getDefaultProvider\"\n  });\n  if (providers.length === 1) {\n    return providers[0];\n  }\n  return new FallbackProvider(providers);\n}","map":null,"metadata":{},"sourceType":"module"}