{"ast":null,"code":"'use strict';\n\nvar util = require('util');\nvar assert = require('assert');\nvar Oracle = function (config) {\n  this.output = [];\n  this.params = [];\n  this.config = config || {};\n};\nvar Postgres = require('./postgres');\nvar Mssql = require('./mssql');\nutil.inherits(Oracle, Postgres);\nOracle.prototype._myClass = Oracle;\nOracle.prototype.visitReplace = function (replace) {\n  throw new Error('Oracle does not support REPLACE.');\n};\nOracle.prototype._aliasText = ' ';\nOracle.prototype._getParameterPlaceholder = function (index, value) {\n  /* jshint unused: false */\n  return ':' + index;\n};\nOracle.prototype.visitAlias = function (alias) {\n  var result = [this.visit(alias.value) + ' ' + this.quote(alias.alias)];\n  return result;\n};\nOracle.prototype.visitAlter = function (alter) {\n  var self = this;\n  var errMsg = 'ALTER TABLE cannot be used to perform multiple different operations in the same statement.';\n\n  // Implement our own add column:\n  //   PostgreSQL: ALTER TABLE \"name\" ADD COLUMN \"col1\", ADD COLUMN \"col2\"\n  //   Oracle:  ALTER TABLE \"name\" ADD (\"col1\", \"col2\")\n  function _addColumn() {\n    self._visitingAlter = true;\n    var table = self._queryNode.table;\n    self._visitingAddColumn = true;\n    var result = 'ALTER TABLE ' + self.visit(table.toNode()) + ' ADD (' + self.visit(alter.nodes[0].nodes[0]);\n    for (var i = 1, len = alter.nodes.length; i < len; i++) {\n      var node = alter.nodes[i];\n      assert(node.type == 'ADD COLUMN', errMsg);\n      result += ', ' + self.visit(node.nodes[0]);\n    }\n    result += ')';\n    self._visitingAddColumn = false;\n    self._visitingAlter = false;\n    return [result];\n  }\n\n  // Implement our own drop column:\n  //   PostgreSQL: ALTER TABLE \"name\" DROP COLUMN \"col1\", DROP COLUMN \"col2\"\n  //   Oracle:  ALTER TABLE \"name\" DROP (\"col1\", \"col2\")\n  function _dropColumn() {\n    self._visitingAlter = true;\n    var table = self._queryNode.table;\n    var result = ['ALTER TABLE', self.visit(table.toNode())];\n    var columns = 'DROP (' + self.visit(alter.nodes[0].nodes[0]);\n    for (var i = 1, len = alter.nodes.length; i < len; i++) {\n      var node = alter.nodes[i];\n      assert(node.type == 'DROP COLUMN', errMsg);\n      columns += ', ' + self.visit(node.nodes[0]);\n    }\n    columns += ')';\n    result.push(columns);\n    self._visitingAlter = false;\n    return result;\n  }\n  if (isAlterAddColumn(alter)) return _addColumn();\n  if (isAlterDropColumn(alter)) return _dropColumn();\n  return Oracle.super_.prototype.visitAlter.call(this, alter);\n};\nOracle.prototype.visitTable = function (tableNode) {\n  var table = tableNode.table;\n  var txt = \"\";\n  if (table.getSchema()) {\n    txt = this.quote(table.getSchema());\n    txt += '.';\n  }\n  txt += this.quote(table.getName());\n  if (table.alias) {\n    txt += ' ' + this.quote(table.alias);\n  }\n  return [txt];\n};\nOracle.prototype.visitCascade = function () {\n  return ['CASCADE CONSTRAINTS'];\n};\nOracle.prototype.visitRestrict = function () {\n  throw new Error('Oracle do not support RESTRICT in DROP TABLE');\n};\nOracle.prototype.visitDrop = function (drop) {\n  if (!isDropIfExists(drop)) {\n    return Oracle.super_.prototype.visitDrop.call(this, drop);\n  }\n  // Implement our own drop if exists:\n  //   PostgreSQL: DROP TABLE IF EXISTS \"group\"\n  //   Oracle:\n  //     BEGIN\n  //          EXECUTE IMMEDIATE 'DROP TABLE POST';\n  //     EXCEPTION\n  //          WHEN OTHERS THEN\n  //                 IF SQLCODE != -942 THEN\n  //                      RAISE;\n  //                 END IF;\n  //     END;\n  var table = this._queryNode.table;\n  var tableResult = this.visit(table.toNode());\n  var dropResult = ['DROP TABLE'];\n  dropResult.push(tableResult);\n  return [\"BEGIN EXECUTE IMMEDIATE '\" + dropResult.join(' ') + \"'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;\"];\n};\nOracle.prototype.visitCreate = function (create) {\n  var isNotExists = isCreateIfNotExists(create);\n  //var isTemporary=isCreateTemporary(create)\n  var createText = Oracle.super_.prototype.visitCreate.call(this, create);\n  if (isNotExists) {\n    // Implement our own create if not exists:\n    //   PostgreSQL: CREATE TABLE IF NOT EXISTS \"group\" (\"id\" varchar(100))\n    //   Oracle:\n    //     BEGIN\n    //          EXECUTE IMMEDIATE 'CREATE TABLE ...';\n    //     EXCEPTION\n    //          WHEN OTHERS THEN\n    //                 IF SQLCODE != -955 THEN\n    //                      RAISE;\n    //                 END IF;\n    //     END;\n\n    createText = \"BEGIN EXECUTE IMMEDIATE '\" + createText.join(' ').replace(' IF NOT EXISTS', '') + \"'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -955 THEN RAISE; END IF; END;\";\n  }\n  return createText;\n};\nOracle.prototype.visitBinary = function (binary) {\n  if (binary.operator === '@@') {\n    var self = this;\n    var text = '(INSTR (' + this.visit(binary.left) + ', ';\n    text += this.visit(binary.right);\n    text += ') > 0)';\n    return [text];\n  }\n  if (!isRightSideArray(binary)) {\n    return Oracle.super_.prototype.visitBinary.call(this, binary);\n  }\n  if (binary.operator == 'IN' || binary.operator == 'NOT IN') {\n    return Oracle.super_.prototype.visitBinary.call(this, binary);\n  }\n  throw new Error('Oracle does not support arrays in this type of expression.');\n};\nOracle.prototype.visitModifier = function (node) {\n  var ret = Oracle.super_.prototype.visitModifier.call(this, node);\n  if (ret.indexOf('OFFSET') >= 0) {\n    ret.push('ROWS');\n  }\n  if (ret.indexOf('LIMIT') >= 0) {\n    ret[0] = 'FETCH NEXT';\n    ret.push('ROWS ONLY');\n  }\n  return ret;\n};\nOracle.prototype.visitQueryHelper = function (actions, targets, filters) {\n  var output = Oracle.super_.prototype.visitQueryHelper.call(this, actions, targets, filters);\n\n  //In Oracle, OFFSET must come before FETCH NEXT (limit)\n  //Change positions, if both are present and not done already\n  var offset = output.indexOf('OFFSET');\n  var limit = output.indexOf('FETCH NEXT');\n  if (offset != -1 && limit != -1 && offset > limit) {\n    var temp = [output[offset], output[offset + 1], output[offset + 2]];\n    output[offset] = output[limit];\n    output[offset + 1] = output[limit + 1];\n    output[offset + 2] = output[limit + 2];\n    output[limit] = temp[0];\n    output[limit + 1] = temp[1];\n    output[limit + 2] = temp[2];\n  }\n  return this.output;\n};\nOracle.prototype.visitColumn = function (columnNode) {\n  var self = this;\n  var table;\n  var inSelectClause;\n  function _arrayAgg() {\n    throw new Error(\"Oracle does not support array_agg.\");\n  }\n  function _countStar() {\n    // Implement our own since count(table.*) is invalid in Oracle\n    var result = 'COUNT(*)';\n    if (inSelectClause && columnNode.alias) {\n      result += self._aliasText + self.quote(columnNode.alias);\n    }\n    return result;\n  }\n  table = columnNode.table;\n  inSelectClause = !this._selectOrDeleteEndIndex;\n  if (isCountStarExpression(columnNode)) return _countStar();\n  if (inSelectClause && table && !table.alias && columnNode.asArray) return _arrayAgg();\n  return Oracle.super_.prototype.visitColumn.call(this, columnNode);\n};\nOracle.prototype.visitReturning = function () {\n  // TODO: need to add some code to the INSERT clause to support this since its the equivalent of the OUTPUT clause\n  // in MS SQL which appears before the values, not at the end of the statement.\n  throw new Error('Returning clause is not yet supported for Oracle.');\n};\nOracle.prototype._getParameterValue = function (value) {\n  if (Buffer.isBuffer(value)) {\n    value = \"utl_raw.cast_to_varchar2(hextoraw('\" + value.toString('hex') + \"'))\";\n  } else {\n    value = Oracle.super_.prototype._getParameterValue.call(this, value);\n    //value = Postgres.prototype._getParameterValue.call(this, value);\n  }\n\n  return value;\n};\nOracle.prototype.visitIndexes = function (node) {\n  var tableName = this._queryNode.table.getName();\n  var schemaName = this._queryNode.table.getSchema();\n  var indexes = \"SELECT * FROM USER_INDEXES WHERE TABLE_NAME = '\" + tableName + \"'\";\n  if (schemaName) {\n    indexes += \" AND TABLE_OWNER = '\" + schemaName + \"'\";\n  }\n  return indexes;\n};\nOracle.prototype.visitDropIndex = function (node) {\n  var result = ['DROP INDEX'];\n  var schemaName = node.table.getSchema();\n  if (schemaName) {\n    result.push(this.quote(schemaName) + \".\");\n  }\n  result.push(this.quote(node.options.indexName));\n  return result;\n};\n\n// Using same CASE implementation as MSSQL\nOracle.prototype.visitCase = function (caseExp) {\n  return Mssql.prototype.visitCase.call(this, caseExp);\n};\nOracle.prototype.visitOnConflict = function (onConflict) {\n  throw new Error('Oracle does not allow onConflict clause.');\n};\nfunction isCreateIfNotExists(create) {\n  if (create.nodes.length === 0) return false;\n  if (create.nodes[0].type != 'IF NOT EXISTS') return false;\n  return true;\n}\nfunction isCreateTemporary(create) {\n  return create.options.isTemporary;\n}\nfunction isDropIfExists(drop) {\n  if (drop.nodes.length === 0) return false;\n  if (drop.nodes[0].type != 'IF EXISTS') return false;\n  return true;\n}\n\n// SQL Server does not support array expressions except in the IN clause.\nfunction isRightSideArray(binary) {\n  return Array.isArray(binary.right);\n}\nfunction isCountStarExpression(columnNode) {\n  if (!columnNode.aggregator) return false;\n  if (columnNode.aggregator.toLowerCase() != 'count') return false;\n  if (!columnNode.star) return false;\n  return true;\n}\nfunction isAlterAddColumn(alter) {\n  if (alter.nodes.length === 0) return false;\n  if (alter.nodes[0].type != 'ADD COLUMN') return false;\n  return true;\n}\nfunction isAlterDropColumn(alter) {\n  if (alter.nodes.length === 0) return false;\n  if (alter.nodes[0].type != 'DROP COLUMN') return false;\n  return true;\n}\nmodule.exports = Oracle;","map":{"version":3,"names":["util","require","assert","Oracle","config","output","params","Postgres","Mssql","inherits","prototype","_myClass","visitReplace","replace","Error","_aliasText","_getParameterPlaceholder","index","value","visitAlias","alias","result","visit","quote","visitAlter","alter","self","errMsg","_addColumn","_visitingAlter","table","_queryNode","_visitingAddColumn","toNode","nodes","i","len","length","node","type","_dropColumn","columns","push","isAlterAddColumn","isAlterDropColumn","super_","call","visitTable","tableNode","txt","getSchema","getName","visitCascade","visitRestrict","visitDrop","drop","isDropIfExists","tableResult","dropResult","join","visitCreate","create","isNotExists","isCreateIfNotExists","createText","visitBinary","binary","operator","text","left","right","isRightSideArray","visitModifier","ret","indexOf","visitQueryHelper","actions","targets","filters","offset","limit","temp","visitColumn","columnNode","inSelectClause","_arrayAgg","_countStar","_selectOrDeleteEndIndex","isCountStarExpression","asArray","visitReturning","_getParameterValue","Buffer","isBuffer","toString","visitIndexes","tableName","schemaName","indexes","visitDropIndex","options","indexName","visitCase","caseExp","visitOnConflict","onConflict","isCreateTemporary","isTemporary","Array","isArray","aggregator","toLowerCase","star","module","exports"],"sources":["/home/ali/Documents/run_prj/happysnake/node_modules/sql/lib/dialect/oracle.js"],"sourcesContent":["'use strict';\n\nvar util = require('util');\nvar assert = require('assert');\n\nvar Oracle = function(config) {\n  this.output = [];\n  this.params = [];\n  this.config = config || {};\n};\n\nvar Postgres = require('./postgres');\n\nvar Mssql = require('./mssql');\n\nutil.inherits(Oracle, Postgres);\n\nOracle.prototype._myClass = Oracle;\n\nOracle.prototype.visitReplace = function(replace) {\n  throw new Error('Oracle does not support REPLACE.');\n};\n\nOracle.prototype._aliasText = ' ';\nOracle.prototype._getParameterPlaceholder = function(index, value) {\n  /* jshint unused: false */\n  return ':' + index;\n};\n\nOracle.prototype.visitAlias = function(alias) {\n  var result = [this.visit(alias.value) + ' ' + this.quote(alias.alias)];\n  return result;\n};\n\nOracle.prototype.visitAlter = function(alter) {\n  var self=this;\n  var errMsg='ALTER TABLE cannot be used to perform multiple different operations in the same statement.';\n\n  // Implement our own add column:\n  //   PostgreSQL: ALTER TABLE \"name\" ADD COLUMN \"col1\", ADD COLUMN \"col2\"\n  //   Oracle:  ALTER TABLE \"name\" ADD (\"col1\", \"col2\")\n  function _addColumn(){\n    self._visitingAlter = true;\n    var table = self._queryNode.table;\n    self._visitingAddColumn = true;\n    var result='ALTER TABLE '+self.visit(table.toNode())+' ADD ('+self.visit(alter.nodes[0].nodes[0]);\n    for (var i= 1,len=alter.nodes.length; i<len; i++){\n      var node=alter.nodes[i];\n      assert(node.type=='ADD COLUMN',errMsg);\n      result+=', '+self.visit(node.nodes[0]);\n    }\n    result+=')';\n    self._visitingAddColumn = false;\n    self._visitingAlter = false;\n    return [result];\n  }\n\n  // Implement our own drop column:\n  //   PostgreSQL: ALTER TABLE \"name\" DROP COLUMN \"col1\", DROP COLUMN \"col2\"\n  //   Oracle:  ALTER TABLE \"name\" DROP (\"col1\", \"col2\")\n  function _dropColumn(){\n    self._visitingAlter = true;\n    var table = self._queryNode.table;\n    var result=[\n      'ALTER TABLE',\n      self.visit(table.toNode())\n    ];\n    var columns='DROP ('+self.visit(alter.nodes[0].nodes[0]);\n    for (var i= 1,len=alter.nodes.length; i<len; i++){\n      var node=alter.nodes[i];\n      assert(node.type=='DROP COLUMN',errMsg);\n      columns+=', '+self.visit(node.nodes[0]);\n    }\n    columns+=')';\n    result.push(columns);\n    self._visitingAlter = false;\n    return result;\n  }\n\n  if (isAlterAddColumn(alter)) return _addColumn();\n  if (isAlterDropColumn(alter)) return _dropColumn();\n  return Oracle.super_.prototype.visitAlter.call(this, alter);\n};\n\nOracle.prototype.visitTable = function(tableNode) {\n  var table = tableNode.table;\n  var txt=\"\";\n  if(table.getSchema()) {\n    txt = this.quote(table.getSchema());\n    txt += '.';\n  }\n  txt += this.quote(table.getName());\n  if(table.alias) {\n    txt += ' ' + this.quote(table.alias);\n  }\n  return [txt];\n};\n\nOracle.prototype.visitCascade = function() {\n  return ['CASCADE CONSTRAINTS'];\n};\n\nOracle.prototype.visitRestrict = function() {\n  throw new Error('Oracle do not support RESTRICT in DROP TABLE');\n};\n\nOracle.prototype.visitDrop = function(drop) {\n  if (!isDropIfExists(drop)) {\n    return Oracle.super_.prototype.visitDrop.call(this, drop);\n  }\n  // Implement our own drop if exists:\n  //   PostgreSQL: DROP TABLE IF EXISTS \"group\"\n  //   Oracle:\n  //     BEGIN\n  //          EXECUTE IMMEDIATE 'DROP TABLE POST';\n  //     EXCEPTION\n  //          WHEN OTHERS THEN\n  //                 IF SQLCODE != -942 THEN\n  //                      RAISE;\n  //                 END IF;\n  //     END;\n  var table = this._queryNode.table;\n  var tableResult=this.visit(table.toNode());\n\n  var dropResult = ['DROP TABLE'];\n  dropResult.push(tableResult);\n\n  return [\"BEGIN EXECUTE IMMEDIATE '\"+dropResult.join(' ')+\"'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;\"];\n};\n\nOracle.prototype.visitCreate = function(create) {\n  var isNotExists=isCreateIfNotExists(create);\n  //var isTemporary=isCreateTemporary(create)\n  var createText = Oracle.super_.prototype.visitCreate.call(this, create);\n  if (isNotExists) {\n      // Implement our own create if not exists:\n      //   PostgreSQL: CREATE TABLE IF NOT EXISTS \"group\" (\"id\" varchar(100))\n      //   Oracle:\n      //     BEGIN\n      //          EXECUTE IMMEDIATE 'CREATE TABLE ...';\n      //     EXCEPTION\n      //          WHEN OTHERS THEN\n      //                 IF SQLCODE != -955 THEN\n      //                      RAISE;\n      //                 END IF;\n      //     END;\n\n    createText = \"BEGIN EXECUTE IMMEDIATE '\"+createText.join(' ').replace(' IF NOT EXISTS','')+\"'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -955 THEN RAISE; END IF; END;\";\n  }\n\n  return createText;\n};\n\nOracle.prototype.visitBinary = function(binary) {\n  if(binary.operator === '@@'){\n    var self = this;\n    var text = '(INSTR (' + this.visit(binary.left) + ', ';\n    text += this.visit(binary.right);\n    text += ') > 0)';\n    return [text];\n  }\n\n  if (!isRightSideArray(binary)){\n    return Oracle.super_.prototype.visitBinary.call(this, binary);\n  }\n  if (binary.operator=='IN' || binary.operator=='NOT IN'){\n    return Oracle.super_.prototype.visitBinary.call(this, binary);\n  }\n  throw new Error('Oracle does not support arrays in this type of expression.');\n};\n\nOracle.prototype.visitModifier = function(node) {\n  var ret = Oracle.super_.prototype.visitModifier.call(this, node);\n  if (ret.indexOf('OFFSET') >= 0) {\n    ret.push('ROWS');\n  }\n  if (ret.indexOf('LIMIT') >= 0) {\n    ret[0] = 'FETCH NEXT';\n    ret.push('ROWS ONLY');\n  }\n  return ret;\n};\n\nOracle.prototype.visitQueryHelper=function(actions,targets,filters){\n  var output = Oracle.super_.prototype.visitQueryHelper.call(this,actions,targets,filters);\n\n  //In Oracle, OFFSET must come before FETCH NEXT (limit)\n  //Change positions, if both are present and not done already\n  var offset = output.indexOf('OFFSET');\n  var limit = output.indexOf('FETCH NEXT');\n  if (offset != -1 && limit != -1 && offset > limit){\n    var temp = [output[offset], output[offset+1], output[offset+2]];\n    output[offset] = output[limit];\n    output[offset+1] = output[limit+1];\n    output[offset+2] = output[limit+2];\n    output[limit] = temp[0];\n    output[limit+1] = temp[1];\n    output[limit+2] = temp[2];\n  }\n\n  return this.output;\n};\n\nOracle.prototype.visitColumn = function(columnNode) {\n  var self=this;\n  var table;\n  var inSelectClause;\n\n  function _arrayAgg(){\n    throw new Error(\"Oracle does not support array_agg.\");\n  }\n\n  function _countStar(){\n    // Implement our own since count(table.*) is invalid in Oracle\n    var result='COUNT(*)';\n    if(inSelectClause && columnNode.alias) {\n      result += self._aliasText + self.quote(columnNode.alias);\n    }\n    return result;\n  }\n\n  table = columnNode.table;\n  inSelectClause = !this._selectOrDeleteEndIndex;\n  if (isCountStarExpression(columnNode)) return _countStar();\n  if (inSelectClause && table && !table.alias && columnNode.asArray) return _arrayAgg();\n  return Oracle.super_.prototype.visitColumn.call(this, columnNode);\n};\n\n\nOracle.prototype.visitReturning = function() {\n  // TODO: need to add some code to the INSERT clause to support this since its the equivalent of the OUTPUT clause\n  // in MS SQL which appears before the values, not at the end of the statement.\n  throw new Error('Returning clause is not yet supported for Oracle.');\n};\n\n\nOracle.prototype._getParameterValue = function(value) {\n  if (Buffer.isBuffer(value)) {\n    value = \"utl_raw.cast_to_varchar2(hextoraw('\" + value.toString('hex') + \"'))\";\n  } else {\n    value = Oracle.super_.prototype._getParameterValue.call(this, value);\n    //value = Postgres.prototype._getParameterValue.call(this, value);\n  }\n  return value;\n};\n\n\nOracle.prototype.visitIndexes = function(node) {\n\n  var tableName = this._queryNode.table.getName();\n  var schemaName = this._queryNode.table.getSchema();\n\n  var indexes = \"SELECT * FROM USER_INDEXES WHERE TABLE_NAME = '\" + tableName + \"'\";\n\n  if (schemaName) {\n    indexes += \" AND TABLE_OWNER = '\" + schemaName + \"'\";\n  }\n\n  return indexes;\n};\n\n\nOracle.prototype.visitDropIndex = function(node) {\n  var result = [ 'DROP INDEX' ];\n  var schemaName = node.table.getSchema();\n  if (schemaName) {\n    result.push(this.quote(schemaName) + \".\");\n  }\n\n  result.push(this.quote(node.options.indexName));\n\n  return result;\n};\n\n// Using same CASE implementation as MSSQL\nOracle.prototype.visitCase = function(caseExp) {\n\n  return Mssql.prototype.visitCase.call(this, caseExp);\n};\n\nOracle.prototype.visitOnConflict = function(onConflict) {\n  throw new Error('Oracle does not allow onConflict clause.');\n};\n\nfunction isCreateIfNotExists(create){\n  if (create.nodes.length===0) return false;\n  if (create.nodes[0].type!='IF NOT EXISTS') return false;\n  return true;\n}\n\nfunction isCreateTemporary(create){\n  return create.options.isTemporary;\n}\n\nfunction isDropIfExists(drop){\n  if (drop.nodes.length===0) return false;\n  if (drop.nodes[0].type!='IF EXISTS') return false;\n  return true;\n}\n\n// SQL Server does not support array expressions except in the IN clause.\nfunction isRightSideArray(binary){\n  return Array.isArray(binary.right);\n}\n\nfunction isCountStarExpression(columnNode){\n  if (!columnNode.aggregator) return false;\n  if (columnNode.aggregator.toLowerCase()!='count') return false;\n  if (!columnNode.star) return false;\n  return true;\n}\n\nfunction isAlterAddColumn(alter){\n  if (alter.nodes.length===0) return false;\n  if (alter.nodes[0].type!='ADD COLUMN') return false;\n  return true;\n}\n\nfunction isAlterDropColumn(alter){\n  if (alter.nodes.length===0) return false;\n  if (alter.nodes[0].type!='DROP COLUMN') return false;\n  return true;\n}\n\nmodule.exports = Oracle;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}