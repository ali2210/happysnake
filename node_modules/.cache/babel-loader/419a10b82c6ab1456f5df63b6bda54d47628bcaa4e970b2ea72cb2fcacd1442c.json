{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar Column = require(\"./column\");\nvar FunctionCall = require('./node/functionCall');\nvar ArrayCall = require('./node/arrayCall');\nvar functions = require('./functions');\nvar getDialect = require('./dialect');\nvar Query = require('./node/query');\nvar sliced = require('sliced');\nvar Table = require('./table');\nvar Interval = require('./node/interval');\n\n// default dialect is postgres\nvar DEFAULT_DIALECT = 'postgres';\nvar Sql = function (dialect, config) {\n  this.setDialect(dialect || DEFAULT_DIALECT, config);\n\n  // attach the standard SQL functions to this instance\n  this.functions = functions.getStandardFunctions();\n  this.function = functions.getFunctions;\n};\n\n// Define a table\nSql.prototype.define = function (def) {\n  def = _.defaults(def || {}, {\n    sql: this\n  });\n  return Table.define(def);\n};\n\n// Returns a function call creator\nSql.prototype.functionCallCreator = function (name) {\n  return function () {\n    return new FunctionCall(name, sliced(arguments));\n  };\n};\n\n// Returns a bracketed call creator literal\nSql.prototype.array = function () {\n  var arrayCall = new ArrayCall(sliced(arguments));\n  arrayCall.sql = this;\n  return arrayCall;\n};\n\n// Returns a select statement\nSql.prototype.select = function () {\n  var query = new Query({\n    sql: this\n  });\n  query.select.apply(query, arguments);\n  return query;\n};\n\n// Returns an interval clause\nSql.prototype.interval = function () {\n  var interval = new Interval(sliced(arguments));\n  return interval;\n};\n\n// Set the dialect\nSql.prototype.setDialect = function (dialect, config) {\n  this.dialect = getDialect(dialect);\n  this.dialectName = dialect;\n  this.config = config;\n  return this;\n};\n\n// Create a constant Column (for use in SELECT)\nSql.prototype.constant = function (value) {\n  var config = {\n    name: \"constant\",\n    property: \"constant\",\n    isConstant: true,\n    constantValue: value\n  };\n  var cn = new Column(config);\n  return cn;\n};\n\n// back compat shim for the Sql class constructor\nvar create = function (dialect, config) {\n  return new Sql(dialect, {});\n};\nmodule.exports = new Sql(DEFAULT_DIALECT, {});\nmodule.exports.create = create;\nmodule.exports.Sql = Sql;\nmodule.exports.Table = Table;","map":{"version":3,"names":["_","require","Column","FunctionCall","ArrayCall","functions","getDialect","Query","sliced","Table","Interval","DEFAULT_DIALECT","Sql","dialect","config","setDialect","getStandardFunctions","function","getFunctions","prototype","define","def","defaults","sql","functionCallCreator","name","arguments","array","arrayCall","select","query","apply","interval","dialectName","constant","value","property","isConstant","constantValue","cn","create","module","exports"],"sources":["/home/ali/Documents/run_prj/happysnake/node_modules/sql/lib/index.js"],"sourcesContent":["'use strict';\r\n\r\nvar _            = require('lodash');\r\nvar Column \t\t = require(\"./column\");\r\nvar FunctionCall = require('./node/functionCall');\r\nvar ArrayCall    = require('./node/arrayCall');\r\nvar functions    = require('./functions');\r\nvar getDialect   = require('./dialect');\r\nvar Query        = require('./node/query');\r\nvar sliced       = require('sliced');\r\nvar Table        = require('./table');\r\nvar Interval     = require('./node/interval');\r\n\r\n// default dialect is postgres\r\nvar DEFAULT_DIALECT = 'postgres';\r\n\r\nvar Sql = function(dialect, config) {\r\n  this.setDialect(dialect || DEFAULT_DIALECT, config);\r\n\r\n  // attach the standard SQL functions to this instance\r\n  this.functions = functions.getStandardFunctions();\r\n  this.function = functions.getFunctions;\r\n};\r\n\r\n// Define a table\r\nSql.prototype.define = function(def) {\r\n  def = _.defaults(def || {}, {\r\n    sql: this\r\n  });\r\n\r\n  return Table.define(def);\r\n};\r\n\r\n// Returns a function call creator\r\nSql.prototype.functionCallCreator = function(name) {\r\n  return function() {\r\n    return new FunctionCall(name, sliced(arguments));\r\n  };\r\n};\r\n\r\n// Returns a bracketed call creator literal\r\nSql.prototype.array = function() {\r\n  var arrayCall = new ArrayCall(sliced(arguments));\r\n  arrayCall.sql = this;\r\n  return arrayCall;\r\n};\r\n\r\n// Returns a select statement\r\nSql.prototype.select = function() {\r\n  var query = new Query({sql: this});\r\n  query.select.apply(query, arguments);\r\n  return query;\r\n};\r\n\r\n// Returns an interval clause\r\nSql.prototype.interval = function() {\r\n  var interval = new Interval(sliced(arguments));\r\n  return interval;\r\n};\r\n\r\n// Set the dialect\r\nSql.prototype.setDialect = function(dialect, config) {\r\n  this.dialect     = getDialect(dialect);\r\n  this.dialectName = dialect;\r\n  this.config      = config;\r\n\r\n  return this;\r\n};\r\n\r\n// Create a constant Column (for use in SELECT)\r\nSql.prototype.constant = function(value) {\r\n  var config={\r\n    name:\"constant\",\r\n    property:\"constant\",\r\n    isConstant:true,\r\n    constantValue:value,\r\n  };\r\n  var cn = new Column(config);\r\n  return cn;\r\n};\r\n\r\n\r\n// back compat shim for the Sql class constructor\r\nvar create = function(dialect, config) {\r\n  return new Sql(dialect, {});\r\n};\r\n\r\nmodule.exports = new Sql(DEFAULT_DIALECT, {});\r\nmodule.exports.create = create;\r\nmodule.exports.Sql = Sql;\r\nmodule.exports.Table = Table;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}