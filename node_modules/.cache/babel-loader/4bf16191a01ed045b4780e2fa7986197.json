{"ast":null,"code":"/**\n *  An **HMAC** enables verification that a given key was used\n *  to authenticate a payload.\n *\n *  See: [[link-wiki-hmac]]\n *\n *  @_subsection: api/crypto:HMAC  [about-hmac]\n */\nimport { createHmac } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nvar locked = false;\nvar _computeHmac = function _computeHmac(algorithm, key, data) {\n  return createHmac(algorithm, key).update(data).digest();\n};\nvar __computeHmac = _computeHmac;\n/**\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\n *  %%algo%% used for compression.\n *\n *  @example:\n *    key = id(\"some-secret\")\n *\n *    // Compute the HMAC\n *    computeHmac(\"sha256\", key, \"0x1337\")\n *    //_result:\n *\n *    // To compute the HMAC of UTF-8 data, the data must be\n *    // converted to UTF-8 bytes\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\n *    //_result:\n *\n */\nexport function computeHmac(algorithm, _key, _data) {\n  var key = getBytes(_key, \"key\");\n  var data = getBytes(_data, \"data\");\n  return hexlify(__computeHmac(algorithm, key, data));\n}\ncomputeHmac._ = _computeHmac;\ncomputeHmac.lock = function () {\n  locked = true;\n};\ncomputeHmac.register = function (func) {\n  if (locked) {\n    throw new Error(\"computeHmac is locked\");\n  }\n  __computeHmac = func;\n};\nObject.freeze(computeHmac);","map":null,"metadata":{},"sourceType":"module"}