{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar alias = require('./alias');\nvar assert = require('assert');\nvar sliced = require('sliced');\nvar util = require('util');\nvar valueExpressionMixin = require('./valueExpression');\nvar Node = require('./');\nvar Select = require('./select');\nvar From = require('./from');\nvar Where = require('./where');\nvar OrderBy = require('./orderBy');\nvar GroupBy = require('./groupBy');\nvar Having = require('./having');\nvar Insert = require('./insert');\nvar Replace = require('./replace');\nvar Update = require('./update');\nvar Delete = require('./delete');\nvar Returning = require('./returning');\nvar OnDuplicate = require('./onDuplicate');\nvar OnConflict = require('./onConflict');\nvar ForUpdate = require('./forUpdate');\nvar ForShare = require('./forShare');\nvar Create = require('./create');\nvar Drop = require('./drop');\nvar Truncate = require('./truncate');\nvar Distinct = require('./distinct');\nvar DistinctOn = require('./distinctOn');\nvar Alter = require('./alter');\nvar AddColumn = require('./addColumn');\nvar DropColumn = require('./dropColumn');\nvar RenameColumn = require('./renameColumn');\nvar Rename = require('./rename');\nvar Column = require('../column');\nvar ParameterNode = require('./parameter');\nvar PrefixUnaryNode = require('./prefixUnary');\nvar IfExists = require('./ifExists');\nvar IfNotExists = require('./ifNotExists');\nvar OrIgnore = require('./orIgnore');\nvar Cascade = require('./cascade');\nvar Restrict = require('./restrict');\nvar Indexes = require('./indexes');\nvar CreateIndex = require('./createIndex');\nvar DropIndex = require('./dropIndex');\nvar Table = require('./table');\nvar CreateView = require('./createView');\nvar JoinNode = require('./join');\nvar Modifier = Node.define({\n  constructor: function (table, type, count) {\n    this.table = table;\n    this.type = type;\n    this.count = count;\n  }\n});\n\n// get the first element of an arguments if it is an array, else return arguments as an array\nvar getArrayOrArgsAsArray = function (args) {\n  if (util.isArray(args[0])) {\n    return args[0];\n  }\n  return sliced(args);\n};\nvar Query = Node.define({\n  type: 'QUERY',\n  constructor: function (table) {\n    Node.call(this);\n    this.table = table;\n    if (table) {\n      this.sql = table.sql;\n    }\n  },\n  select: function () {\n    var select;\n    if (this._select) {\n      select = this._select;\n    } else {\n      select = this._select = new Select();\n      this.add(select);\n    }\n\n    //allow things like .select(a.star(), [ a.id, a.name ])\n    //this will flatten them into a single array\n    var args = sliced(arguments).reduce(function (cur, next) {\n      if (util.isArray(next)) {\n        return cur.concat(next);\n      }\n      cur.push(next);\n      return cur;\n    }, []);\n    select.addAll(args);\n\n    // if this is a subquery then add reference to this column\n    if (this.type === 'SUBQUERY') {\n      for (var j = 0; j < select.nodes.length; j++) {\n        var name = select.nodes[j].alias || select.nodes[j].name;\n        var col = new Column(select.nodes[j]);\n        col.name = name;\n        col.property = name;\n        col.table = this;\n        if (this[name] === undefined) {\n          this[name] = col;\n        }\n      }\n    }\n    return this;\n  },\n  star: function () {\n    assert(this.type === 'SUBQUERY', 'star() can only be used on a subQuery');\n    return new Column({\n      table: this,\n      star: true\n    });\n  },\n  from: function () {\n    var tableNodes = arguments;\n    if (Array.isArray(arguments[0])) {\n      tableNodes = arguments[0];\n    }\n    for (var i = 0; i < tableNodes.length; i++) {\n      this.add(new From().add(tableNodes[i]));\n    }\n    return this;\n  },\n  leftJoin: function (other) {\n    assert(this.type === 'SUBQUERY', 'leftJoin() can only be used on a subQuery');\n    return new JoinNode('LEFT', this, other.toNode());\n  },\n  where: function (node) {\n    if (arguments.length > 1) {\n      // allow multiple where clause arguments\n      var args = sliced(arguments);\n      for (var i = 0; i < args.length; i++) {\n        this.where(args[i]);\n      }\n      return this;\n    }\n    // calling #where twice functions like calling #where & then #and\n    if (this.whereClause) {\n      return this.and(node);\n    }\n    this.whereClause = new Where(this.table);\n    this.whereClause.add(node);\n    return this.add(this.whereClause);\n  },\n  or: function (node) {\n    if (!this.whereClause) return this.where(node);\n    this.whereClause.or(node);\n    return this;\n  },\n  and: function (node) {\n    if (!this.whereClause) return this.where(node);\n    this.whereClause.and(node);\n    return this;\n  },\n  order: function () {\n    var args = getArrayOrArgsAsArray(arguments);\n    var orderBy;\n    if (args.length === 0) {\n      return this;\n    }\n    if (this._orderBy) {\n      orderBy = this._orderBy;\n    } else {\n      orderBy = this._orderBy = new OrderBy();\n      this.add(orderBy);\n    }\n    orderBy.addAll(args);\n    return this;\n  },\n  group: function () {\n    var args = getArrayOrArgsAsArray(arguments);\n    var groupBy = new GroupBy().addAll(args);\n    return this.add(groupBy);\n  },\n  having: function () {\n    var args = getArrayOrArgsAsArray(arguments);\n    var having = new Having().addAll(args);\n    return this.add(having);\n  },\n  insert: function (o) {\n    var self = this;\n    var args = sliced(arguments);\n    // object literal\n    if (arguments.length === 1 && !o.toNode && !o.forEach) {\n      args = [];\n      Object.keys(o).forEach(function (key) {\n        var col = self.table.get(key);\n        if (col && !col.autoGenerated) args.push(col.value(o[key]));\n      });\n    } else if (o.forEach) {\n      o.forEach(function (arg) {\n        return self.insert.call(self, arg);\n      });\n      return self;\n    }\n    if (self.insertClause) {\n      self.insertClause.add(args);\n      return self;\n    } else {\n      self.insertClause = new Insert();\n      self.insertClause.add(args);\n      return self.add(self.insertClause);\n    }\n  },\n  replace: function (o) {\n    var self = this;\n    var args = sliced(arguments);\n    // object literal\n    if (arguments.length === 1 && !o.toNode && !o.forEach) {\n      args = [];\n      Object.keys(o).forEach(function (key) {\n        var col = self.table.get(key);\n        if (col && !col.autoGenerated) args.push(col.value(o[key]));\n      });\n    } else if (o.forEach) {\n      o.forEach(function (arg) {\n        return self.replace.call(self, arg);\n      });\n      return self;\n    }\n    if (self.replaceClause) {\n      self.replaceClause.add(args);\n      return self;\n    } else {\n      self.replaceClause = new Replace();\n      self.replaceClause.add(args);\n      return self.add(self.replaceClause);\n    }\n  },\n  update: function (o) {\n    var self = this;\n    var update = new Update();\n    Object.keys(o).forEach(function (key) {\n      var col = self.table.get(key);\n      if (col && !col.autoGenerated) {\n        var val = o[key];\n        update.add(col.value(ParameterNode.getNodeOrParameterNode(val)));\n      }\n    });\n    return this.add(update);\n  },\n  parameter: function (v) {\n    var param = ParameterNode.getNodeOrParameterNode(v);\n    param.isExplicit = true;\n    return this.add(param);\n  },\n  delete: function (params) {\n    var result;\n    if (params) {\n      var TableDefinition = require('../table');\n      if (params instanceof TableDefinition || Array.isArray(params)) {\n        //handle explicit delete queries:\n        // e.g. post.delete(post).from(post) -> DELETE post FROM post\n        // e.g. post.delete([post, user]).from(post) -> DELETE post, user FROM post\n        if (Array.isArray(params)) {\n          params = params.map(function (table) {\n            return new Table(table);\n          });\n        } else {\n          params = [new Table(params)];\n        }\n        result = this.add(new Delete().addAll(params));\n      } else {\n        //syntax sugar for post.delete().from(post).where(params)\n        result = this.add(new Delete()).where(params);\n      }\n    } else {\n      result = this.add(new Delete());\n    }\n    return result;\n  },\n  returning: function () {\n    var returning = new Returning();\n    if (arguments.length === 0) returning.add('*');else returning.addAll(getArrayOrArgsAsArray(arguments));\n    return this.add(returning);\n  },\n  onDuplicate: function (o) {\n    var self = this;\n    var onDuplicate = new OnDuplicate();\n    Object.keys(o).forEach(function (key) {\n      var col = self.table.get(key);\n      if (col && !col.autoGenerated) var val = o[key];\n      onDuplicate.add(col.value(ParameterNode.getNodeOrParameterNode(val))); // jshint ignore:line\n    });\n\n    return self.add(onDuplicate);\n  },\n  onConflict: function (o) {\n    var self = this;\n    var onConflict = new OnConflict();\n    Object.keys(o).forEach(function (key) {\n      onConflict[key] = o[key];\n    });\n    return self.add(onConflict);\n  },\n  forUpdate: function () {\n    assert(typeof this._select !== 'undefined', 'FOR UPDATE can be used only in a select statement');\n    this.add(new ForUpdate());\n    return this;\n  },\n  forShare: function () {\n    assert(typeof this._select !== 'undefined', 'FOR SHARE can be used only in a select statement');\n    this.add(new ForShare());\n    return this;\n  },\n  create: function (indexName) {\n    if (this.indexesClause) {\n      var createIndex = new CreateIndex(this.table, indexName);\n      this.add(createIndex);\n      return createIndex;\n    } else {\n      return this.add(new Create(this.table.isTemporary));\n    }\n  },\n  drop: function () {\n    if (this.indexesClause) {\n      var args = sliced(arguments);\n      var dropIndex = new DropIndex(this.table, args);\n      this.add(dropIndex);\n      return dropIndex;\n    } else {\n      return this.add(new Drop(this.table));\n    }\n  },\n  truncate: function () {\n    return this.add(new Truncate(this.table));\n  },\n  distinct: function () {\n    return this.add(new Distinct());\n  },\n  distinctOn: function () {\n    var distinctOn;\n    if (this._distinctOn) {\n      distinctOn = this._distinctOn;\n    } else {\n      var select = this.nodes.filter(function (node) {\n        return node.type === 'SELECT';\n      }).shift();\n      distinctOn = this._distinctOn = new DistinctOn();\n      select.add(distinctOn);\n    }\n\n    //allow things like .distinctOn(a.star(), [ a.id, a.name ])\n    //this will flatten them into a single array\n    var args = sliced(arguments).reduce(function (cur, next) {\n      if (util.isArray(next)) {\n        return cur.concat(next);\n      }\n      cur.push(next);\n      return cur;\n    }, []);\n    distinctOn.addAll(args);\n    return this;\n  },\n  alter: function () {\n    return this.add(new Alter());\n  },\n  rename: function (newName) {\n    var renameClause = new Rename();\n    if (!newName.toNode) {\n      newName = new Column({\n        name: newName,\n        table: this.table\n      });\n    }\n    renameClause.add(newName.toNode());\n    this.nodes[0].add(renameClause);\n    return this;\n  },\n  addColumn: function (column, dataType) {\n    var addClause = new AddColumn();\n    if (!column.toNode) {\n      column = new Column({\n        name: column,\n        table: this.table\n      });\n    }\n    if (dataType) {\n      column.dataType = dataType;\n    }\n    addClause.add(column.toNode());\n    this.nodes[0].add(addClause);\n    return this;\n  },\n  dropColumn: function (column) {\n    var dropClause = new DropColumn();\n    if (!column.toNode) {\n      column = new Column({\n        name: column,\n        table: this.table\n      });\n    }\n    dropClause.add(column.toNode());\n    this.nodes[0].add(dropClause);\n    return this;\n  },\n  renameColumn: function (oldColumn, newColumn) {\n    var renameClause = new RenameColumn();\n    if (!oldColumn.toNode) {\n      oldColumn = new Column({\n        name: oldColumn,\n        table: this.table\n      });\n    }\n    if (!newColumn.toNode) {\n      newColumn = new Column({\n        name: newColumn,\n        table: this.table\n      });\n    }\n    renameClause.add(oldColumn.toNode());\n    renameClause.add(newColumn.toNode());\n    this.nodes[0].add(renameClause);\n    return this;\n  },\n  limit: function (count) {\n    return this.add(new Modifier(this, 'LIMIT', count));\n  },\n  offset: function (count) {\n    return this.add(new Modifier(this, 'OFFSET', count));\n  },\n  exists: function () {\n    assert(this.type === 'SUBQUERY', 'exists() can only be used on a subQuery');\n    return new PrefixUnaryNode({\n      left: this,\n      operator: \"EXISTS\"\n    });\n  },\n  notExists: function () {\n    assert(this.type === 'SUBQUERY', 'notExists() can only be used on a subQuery');\n    return new PrefixUnaryNode({\n      left: this,\n      operator: \"NOT EXISTS\"\n    });\n  },\n  ifExists: function () {\n    this.nodes[0].unshift(new IfExists());\n    return this;\n  },\n  ifNotExists: function () {\n    this.nodes[0].unshift(new IfNotExists());\n    return this;\n  },\n  orIgnore: function () {\n    this.nodes[0].unshift(new OrIgnore());\n    return this;\n  },\n  cascade: function () {\n    this.nodes[0].add(new Cascade());\n    return this;\n  },\n  restrict: function () {\n    this.nodes[0].add(new Restrict());\n    return this;\n  },\n  indexes: function () {\n    this.indexesClause = new Indexes({\n      table: this.table\n    });\n    return this.add(this.indexesClause);\n  },\n  createView: function (viewName) {\n    this.add(new CreateView(viewName));\n    return this;\n  }\n});\n\n// Here we are extending query with valueExpressions so that it's possible to write queries like\n//   var query=sql.select(a.select(a.x.sum()).plus(b.select(b.y.sum()))\n// which generates:\n//   SELECT (SELECT SUM(a.x) FROM a) + (SELECT SUM(b.y) FROM b)\n// We need to remove \"or\" and \"and\" from here because it conflicts with the already existing functionality of appending\n// to the where clause like so:\n//   var query=a.select().where(a.name.equals(\"joe\")).or(a.name.equals(\"sam\"))\nvar valueExpressions = valueExpressionMixin();\ndelete valueExpressions.or;\ndelete valueExpressions.and;\n_.extend(Query.prototype, valueExpressions);\n\n// Extend the query with the aliasMixin so that it's possible to write queries like\n//   var query=sql.select(a.select(a.count()).as(\"column1\"))\n// which generates:\n//   SELECT (SELECT COUNT(*) FROM a) AS \"column1\"\n_.extend(Query.prototype, alias.AliasMixin);\nmodule.exports = Query;","map":{"version":3,"names":["_","require","alias","assert","sliced","util","valueExpressionMixin","Node","Select","From","Where","OrderBy","GroupBy","Having","Insert","Replace","Update","Delete","Returning","OnDuplicate","OnConflict","ForUpdate","ForShare","Create","Drop","Truncate","Distinct","DistinctOn","Alter","AddColumn","DropColumn","RenameColumn","Rename","Column","ParameterNode","PrefixUnaryNode","IfExists","IfNotExists","OrIgnore","Cascade","Restrict","Indexes","CreateIndex","DropIndex","Table","CreateView","JoinNode","Modifier","define","constructor","table","type","count","getArrayOrArgsAsArray","args","isArray","Query","call","sql","select","_select","add","arguments","reduce","cur","next","concat","push","addAll","j","nodes","length","name","col","property","undefined","star","from","tableNodes","Array","i","leftJoin","other","toNode","where","node","whereClause","and","or","order","orderBy","_orderBy","group","groupBy","having","insert","o","self","forEach","Object","keys","key","get","autoGenerated","value","arg","insertClause","replace","replaceClause","update","val","getNodeOrParameterNode","parameter","v","param","isExplicit","delete","params","result","TableDefinition","map","returning","onDuplicate","onConflict","forUpdate","forShare","create","indexName","indexesClause","createIndex","isTemporary","drop","dropIndex","truncate","distinct","distinctOn","_distinctOn","filter","shift","alter","rename","newName","renameClause","addColumn","column","dataType","addClause","dropColumn","dropClause","renameColumn","oldColumn","newColumn","limit","offset","exists","left","operator","notExists","ifExists","unshift","ifNotExists","orIgnore","cascade","restrict","indexes","createView","viewName","valueExpressions","extend","prototype","AliasMixin","module","exports"],"sources":["/home/ali/Documents/run_prj/happysnake/node_modules/sql/lib/node/query.js"],"sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar alias = require('./alias');\nvar assert = require('assert');\nvar sliced = require('sliced');\nvar util   = require('util');\nvar valueExpressionMixin = require('./valueExpression');\n\nvar Node            = require('./');\nvar Select          = require('./select');\nvar From            = require('./from');\nvar Where           = require('./where');\nvar OrderBy         = require('./orderBy');\nvar GroupBy         = require('./groupBy');\nvar Having          = require('./having');\nvar Insert          = require('./insert');\nvar Replace         = require('./replace');\nvar Update          = require('./update');\nvar Delete          = require('./delete');\nvar Returning       = require('./returning');\nvar OnDuplicate     = require('./onDuplicate');\nvar OnConflict      = require('./onConflict');\nvar ForUpdate       = require('./forUpdate');\nvar ForShare        = require('./forShare');\nvar Create          = require('./create');\nvar Drop            = require('./drop');\nvar Truncate        = require('./truncate');\nvar Distinct        = require('./distinct');\nvar DistinctOn      = require('./distinctOn');\nvar Alter           = require('./alter');\nvar AddColumn       = require('./addColumn');\nvar DropColumn      = require('./dropColumn');\nvar RenameColumn    = require('./renameColumn');\nvar Rename          = require('./rename');\nvar Column          = require('../column');\nvar ParameterNode   = require('./parameter');\nvar PrefixUnaryNode = require('./prefixUnary');\nvar IfExists        = require('./ifExists');\nvar IfNotExists     = require('./ifNotExists');\nvar OrIgnore        = require('./orIgnore');\nvar Cascade         = require('./cascade');\nvar Restrict        = require('./restrict');\nvar Indexes         = require('./indexes');\nvar CreateIndex     = require('./createIndex');\nvar DropIndex       = require('./dropIndex');\nvar Table           = require('./table');\nvar CreateView     = require('./createView');\nvar JoinNode        = require('./join');\n\nvar Modifier = Node.define({\n  constructor: function(table, type, count) {\n    this.table = table;\n    this.type = type;\n    this.count = count;\n  }\n});\n\n// get the first element of an arguments if it is an array, else return arguments as an array\nvar getArrayOrArgsAsArray = function(args) {\n  if (util.isArray(args[0])) {\n    return args[0];\n  }\n  return sliced(args);\n};\n\nvar Query = Node.define({\n  type: 'QUERY',\n\n  constructor: function(table) {\n    Node.call(this);\n    this.table = table;\n    if (table) {\n      this.sql = table.sql;\n    }\n  },\n\n  select: function() {\n    var select;\n    if (this._select) {\n      select = this._select;\n    } else {\n      select = this._select = new Select();\n      this.add(select);\n    }\n\n    //allow things like .select(a.star(), [ a.id, a.name ])\n    //this will flatten them into a single array\n    var args = sliced(arguments).reduce(function(cur, next) {\n      if (util.isArray(next)) {\n        return cur.concat(next);\n      }\n\n      cur.push(next);\n      return cur;\n    }, []);\n\n    select.addAll(args);\n\n    // if this is a subquery then add reference to this column\n    if (this.type === 'SUBQUERY') {\n      for (var j = 0; j < select.nodes.length; j++) {\n        var name = select.nodes[j].alias || select.nodes[j].name;\n        var col = new Column(select.nodes[j]);\n        col.name = name;\n        col.property = name;\n        col.table = this;\n        if (this[name] === undefined) {\n          this[name] = col;\n        }\n      }\n    }\n    return this;\n  },\n\n  star: function() {\n    assert(this.type === 'SUBQUERY', 'star() can only be used on a subQuery');\n    return new Column({\n      table: this,\n      star: true\n    });\n  },\n\n  from: function() {\n    var tableNodes = arguments;\n\n    if (Array.isArray(arguments[0])) {\n      tableNodes = arguments[0];\n    }\n\n    for (var i=0; i<tableNodes.length; i++) {\n      this.add(new From().add(tableNodes[i]));\n    }\n\n    return this;\n  },\n\n  leftJoin: function(other) {\n    assert(this.type === 'SUBQUERY', 'leftJoin() can only be used on a subQuery');\n    return new JoinNode('LEFT', this, other.toNode());\n  },\n\n  where: function(node) {\n    if (arguments.length > 1) {\n      // allow multiple where clause arguments\n      var args = sliced(arguments);\n      for (var i = 0; i < args.length; i++) {\n        this.where(args[i]);\n      }\n      return this;\n    }\n    // calling #where twice functions like calling #where & then #and\n    if (this.whereClause) {\n      return this.and(node);\n    }\n    this.whereClause = new Where(this.table);\n    this.whereClause.add(node);\n    return this.add(this.whereClause);\n  },\n\n  or: function(node) {\n    if (!this.whereClause) return this.where(node);\n    this.whereClause.or(node);\n    return this;\n  },\n\n  and: function(node) {\n    if (!this.whereClause) return this.where(node);\n    this.whereClause.and(node);\n    return this;\n  },\n\n  order: function() {\n    var args = getArrayOrArgsAsArray(arguments);\n    var orderBy;\n    if (args.length === 0) {\n      return this;\n    }\n    if (this._orderBy) {\n      orderBy = this._orderBy;\n    } else {\n      orderBy = this._orderBy = new OrderBy();\n      this.add(orderBy);\n    }\n    orderBy.addAll(args);\n    return this;\n  },\n\n  group: function() {\n    var args = getArrayOrArgsAsArray(arguments);\n    var groupBy = new GroupBy().addAll(args);\n    return this.add(groupBy);\n  },\n\n  having: function() {\n    var args = getArrayOrArgsAsArray(arguments);\n    var having = new Having().addAll(args);\n    return this.add(having);\n  },\n\n  insert: function(o) {\n    var self = this;\n\n    var args = sliced(arguments);\n    // object literal\n    if (arguments.length === 1 && !o.toNode && !o.forEach) {\n      args = [];\n      Object.keys(o).forEach(function(key) {\n        var col = self.table.get(key);\n        if(col && !col.autoGenerated)\n          args.push(col.value(o[key]));\n      });\n    } else if (o.forEach) {\n      o.forEach(function(arg) {\n        return self.insert.call(self, arg);\n      });\n      return self;\n    }\n\n    if (self.insertClause) {\n      self.insertClause.add(args);\n      return self;\n    } else {\n      self.insertClause = new Insert();\n      self.insertClause.add(args);\n      return self.add(self.insertClause);\n    }\n\n  },\n\n  replace: function(o) {\n    var self = this;\n\n    var args = sliced(arguments);\n    // object literal\n    if (arguments.length === 1 && !o.toNode && !o.forEach) {\n      args = [];\n      Object.keys(o).forEach(function(key) {\n        var col = self.table.get(key);\n        if(col && !col.autoGenerated)\n          args.push(col.value(o[key]));\n      });\n    } else if (o.forEach) {\n      o.forEach(function(arg) {\n        return self.replace.call(self, arg);\n      });\n      return self;\n    }\n\n    if (self.replaceClause) {\n      self.replaceClause.add(args);\n      return self;\n    } else {\n      self.replaceClause = new Replace();\n      self.replaceClause.add(args);\n      return self.add(self.replaceClause);\n    }\n\n  },\n\n  update: function(o) {\n    var self = this;\n    var update = new Update();\n    Object.keys(o).forEach(function(key) {\n      var col = self.table.get(key);\n      if(col && !col.autoGenerated) {\n        var val = o[key];\n        update.add(col.value(ParameterNode.getNodeOrParameterNode(val)));\n      }\n    });\n    return this.add(update);\n  },\n\n  parameter: function(v) {\n    var param = ParameterNode.getNodeOrParameterNode(v);\n    param.isExplicit = true;\n    return this.add(param);\n  },\n\n  delete: function(params) {\n    var result;\n    if (params) {\n      var TableDefinition = require('../table');\n      if (params instanceof TableDefinition || Array.isArray(params)) {\n        //handle explicit delete queries:\n        // e.g. post.delete(post).from(post) -> DELETE post FROM post\n        // e.g. post.delete([post, user]).from(post) -> DELETE post, user FROM post\n        if (Array.isArray(params)) {\n          params = params.map(function(table) { return new Table(table); });\n        } else {\n          params = [ new Table(params) ];\n        }\n        result = this.add(new Delete().addAll(params));\n      } else {\n        //syntax sugar for post.delete().from(post).where(params)\n        result = this.add(new Delete()).where(params);\n      }\n    } else{\n      result = this.add(new Delete());\n    }\n    return result;\n  },\n\n  returning: function() {\n    var returning = new Returning();\n    if (arguments.length === 0)\n      returning.add('*');\n    else\n      returning.addAll(getArrayOrArgsAsArray(arguments));\n\n    return this.add(returning);\n  },\n\n  onDuplicate: function(o) {\n    var self = this;\n\n    var onDuplicate = new OnDuplicate();\n    Object.keys(o).forEach(function(key) {\n      var col = self.table.get(key);\n      if(col && !col.autoGenerated)\n        var val = o[key];\n        onDuplicate.add(col.value(ParameterNode.getNodeOrParameterNode(val))); // jshint ignore:line\n    });\n\n    return self.add(onDuplicate);\n  },\n\n  onConflict: function(o) {\n    var self = this;\n\n    var onConflict = new OnConflict();\n    Object.keys(o).forEach(function(key) {\n        onConflict[key] = o[key];\n    });\n    return self.add(onConflict);\n  },\n\n  forUpdate: function() {\n    assert(typeof this._select !== 'undefined', 'FOR UPDATE can be used only in a select statement');\n    this.add(new ForUpdate());\n    return this;\n  },\n\n  forShare: function() {\n    assert(typeof this._select !== 'undefined', 'FOR SHARE can be used only in a select statement');\n    this.add(new ForShare());\n    return this;\n  },\n\n  create: function(indexName) {\n    if (this.indexesClause) {\n      var createIndex = new CreateIndex(this.table, indexName);\n      this.add(createIndex);\n      return createIndex;\n    } else {\n      return this.add(new Create(this.table.isTemporary));\n    }\n  },\n\n  drop: function() {\n    if (this.indexesClause) {\n      var args = sliced(arguments);\n      var dropIndex = new DropIndex(this.table, args);\n      this.add(dropIndex);\n      return dropIndex;\n    } else {\n      return this.add(new Drop(this.table));\n    }\n  },\n\n  truncate: function() {\n    return this.add(new Truncate(this.table));\n  },\n\n  distinct: function() {\n    return this.add(new Distinct());\n  },\n\n  distinctOn: function() {\n    var distinctOn;\n    if (this._distinctOn) {\n      distinctOn = this._distinctOn;\n    } else {\n      var select = this.nodes.filter(function (node) {return node.type === 'SELECT';}).shift();\n\n      distinctOn = this._distinctOn = new DistinctOn();\n      select.add(distinctOn);\n    }\n\n    //allow things like .distinctOn(a.star(), [ a.id, a.name ])\n    //this will flatten them into a single array\n    var args = sliced(arguments).reduce(function(cur, next) {\n      if (util.isArray(next)) {\n        return cur.concat(next);\n      }\n\n      cur.push(next);\n      return cur;\n    }, []);\n\n    distinctOn.addAll(args);\n\n    return this;\n  },\n\n  alter: function() {\n    return this.add(new Alter());\n  },\n\n  rename: function(newName) {\n    var renameClause = new Rename();\n    if (!newName.toNode) {\n      newName = new Column({\n        name: newName,\n        table: this.table\n      });\n    }\n    renameClause.add(newName.toNode());\n    this.nodes[0].add(renameClause);\n    return this;\n  },\n\n  addColumn: function(column, dataType) {\n    var addClause = new AddColumn();\n    if (!column.toNode) {\n      column = new Column({\n        name: column,\n        table: this.table\n      });\n    }\n    if (dataType) {\n      column.dataType = dataType;\n    }\n    addClause.add(column.toNode());\n    this.nodes[0].add(addClause);\n    return this;\n  },\n\n  dropColumn: function(column) {\n    var dropClause = new DropColumn();\n    if (!column.toNode) {\n      column = new Column({\n        name: column,\n        table: this.table\n      });\n    }\n    dropClause.add(column.toNode());\n    this.nodes[0].add(dropClause);\n    return this;\n  },\n\n  renameColumn: function(oldColumn, newColumn) {\n    var renameClause = new RenameColumn();\n    if (!oldColumn.toNode) {\n      oldColumn = new Column({\n        name: oldColumn,\n        table: this.table\n      });\n    }\n    if (!newColumn.toNode) {\n      newColumn = new Column({\n        name: newColumn,\n        table: this.table\n      });\n    }\n    renameClause.add(oldColumn.toNode());\n    renameClause.add(newColumn.toNode());\n    this.nodes[0].add(renameClause);\n    return this;\n  },\n\n  limit: function(count) {\n    return this.add(new Modifier(this, 'LIMIT', count));\n  },\n\n  offset: function(count) {\n    return this.add(new Modifier(this, 'OFFSET', count));\n  },\n\n  exists: function() {\n    assert(this.type === 'SUBQUERY', 'exists() can only be used on a subQuery');\n    return new PrefixUnaryNode({\n      left: this,\n      operator: \"EXISTS\"\n    });\n  },\n\n  notExists: function() {\n    assert(this.type === 'SUBQUERY', 'notExists() can only be used on a subQuery');\n    return new PrefixUnaryNode({\n      left: this,\n      operator: \"NOT EXISTS\"\n    });\n  },\n\n  ifExists: function() {\n    this.nodes[0].unshift(new IfExists());\n    return this;\n  },\n\n  ifNotExists: function() {\n    this.nodes[0].unshift(new IfNotExists());\n    return this;\n  },\n\n  orIgnore: function() {\n    this.nodes[0].unshift(new OrIgnore());\n    return this;\n  },\n\n  cascade: function() {\n    this.nodes[0].add(new Cascade());\n    return this;\n  },\n\n  restrict: function() {\n    this.nodes[0].add(new Restrict());\n    return this;\n  },\n\n  indexes: function() {\n    this.indexesClause = new Indexes({\n      table: this.table\n    });\n    return this.add(this.indexesClause);\n  },\n\n  createView: function(viewName) {\n    this.add(new CreateView(viewName));\n    return this;\n  }\n});\n\n// Here we are extending query with valueExpressions so that it's possible to write queries like\n//   var query=sql.select(a.select(a.x.sum()).plus(b.select(b.y.sum()))\n// which generates:\n//   SELECT (SELECT SUM(a.x) FROM a) + (SELECT SUM(b.y) FROM b)\n// We need to remove \"or\" and \"and\" from here because it conflicts with the already existing functionality of appending\n// to the where clause like so:\n//   var query=a.select().where(a.name.equals(\"joe\")).or(a.name.equals(\"sam\"))\nvar valueExpressions=valueExpressionMixin();\ndelete valueExpressions.or;\ndelete valueExpressions.and;\n_.extend(Query.prototype, valueExpressions);\n\n// Extend the query with the aliasMixin so that it's possible to write queries like\n//   var query=sql.select(a.select(a.count()).as(\"column1\"))\n// which generates:\n//   SELECT (SELECT COUNT(*) FROM a) AS \"column1\"\n_.extend(Query.prototype, alias.AliasMixin);\n\nmodule.exports = Query;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}