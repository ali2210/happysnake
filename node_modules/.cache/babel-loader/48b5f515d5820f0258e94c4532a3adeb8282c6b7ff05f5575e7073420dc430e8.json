{"ast":null,"code":"\"use strict\";\n\nconst axios = require('axios');\nconst log = require('./log');\nconst proxy = require('./proxy');\nconst stats = require('./stats');\nconst block = require('./block');\nconst transaction = require('./transaction');\nconst contract = require('./contract');\nconst account = require('./account');\nconst pickChainUrl = require('./pick-chain-url');\n/**\n * @module etherscan/api\n */\n\n/**\n * @param {string} apiKey - (optional) Your Etherscan APIkey\n * @param {string} chain - (optional) Other chain keys [ropsten, rinkeby, kovan]\n * @param {number} timeout - (optional) Timeout in milliseconds for requests, default 10000\n * @param {object} client - optional axios client instance\n */\nmodule.exports = function (apiKey, chain, timeout) {\n  let client = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  if (!apiKey) {\n    apiKey = 'YourApiKeyToken';\n  }\n  if (!timeout) {\n    timeout = 10000;\n  }\n  if (!client) {\n    client = axios.create({\n      baseURL: pickChainUrl(chain),\n      timeout: timeout\n    });\n  }\n  var getRequest = require('./get-request')(chain, timeout, client);\n\n  /** @lends module:etherscan/api */\n  return {\n    /**\n     * @namespace\n     */\n    log: log(getRequest, apiKey),\n    /**\n     * @namespace\n     */\n    proxy: proxy(getRequest, apiKey),\n    /**\n     * @namespace\n     */\n    stats: stats(getRequest, apiKey),\n    /**\n     * @namespace\n     */\n    block: block(getRequest, apiKey),\n    /**\n     * @namespace\n     */\n    transaction: transaction(getRequest, apiKey),\n    /**\n     * @namespace\n     */\n    contract: contract(getRequest, apiKey),\n    /**\n     * @namespace\n     */\n    account: account(getRequest, apiKey)\n  };\n};","map":{"version":3,"names":["axios","require","log","proxy","stats","block","transaction","contract","account","pickChainUrl","module","exports","apiKey","chain","timeout","client","arguments","length","undefined","create","baseURL","getRequest"],"sources":["/home/ali/Documents/run_prj/happysnake/node_modules/etherscan-api/lib/init.js"],"sourcesContent":["\"use strict\";\nconst axios = require('axios');\nconst log = require('./log');\nconst proxy = require('./proxy');\nconst stats = require('./stats');\nconst block = require('./block');\nconst transaction = require('./transaction');\nconst contract = require('./contract');\nconst account = require('./account');\nconst pickChainUrl = require('./pick-chain-url');\n/**\n * @module etherscan/api\n */\n\n\n/**\n * @param {string} apiKey - (optional) Your Etherscan APIkey\n * @param {string} chain - (optional) Other chain keys [ropsten, rinkeby, kovan]\n * @param {number} timeout - (optional) Timeout in milliseconds for requests, default 10000\n * @param {object} client - optional axios client instance\n */\nmodule.exports = function(apiKey, chain, timeout, client = null) {\n\n  if (!apiKey) {\n    apiKey = 'YourApiKeyToken';\n  }\n\n  if (!timeout) {\n    timeout = 10000;\n  }\n\n  if (!client) {\n    client = axios.create({\n      baseURL: pickChainUrl(chain),\n      timeout: timeout\n    });  \n  } \n  \n  var getRequest = require('./get-request')(chain, timeout, client);\n\n  /** @lends module:etherscan/api */\n  return {\n    /**\n     * @namespace\n     */\n    log: log(getRequest, apiKey),\n    /**\n     * @namespace\n     */\n    proxy: proxy(getRequest, apiKey),\n    /**\n     * @namespace\n     */\n    stats: stats(getRequest, apiKey),\n    /**\n     * @namespace\n     */\n    block: block(getRequest, apiKey),\n    /**\n     * @namespace\n     */\n    transaction: transaction(getRequest, apiKey),\n    /**\n     * @namespace\n     */\n    contract: contract(getRequest, apiKey),\n    /**\n     * @namespace\n     */\n    account: account(getRequest, apiKey)\n  };\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMC,GAAG,GAAGD,OAAO,CAAC,OAAO,CAAC;AAC5B,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMG,KAAK,GAAGH,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMI,KAAK,GAAGJ,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMK,WAAW,GAAGL,OAAO,CAAC,eAAe,CAAC;AAC5C,MAAMM,QAAQ,GAAGN,OAAO,CAAC,YAAY,CAAC;AACtC,MAAMO,OAAO,GAAGP,OAAO,CAAC,WAAW,CAAC;AACpC,MAAMQ,YAAY,GAAGR,OAAO,CAAC,kBAAkB,CAAC;AAChD;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACAS,MAAM,CAACC,OAAO,GAAG,UAASC,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAiB;EAAA,IAAfC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAE7D,IAAI,CAACJ,MAAM,EAAE;IACXA,MAAM,GAAG,iBAAiB;EAC5B;EAEA,IAAI,CAACE,OAAO,EAAE;IACZA,OAAO,GAAG,KAAK;EACjB;EAEA,IAAI,CAACC,MAAM,EAAE;IACXA,MAAM,GAAGf,KAAK,CAACmB,MAAM,CAAC;MACpBC,OAAO,EAAEX,YAAY,CAACI,KAAK,CAAC;MAC5BC,OAAO,EAAEA;IACX,CAAC,CAAC;EACJ;EAEA,IAAIO,UAAU,GAAGpB,OAAO,CAAC,eAAe,CAAC,CAACY,KAAK,EAAEC,OAAO,EAAEC,MAAM,CAAC;;EAEjE;EACA,OAAO;IACL;AACJ;AACA;IACIb,GAAG,EAAEA,GAAG,CAACmB,UAAU,EAAET,MAAM,CAAC;IAC5B;AACJ;AACA;IACIT,KAAK,EAAEA,KAAK,CAACkB,UAAU,EAAET,MAAM,CAAC;IAChC;AACJ;AACA;IACIR,KAAK,EAAEA,KAAK,CAACiB,UAAU,EAAET,MAAM,CAAC;IAChC;AACJ;AACA;IACIP,KAAK,EAAEA,KAAK,CAACgB,UAAU,EAAET,MAAM,CAAC;IAChC;AACJ;AACA;IACIN,WAAW,EAAEA,WAAW,CAACe,UAAU,EAAET,MAAM,CAAC;IAC5C;AACJ;AACA;IACIL,QAAQ,EAAEA,QAAQ,CAACc,UAAU,EAAET,MAAM,CAAC;IACtC;AACJ;AACA;IACIJ,OAAO,EAAEA,OAAO,CAACa,UAAU,EAAET,MAAM;EACrC,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}