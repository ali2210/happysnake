{"ast":null,"code":"import _classCallCheck from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n// Electronic Code Book\nimport { ModeOfOperation } from \"./mode.js\";\nexport var ECB = /*#__PURE__*/function (_ModeOfOperation) {\n  _inherits(ECB, _ModeOfOperation);\n  function ECB(key) {\n    _classCallCheck(this, ECB);\n    return _possibleConstructorReturn(this, _getPrototypeOf(ECB).call(this, \"ECB\", key, ECB));\n  }\n  _createClass(ECB, [{\n    key: \"encrypt\",\n    value: function encrypt(plaintext) {\n      if (plaintext.length % 16) {\n        throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n      }\n      var crypttext = new Uint8Array(plaintext.length);\n      for (var i = 0; i < plaintext.length; i += 16) {\n        crypttext.set(this.aes.encrypt(plaintext.subarray(i, i + 16)), i);\n      }\n      return crypttext;\n    }\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(crypttext) {\n      if (crypttext.length % 16) {\n        throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n      }\n      var plaintext = new Uint8Array(crypttext.length);\n      for (var i = 0; i < crypttext.length; i += 16) {\n        plaintext.set(this.aes.decrypt(crypttext.subarray(i, i + 16)), i);\n      }\n      return plaintext;\n    }\n  }]);\n  return ECB;\n}(ModeOfOperation);","map":null,"metadata":{},"sourceType":"module"}