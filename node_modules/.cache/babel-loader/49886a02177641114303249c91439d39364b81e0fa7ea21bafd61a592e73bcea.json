{"ast":null,"code":"module.exports = function (getRequest, apiKey) {\n  return {\n    /**\n     * Returns the supply of Tokens\n     * @param {string} tokenname - Name of the Token\n     * @param {string} contractaddress - Address from token contract\n     * @example\n     * var supply = api.stats.tokensupply(null, '0x57d90b64a1a57749b0f932f1a3395792e12e7055');\n     * @returns {Promise.<object>}\n     */\n    tokensupply(tokenname, contractaddress) {\n      const module = 'stats';\n      const action = 'tokensupply';\n      let params = {\n        module,\n        action,\n        apiKey\n      };\n      if (tokenname) {\n        params.tokenname = tokenname;\n      }\n      if (contractaddress) {\n        params.contractaddress = contractaddress;\n      }\n      var query = new URLSearchParams(params).toString();\n      return getRequest(query);\n    },\n    /**\n     * Returns total supply of ether\n     * var supply = api.stats.ethsupply();\n     * @returns {Promise.<integer>}\n     */\n    ethsupply() {\n      const module = 'stats';\n      const action = 'ethsupply';\n      const queryObject = {\n        module,\n        action,\n        apiKey\n      };\n      var query = new URLSearchParams(queryObject).toString();\n      return getRequest(query);\n    },\n    /**\n     * Returns the price of ether now\n     * @example\n     * var price = api.stats.ethprice();\n     * @returns {Promise.<integer>}\n     */\n    ethprice() {\n      const module = 'stats';\n      const action = 'ethprice';\n      const queryObject = {\n        module,\n        action,\n        apiKey\n      };\n      var query = new URLSearchParams(queryObject).toString();\n      return getRequest(query);\n    }\n  };\n};","map":{"version":3,"names":["module","exports","getRequest","apiKey","tokensupply","tokenname","contractaddress","action","params","query","URLSearchParams","toString","ethsupply","queryObject","ethprice"],"sources":["/home/ali/Documents/run_prj/happysnake/node_modules/etherscan-api/lib/stats.js"],"sourcesContent":["module.exports = function(getRequest, apiKey) {\n  return {\n    /**\n     * Returns the supply of Tokens\n     * @param {string} tokenname - Name of the Token\n     * @param {string} contractaddress - Address from token contract\n     * @example\n     * var supply = api.stats.tokensupply(null, '0x57d90b64a1a57749b0f932f1a3395792e12e7055');\n     * @returns {Promise.<object>}\n     */\n    tokensupply(tokenname, contractaddress) {\n      const module = 'stats';\n      const action = 'tokensupply';\n\n      let params = {\n        module, action, apiKey\n      };\n\n      if (tokenname) {\n        params.tokenname = tokenname;\n      }\n\n      if (contractaddress) {\n        params.contractaddress = contractaddress;\n      }\n\n      var query = new URLSearchParams(params).toString();\n      return getRequest(query);\n    },\n\n    /**\n     * Returns total supply of ether\n     * var supply = api.stats.ethsupply();\n     * @returns {Promise.<integer>}\n     */\n    ethsupply() {\n      const module = 'stats';\n      const action = 'ethsupply';\n      const queryObject = {\n        module, action, apiKey\n      };\n      var query = new URLSearchParams(queryObject).toString();\n      return getRequest(query);\n    },\n\n    /**\n     * Returns the price of ether now\n     * @example\n     * var price = api.stats.ethprice();\n     * @returns {Promise.<integer>}\n     */\n    ethprice() {\n      const module = 'stats';\n      const action = 'ethprice';\n      const queryObject = {\n        module, action, apiKey\n      };\n      var query = new URLSearchParams(queryObject).toString();\n      return getRequest(query);\n    }\n  };\n};\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAG,UAASC,UAAU,EAAEC,MAAM,EAAE;EAC5C,OAAO;IACL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,WAAWA,CAACC,SAAS,EAAEC,eAAe,EAAE;MACtC,MAAMN,MAAM,GAAG,OAAO;MACtB,MAAMO,MAAM,GAAG,aAAa;MAE5B,IAAIC,MAAM,GAAG;QACXR,MAAM;QAAEO,MAAM;QAAEJ;MAClB,CAAC;MAED,IAAIE,SAAS,EAAE;QACbG,MAAM,CAACH,SAAS,GAAGA,SAAS;MAC9B;MAEA,IAAIC,eAAe,EAAE;QACnBE,MAAM,CAACF,eAAe,GAAGA,eAAe;MAC1C;MAEA,IAAIG,KAAK,GAAG,IAAIC,eAAe,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC;MAClD,OAAOT,UAAU,CAACO,KAAK,CAAC;IAC1B,CAAC;IAED;AACJ;AACA;AACA;AACA;IACIG,SAASA,CAAA,EAAG;MACV,MAAMZ,MAAM,GAAG,OAAO;MACtB,MAAMO,MAAM,GAAG,WAAW;MAC1B,MAAMM,WAAW,GAAG;QAClBb,MAAM;QAAEO,MAAM;QAAEJ;MAClB,CAAC;MACD,IAAIM,KAAK,GAAG,IAAIC,eAAe,CAACG,WAAW,CAAC,CAACF,QAAQ,CAAC,CAAC;MACvD,OAAOT,UAAU,CAACO,KAAK,CAAC;IAC1B,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;IACIK,QAAQA,CAAA,EAAG;MACT,MAAMd,MAAM,GAAG,OAAO;MACtB,MAAMO,MAAM,GAAG,UAAU;MACzB,MAAMM,WAAW,GAAG;QAClBb,MAAM;QAAEO,MAAM;QAAEJ;MAClB,CAAC;MACD,IAAIM,KAAK,GAAG,IAAIC,eAAe,CAACG,WAAW,CAAC,CAACF,QAAQ,CAAC,CAAC;MACvD,OAAOT,UAAU,CAACO,KAAK,CAAC;IAC1B;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}