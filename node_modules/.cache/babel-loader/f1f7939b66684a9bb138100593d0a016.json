{"ast":null,"code":"import { getAddress } from \"../address/index.js\";\nimport { assertArgument, isHexString } from \"../utils/index.js\";\nfunction accessSetify(addr, storageKeys) {\n  return {\n    address: getAddress(addr),\n    storageKeys: storageKeys.map(function (storageKey, index) {\n      assertArgument(isHexString(storageKey, 32), \"invalid slot\", \"storageKeys[\".concat(index, \"]\"), storageKey);\n      return storageKey.toLowerCase();\n    })\n  };\n}\n/**\n *  Returns a [[AccessList]] from any ethers-supported access-list structure.\n */\nexport function accessListify(value) {\n  if (Array.isArray(value)) {\n    return value.map(function (set, index) {\n      if (Array.isArray(set)) {\n        assertArgument(set.length === 2, \"invalid slot set\", \"value[\".concat(index, \"]\"), set);\n        return accessSetify(set[0], set[1]);\n      }\n      assertArgument(set != null && typeof set === \"object\", \"invalid address-slot set\", \"value\", value);\n      return accessSetify(set.address, set.storageKeys);\n    });\n  }\n  assertArgument(value != null && typeof value === \"object\", \"invalid access list\", \"value\", value);\n  var result = Object.keys(value).map(function (addr) {\n    var storageKeys = value[addr].reduce(function (accum, storageKey) {\n      accum[storageKey] = true;\n      return accum;\n    }, {});\n    return accessSetify(addr, Object.keys(storageKeys).sort());\n  });\n  result.sort(function (a, b) {\n    return a.address.localeCompare(b.address);\n  });\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}