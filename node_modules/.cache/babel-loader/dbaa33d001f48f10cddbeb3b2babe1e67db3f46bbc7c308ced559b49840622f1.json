{"ast":null,"code":"module.exports = function (getRequest, apiKey) {\n  return {\n    /**\n     * The Event Log API was designed to provide an alternative to the native eth_getLogs.\n     */\n    /**\n     * returns the status of a specific transaction hash\n     * @param {string} fromBlock - fromBlock\n     * @param {string} toBlock - toBlock\n     * @param {string} topic0 - topic (32 Bytes per topic)\n     * @param {string} topic0_1_opr - and|or between topic0 & topic1\n     * @param {string} topic1 - topic (32 Bytes per topic)\n     * @param {string} topic1_2_opr - and|or between topic1 & topic2\n     * @param {string} topic2 - topic (32 Bytes per topic)\n     * @param {string} topic2_3_opr - and|or between topic2 & topic3\n     * @param {string} topic3 - topic (32 Bytes per topic)\n     * @param {string} topic0_2_opr - and|or between topic0 & topic2\n     * @example https://etherscan.io/apis#logs\n     * @returns {Promise.<object>}\n     */\n    getLogs(address, fromBlock, toBlock, topic0, topic0_1_opr, topic1, topic1_2_opr, topic2, topic2_3_opr, topic3, topic0_2_opr) {\n      const module = 'logs';\n      const action = 'getLogs';\n      var params = {\n        module,\n        action,\n        apiKey,\n        address\n      };\n      if (address) {\n        params.address = address;\n      }\n      if (fromBlock) {\n        params.fromBlock = fromBlock;\n      }\n      if (toBlock) {\n        params.toBlock = toBlock;\n      }\n      if (topic0) {\n        params.topic0 = topic0;\n      }\n      if (topic0_1_opr) {\n        params.topic0_1_opr = topic0_1_opr;\n      }\n      if (topic1) {\n        params.topic1 = topic1;\n      }\n      if (topic1_2_opr) {\n        params.topic1_2_opr = topic1_2_opr;\n      }\n      if (topic2) {\n        params.topic2 = topic2;\n      }\n      if (topic2_3_opr) {\n        params.topic2_3_opr = topic2_3_opr;\n      }\n      if (topic0_2_opr) {\n        params.topic0_2_opr = topic0_2_opr;\n      }\n      if (topic3) {\n        params.topic3 = topic3;\n      }\n      var query = new URLSearchParams(params).toString();\n      return getRequest(query);\n    }\n  };\n};","map":{"version":3,"names":["module","exports","getRequest","apiKey","getLogs","address","fromBlock","toBlock","topic0","topic0_1_opr","topic1","topic1_2_opr","topic2","topic2_3_opr","topic3","topic0_2_opr","action","params","query","URLSearchParams","toString"],"sources":["/home/ali/Documents/run_prj/happysnake/node_modules/etherscan-api/lib/log.js"],"sourcesContent":["module.exports = function(getRequest, apiKey) {\n  return {\n    /**\n     * The Event Log API was designed to provide an alternative to the native eth_getLogs.\n     */\n     /**\n      * returns the status of a specific transaction hash\n      * @param {string} fromBlock - fromBlock\n      * @param {string} toBlock - toBlock\n      * @param {string} topic0 - topic (32 Bytes per topic)\n      * @param {string} topic0_1_opr - and|or between topic0 & topic1\n      * @param {string} topic1 - topic (32 Bytes per topic)\n      * @param {string} topic1_2_opr - and|or between topic1 & topic2\n      * @param {string} topic2 - topic (32 Bytes per topic)\n      * @param {string} topic2_3_opr - and|or between topic2 & topic3\n      * @param {string} topic3 - topic (32 Bytes per topic)\n      * @param {string} topic0_2_opr - and|or between topic0 & topic2\n      * @example https://etherscan.io/apis#logs\n      * @returns {Promise.<object>}\n      */\n    getLogs(address,\n            fromBlock,\n            toBlock,\n            topic0,\n            topic0_1_opr,\n            topic1,\n            topic1_2_opr,\n            topic2,\n            topic2_3_opr,\n            topic3,\n            topic0_2_opr) {\n\n      const module = 'logs';\n      const action = 'getLogs';\n      var params = {\n        module, action, apiKey, address\n      };\n\n      if (address) {\n        params.address = address;\n      }\n\n      if (fromBlock) {\n        params.fromBlock = fromBlock;\n      }\n\n      if (toBlock) {\n        params.toBlock = toBlock;\n      }\n\n      if (topic0) {\n        params.topic0 = topic0;\n      }\n\n      if (topic0_1_opr) {\n        params.topic0_1_opr = topic0_1_opr;\n      }\n\n      if (topic1) {\n        params.topic1 = topic1;\n      }\n\n      if (topic1_2_opr) {\n        params.topic1_2_opr = topic1_2_opr;\n      }\n\n      if (topic2) {\n        params.topic2 = topic2;\n      }\n\n      if (topic2_3_opr) {\n        params.topic2_3_opr = topic2_3_opr;\n      }\n\n      if (topic0_2_opr) {\n        params.topic0_2_opr = topic0_2_opr;\n      }\n\n      if (topic3) {\n        params.topic3 = topic3;\n      }\n      var query = new URLSearchParams(params).toString();\n      return getRequest(query);\n    }\n  };\n};\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAG,UAASC,UAAU,EAAEC,MAAM,EAAE;EAC5C,OAAO;IACL;AACJ;AACA;IACK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,OAAOA,CAACC,OAAO,EACPC,SAAS,EACTC,OAAO,EACPC,MAAM,EACNC,YAAY,EACZC,MAAM,EACNC,YAAY,EACZC,MAAM,EACNC,YAAY,EACZC,MAAM,EACNC,YAAY,EAAE;MAEpB,MAAMf,MAAM,GAAG,MAAM;MACrB,MAAMgB,MAAM,GAAG,SAAS;MACxB,IAAIC,MAAM,GAAG;QACXjB,MAAM;QAAEgB,MAAM;QAAEb,MAAM;QAAEE;MAC1B,CAAC;MAED,IAAIA,OAAO,EAAE;QACXY,MAAM,CAACZ,OAAO,GAAGA,OAAO;MAC1B;MAEA,IAAIC,SAAS,EAAE;QACbW,MAAM,CAACX,SAAS,GAAGA,SAAS;MAC9B;MAEA,IAAIC,OAAO,EAAE;QACXU,MAAM,CAACV,OAAO,GAAGA,OAAO;MAC1B;MAEA,IAAIC,MAAM,EAAE;QACVS,MAAM,CAACT,MAAM,GAAGA,MAAM;MACxB;MAEA,IAAIC,YAAY,EAAE;QAChBQ,MAAM,CAACR,YAAY,GAAGA,YAAY;MACpC;MAEA,IAAIC,MAAM,EAAE;QACVO,MAAM,CAACP,MAAM,GAAGA,MAAM;MACxB;MAEA,IAAIC,YAAY,EAAE;QAChBM,MAAM,CAACN,YAAY,GAAGA,YAAY;MACpC;MAEA,IAAIC,MAAM,EAAE;QACVK,MAAM,CAACL,MAAM,GAAGA,MAAM;MACxB;MAEA,IAAIC,YAAY,EAAE;QAChBI,MAAM,CAACJ,YAAY,GAAGA,YAAY;MACpC;MAEA,IAAIE,YAAY,EAAE;QAChBE,MAAM,CAACF,YAAY,GAAGA,YAAY;MACpC;MAEA,IAAID,MAAM,EAAE;QACVG,MAAM,CAACH,MAAM,GAAGA,MAAM;MACxB;MACA,IAAII,KAAK,GAAG,IAAIC,eAAe,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC;MAClD,OAAOlB,UAAU,CAACgB,KAAK,CAAC;IAC1B;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}