{"ast":null,"code":"import _classCallCheck from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\n// Cipher Feedback\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CFB_instances, _CFB_iv, _CFB_shiftRegister, _CFB_shift;\nimport { ModeOfOperation } from \"./mode.js\";\nexport var CFB = /*#__PURE__*/function (_ModeOfOperation) {\n  _inherits(CFB, _ModeOfOperation);\n  function CFB(key, iv) {\n    var _this;\n    var segmentSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n    _classCallCheck(this, CFB);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CFB).call(this, \"CFB\", key, CFB));\n    _CFB_instances.add(_assertThisInitialized(_assertThisInitialized(_this)));\n    _CFB_iv.set(_assertThisInitialized(_assertThisInitialized(_this)), void 0);\n    _CFB_shiftRegister.set(_assertThisInitialized(_assertThisInitialized(_this)), void 0);\n    // This library currently only handles byte-aligned segmentSize\n    if (!Number.isInteger(segmentSize) || segmentSize % 8) {\n      throw new TypeError(\"invalid segmentSize\");\n    }\n    Object.defineProperties(_assertThisInitialized(_assertThisInitialized(_this)), {\n      segmentSize: {\n        enumerable: true,\n        value: segmentSize\n      }\n    });\n    if (iv) {\n      if (iv.length % 16) {\n        throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n      }\n      __classPrivateFieldSet(_assertThisInitialized(_assertThisInitialized(_this)), _CFB_iv, new Uint8Array(iv), \"f\");\n    } else {\n      __classPrivateFieldSet(_assertThisInitialized(_assertThisInitialized(_this)), _CFB_iv, new Uint8Array(16), \"f\");\n    }\n    __classPrivateFieldSet(_assertThisInitialized(_assertThisInitialized(_this)), _CFB_shiftRegister, _this.iv, \"f\");\n    return _this;\n  }\n  _createClass(CFB, [{\n    key: \"encrypt\",\n    value: function encrypt(plaintext) {\n      if (8 * plaintext.length % this.segmentSize) {\n        throw new TypeError(\"invalid plaintext size (must be multiple of segmentSize bytes)\");\n      }\n      var segmentSize = this.segmentSize / 8;\n      var ciphertext = new Uint8Array(plaintext);\n      for (var i = 0; i < ciphertext.length; i += segmentSize) {\n        var xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\"));\n        for (var j = 0; j < segmentSize; j++) {\n          ciphertext[i + j] ^= xorSegment[j];\n        }\n        __classPrivateFieldGet(this, _CFB_instances, \"m\", _CFB_shift).call(this, ciphertext.subarray(i));\n      }\n      return ciphertext;\n    }\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(ciphertext) {\n      if (8 * ciphertext.length % this.segmentSize) {\n        throw new TypeError(\"invalid ciphertext size (must be multiple of segmentSize bytes)\");\n      }\n      var segmentSize = this.segmentSize / 8;\n      var plaintext = new Uint8Array(ciphertext);\n      for (var i = 0; i < plaintext.length; i += segmentSize) {\n        var xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\"));\n        for (var j = 0; j < segmentSize; j++) {\n          plaintext[i + j] ^= xorSegment[j];\n        }\n        __classPrivateFieldGet(this, _CFB_instances, \"m\", _CFB_shift).call(this, ciphertext.subarray(i));\n      }\n      return plaintext;\n    }\n  }, {\n    key: \"iv\",\n    get: function get() {\n      return new Uint8Array(__classPrivateFieldGet(this, _CFB_iv, \"f\"));\n    }\n  }]);\n  return CFB;\n}(ModeOfOperation);\n_CFB_iv = new WeakMap(), _CFB_shiftRegister = new WeakMap(), _CFB_instances = new WeakSet(), _CFB_shift = function _CFB_shift(data) {\n  var segmentSize = this.segmentSize / 8;\n  // Shift the register\n  __classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").set(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").subarray(segmentSize));\n  __classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").set(data.subarray(0, segmentSize), 16 - segmentSize);\n};","map":null,"metadata":{},"sourceType":"module"}