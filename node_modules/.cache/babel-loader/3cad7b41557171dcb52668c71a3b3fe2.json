{"ast":null,"code":"import _classCallCheck from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ali/Documents/run_prj/happysnake/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/**\n *  When sending values to or receiving values from a [[Contract]], the\n *  data is generally encoded using the [ABI standard](link-solc-abi).\n *\n *  The AbiCoder provides a utility to encode values to ABI data and\n *  decode values from ABI data.\n *\n *  Most of the time, developers should favour the [[Contract]] class,\n *  which further abstracts a lot of the finer details of ABI data.\n *\n *  @_section api/abi/abi-coder:ABI Encoding\n */\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { assertArgumentCount, assertArgument } from \"../utils/index.js\";\nimport { Reader, Writer } from \"./coders/abstract-coder.js\";\nimport { AddressCoder } from \"./coders/address.js\";\nimport { ArrayCoder } from \"./coders/array.js\";\nimport { BooleanCoder } from \"./coders/boolean.js\";\nimport { BytesCoder } from \"./coders/bytes.js\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes.js\";\nimport { NullCoder } from \"./coders/null.js\";\nimport { NumberCoder } from \"./coders/number.js\";\nimport { StringCoder } from \"./coders/string.js\";\nimport { TupleCoder } from \"./coders/tuple.js\";\nimport { ParamType } from \"./fragments.js\";\nimport { getAddress } from \"../address/index.js\";\nimport { getBytes, hexlify, makeError } from \"../utils/index.js\";\n// https://docs.soliditylang.org/en/v0.8.17/control-structures.html\nvar PanicReasons = new Map();\nPanicReasons.set(0x00, \"GENERIC_PANIC\");\nPanicReasons.set(0x01, \"ASSERT_FALSE\");\nPanicReasons.set(0x11, \"OVERFLOW\");\nPanicReasons.set(0x12, \"DIVIDE_BY_ZERO\");\nPanicReasons.set(0x21, \"ENUM_RANGE_ERROR\");\nPanicReasons.set(0x22, \"BAD_STORAGE_DATA\");\nPanicReasons.set(0x31, \"STACK_UNDERFLOW\");\nPanicReasons.set(0x32, \"ARRAY_RANGE_ERROR\");\nPanicReasons.set(0x41, \"OUT_OF_MEMORY\");\nPanicReasons.set(0x51, \"UNINITIALIZED_FUNCTION_CALL\");\nvar paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nvar paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nvar defaultCoder = null;\nfunction _getBuiltinCallException(action, tx, data, abiCoder) {\n  var message = \"missing revert data\";\n  var reason = null;\n  var invocation = null;\n  var revert = null;\n  if (data) {\n    message = \"execution reverted\";\n    var bytes = getBytes(data);\n    data = hexlify(data);\n    if (bytes.length === 0) {\n      message += \" (no data present; likely require(false) occurred\";\n      reason = \"require(false)\";\n    } else if (bytes.length % 32 !== 4) {\n      message += \" (could not decode reason; invalid data length)\";\n    } else if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n      // Error(string)\n      try {\n        reason = abiCoder.decode([\"string\"], bytes.slice(4))[0];\n        revert = {\n          signature: \"Error(string)\",\n          name: \"Error\",\n          args: [reason]\n        };\n        message += \": \".concat(JSON.stringify(reason));\n      } catch (error) {\n        message += \" (could not decode reason; invalid string data)\";\n      }\n    } else if (hexlify(bytes.slice(0, 4)) === \"0x4e487b71\") {\n      // Panic(uint256)\n      try {\n        var code = Number(abiCoder.decode([\"uint256\"], bytes.slice(4))[0]);\n        revert = {\n          signature: \"Panic(uint256)\",\n          name: \"Panic\",\n          args: [code]\n        };\n        reason = \"Panic due to \".concat(PanicReasons.get(code) || \"UNKNOWN\", \"(\").concat(code, \")\");\n        message += \": \".concat(reason);\n      } catch (error) {\n        message += \" (could not decode panic code)\";\n      }\n    } else {\n      message += \" (unknown custom error)\";\n    }\n  }\n  var transaction = {\n    to: tx.to ? getAddress(tx.to) : null,\n    data: tx.data || \"0x\"\n  };\n  if (tx.from) {\n    transaction.from = getAddress(tx.from);\n  }\n  return makeError(message, \"CALL_EXCEPTION\", {\n    action: action,\n    data: data,\n    reason: reason,\n    transaction: transaction,\n    invocation: invocation,\n    revert: revert\n  });\n}\n/**\n *  The **AbiCoder** is a low-level class responsible for encoding JavaScript\n *  values into binary data and decoding binary data into JavaScript values.\n */\nexport var AbiCoder = /*#__PURE__*/function () {\n  function AbiCoder() {\n    _classCallCheck(this, AbiCoder);\n  }\n  _createClass(AbiCoder, [{\n    key: \"getDefaultValue\",\n    /**\n     *  Get the default values for the given %%types%%.\n     *\n     *  For example, a ``uint`` is by default ``0`` and ``bool``\n     *  is by default ``false``.\n     */\n    value: function getDefaultValue(types) {\n      var _this = this;\n      var coders = types.map(function (type) {\n        return _this.#getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n      return coder.defaultValue();\n    }\n    /**\n     *  Encode the %%values%% as the %%types%% into ABI data.\n     *\n     *  @returns DataHexstring\n     */\n  }, {\n    key: \"encode\",\n    value: function encode(types, values) {\n      var _this2 = this;\n      assertArgumentCount(values.length, types.length, \"types/values length mismatch\");\n      var coders = types.map(function (type) {\n        return _this2.#getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n      var writer = new Writer();\n      coder.encode(writer, values);\n      return writer.data;\n    }\n    /**\n     *  Decode the ABI %%data%% as the %%types%% into values.\n     *\n     *  If %%loose%% decoding is enabled, then strict padding is\n     *  not enforced. Some older versions of Solidity incorrectly\n     *  padded event data emitted from ``external`` functions.\n     */\n  }, {\n    key: \"decode\",\n    value: function decode(types, data, loose) {\n      var _this3 = this;\n      var coders = types.map(function (type) {\n        return _this3.#getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n      return coder.decode(new Reader(data, loose));\n    }\n    /**\n     *  Returns the shared singleton instance of a default [[AbiCoder]].\n     *\n     *  On the first call, the instance is created internally.\n     */\n  }], [{\n    key: \"defaultAbiCoder\",\n    value: function defaultAbiCoder() {\n      if (defaultCoder == null) {\n        defaultCoder = new AbiCoder();\n      }\n      return defaultCoder;\n    }\n    /**\n     *  Returns an ethers-compatible [[CallExceptionError]] Error for the given\n     *  result %%data%% for the [[CallExceptionAction]] %%action%% against\n     *  the Transaction %%tx%%.\n     */\n  }, {\n    key: \"getBuiltinCallException\",\n    value: function getBuiltinCallException(action, tx, data) {\n      return _getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());\n    }\n  }]);\n  return AbiCoder;\n}();","map":null,"metadata":{},"sourceType":"module"}