{"ast":null,"code":"'use strict';\n\nvar getPrimaryKeyColumn = function (table) {\n  for (var i = 0; i < table.columns.length; i++) {\n    var col = table.columns[i];\n    if (col.primaryKey) {\n      return col;\n    }\n  }\n};\nvar findReference = function (left, right) {\n  // find reference\n  for (var i = 0; i < right.columns.length; i++) {\n    var col = right.columns[i];\n    if (col.references) {\n      var leftName = left.getName();\n      if (col.references === leftName || col.references.table === leftName) {\n        var leftCol = left[col.references.column] || getPrimaryKeyColumn(left);\n        return {\n          left: leftCol,\n          right: col\n        };\n      }\n    }\n  }\n};\nmodule.exports = {\n  // auto-join two tables based on column properties\n  // requires one column to have { references: {table: 'foreignTableName', column: 'foreignColumnName'}}\n  // or to have { references: 'foreignTableName'} -- in which case the foreign table's primary key is assumed\n  leftJoin: function (left, right) {\n    var ref = findReference(left, right);\n    if (!ref) {\n      ref = findReference(right, left);\n    }\n    return left.join(right).on(ref.left.equals(ref.right));\n  }\n};","map":{"version":3,"names":["getPrimaryKeyColumn","table","i","columns","length","col","primaryKey","findReference","left","right","references","leftName","getName","leftCol","column","module","exports","leftJoin","ref","join","on","equals"],"sources":["/home/ali/Documents/run_prj/happysnake/node_modules/sql/lib/joiner.js"],"sourcesContent":["'use strict';\n\nvar getPrimaryKeyColumn = function(table) {\n  for (var i = 0; i < table.columns.length; i++) {\n    var col = table.columns[i];\n    if (col.primaryKey) {\n      return col;\n    }\n  }\n};\n\nvar findReference = function(left, right) {\n  // find reference\n  for (var i = 0; i < right.columns.length; i++) {\n    var col = right.columns[i];\n    if (col.references) {\n      var leftName = left.getName();\n      if (col.references === leftName || col.references.table === leftName) {\n        var leftCol = left[col.references.column] || getPrimaryKeyColumn(left);\n        return {\n          left: leftCol,\n          right: col\n        };\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  // auto-join two tables based on column properties\n  // requires one column to have { references: {table: 'foreignTableName', column: 'foreignColumnName'}}\n  // or to have { references: 'foreignTableName'} -- in which case the foreign table's primary key is assumed\n  leftJoin: function(left, right) {\n    var ref = findReference(left, right);\n    if (!ref) {\n      ref = findReference(right, left);\n    }\n    return left.join(right).on(ref.left.equals(ref.right));\n  }\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,mBAAmB,GAAG,SAAAA,CAASC,KAAK,EAAE;EACxC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,OAAO,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;IAC7C,IAAIG,GAAG,GAAGJ,KAAK,CAACE,OAAO,CAACD,CAAC,CAAC;IAC1B,IAAIG,GAAG,CAACC,UAAU,EAAE;MAClB,OAAOD,GAAG;IACZ;EACF;AACF,CAAC;AAED,IAAIE,aAAa,GAAG,SAAAA,CAASC,IAAI,EAAEC,KAAK,EAAE;EACxC;EACA,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,KAAK,CAACN,OAAO,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;IAC7C,IAAIG,GAAG,GAAGI,KAAK,CAACN,OAAO,CAACD,CAAC,CAAC;IAC1B,IAAIG,GAAG,CAACK,UAAU,EAAE;MAClB,IAAIC,QAAQ,GAAGH,IAAI,CAACI,OAAO,CAAC,CAAC;MAC7B,IAAIP,GAAG,CAACK,UAAU,KAAKC,QAAQ,IAAIN,GAAG,CAACK,UAAU,CAACT,KAAK,KAAKU,QAAQ,EAAE;QACpE,IAAIE,OAAO,GAAGL,IAAI,CAACH,GAAG,CAACK,UAAU,CAACI,MAAM,CAAC,IAAId,mBAAmB,CAACQ,IAAI,CAAC;QACtE,OAAO;UACLA,IAAI,EAAEK,OAAO;UACbJ,KAAK,EAAEJ;QACT,CAAC;MACH;IACF;EACF;AACF,CAAC;AAEDU,MAAM,CAACC,OAAO,GAAG;EACf;EACA;EACA;EACAC,QAAQ,EAAE,SAAAA,CAAST,IAAI,EAAEC,KAAK,EAAE;IAC9B,IAAIS,GAAG,GAAGX,aAAa,CAACC,IAAI,EAAEC,KAAK,CAAC;IACpC,IAAI,CAACS,GAAG,EAAE;MACRA,GAAG,GAAGX,aAAa,CAACE,KAAK,EAAED,IAAI,CAAC;IAClC;IACA,OAAOA,IAAI,CAACW,IAAI,CAACV,KAAK,CAAC,CAACW,EAAE,CAACF,GAAG,CAACV,IAAI,CAACa,MAAM,CAACH,GAAG,CAACT,KAAK,CAAC,CAAC;EACxD;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}